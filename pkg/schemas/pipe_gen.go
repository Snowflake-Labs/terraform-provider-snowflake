// Code generated by sdk-to-schema generator; DO NOT EDIT.

package schemas

import (
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// ShowPipeSchema represents output of SHOW query for the single Pipe.
var ShowPipeSchema = map[string]*schema.Schema{
	"created_on": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"database_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"schema_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"definition": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"owner": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"notification_channel": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"comment": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"integration": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"pattern": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"error_integration": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"owner_role_type": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"invalid_reason": {
		Type:     schema.TypeString,
		Computed: true,
	},
}

var _ = ShowPipeSchema

func PipeToSchema(pipe *sdk.Pipe) map[string]any {
	pipeSchema := make(map[string]any)
	pipeSchema["created_on"] = pipe.CreatedOn
	pipeSchema["name"] = pipe.Name
	pipeSchema["database_name"] = pipe.DatabaseName
	pipeSchema["schema_name"] = pipe.SchemaName
	pipeSchema["definition"] = pipe.Definition
	pipeSchema["owner"] = pipe.Owner
	pipeSchema["notification_channel"] = pipe.NotificationChannel
	pipeSchema["comment"] = pipe.Comment
	pipeSchema["integration"] = pipe.Integration
	pipeSchema["pattern"] = pipe.Pattern
	pipeSchema["error_integration"] = pipe.ErrorIntegration
	pipeSchema["owner_role_type"] = pipe.OwnerRoleType
	pipeSchema["invalid_reason"] = pipe.InvalidReason
	return pipeSchema
}

var _ = PipeToSchema
