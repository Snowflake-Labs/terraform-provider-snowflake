// Code generated by sdk-to-schema generator; DO NOT EDIT.

package schemas

import (
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// ShowProcedureSchema represents output of SHOW query for the single Procedure.
var ShowProcedureSchema = map[string]*schema.Schema{
	"created_on": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"schema_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"is_builtin": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"is_aggregate": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"is_ansi": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"min_num_arguments": {
		Type:     schema.TypeInt,
		Computed: true,
	},
	"max_num_arguments": {
		Type:     schema.TypeInt,
		Computed: true,
	},
	"arguments": {
		Type:     schema.TypeInvalid,
		Computed: true,
	},
	"arguments_raw": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"description": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"catalog_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"is_table_function": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"valid_for_clustering": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"is_secure": {
		Type:     schema.TypeBool,
		Computed: true,
	},
}

var _ = ShowProcedureSchema

func ProcedureToSchema(procedure *sdk.Procedure) map[string]any {
	procedureSchema := make(map[string]any)
	procedureSchema["created_on"] = procedure.CreatedOn
	procedureSchema["name"] = procedure.Name
	procedureSchema["schema_name"] = procedure.SchemaName
	procedureSchema["is_builtin"] = procedure.IsBuiltin
	procedureSchema["is_aggregate"] = procedure.IsAggregate
	procedureSchema["is_ansi"] = procedure.IsAnsi
	procedureSchema["min_num_arguments"] = procedure.MinNumArguments
	procedureSchema["max_num_arguments"] = procedure.MaxNumArguments
	procedureSchema["arguments"] = procedure.ArgumentsOld
	procedureSchema["arguments_raw"] = procedure.ArgumentsRaw
	procedureSchema["description"] = procedure.Description
	procedureSchema["catalog_name"] = procedure.CatalogName
	procedureSchema["is_table_function"] = procedure.IsTableFunction
	procedureSchema["valid_for_clustering"] = procedure.ValidForClustering
	procedureSchema["is_secure"] = procedure.IsSecure
	return procedureSchema
}

var _ = ProcedureToSchema
