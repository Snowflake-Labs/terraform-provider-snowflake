// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type ProcedureJavascriptModel struct {
	Arguments           tfconfig.Variable `json:"arguments,omitempty"`
	Comment             tfconfig.Variable `json:"comment,omitempty"`
	Database            tfconfig.Variable `json:"database,omitempty"`
	EnableConsoleOutput tfconfig.Variable `json:"enable_console_output,omitempty"`
	ExecuteAs           tfconfig.Variable `json:"execute_as,omitempty"`
	FullyQualifiedName  tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	IsSecure            tfconfig.Variable `json:"is_secure,omitempty"`
	LogLevel            tfconfig.Variable `json:"log_level,omitempty"`
	MetricLevel         tfconfig.Variable `json:"metric_level,omitempty"`
	Name                tfconfig.Variable `json:"name,omitempty"`
	NullInputBehavior   tfconfig.Variable `json:"null_input_behavior,omitempty"`
	ProcedureDefinition tfconfig.Variable `json:"procedure_definition,omitempty"`
	ProcedureLanguage   tfconfig.Variable `json:"procedure_language,omitempty"`
	ReturnType          tfconfig.Variable `json:"return_type,omitempty"`
	Schema              tfconfig.Variable `json:"schema,omitempty"`
	TraceLevel          tfconfig.Variable `json:"trace_level,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func ProcedureJavascript(
	resourceName string,
	database string,
	name string,
	procedureDefinition string,
	returnType string,
	schema string,
) *ProcedureJavascriptModel {
	p := &ProcedureJavascriptModel{ResourceModelMeta: config.Meta(resourceName, resources.ProcedureJavascript)}
	p.WithDatabase(database)
	p.WithName(name)
	p.WithProcedureDefinition(procedureDefinition)
	p.WithReturnType(returnType)
	p.WithSchema(schema)
	return p
}

func ProcedureJavascriptWithDefaultMeta(
	database string,
	name string,
	procedureDefinition string,
	returnType string,
	schema string,
) *ProcedureJavascriptModel {
	p := &ProcedureJavascriptModel{ResourceModelMeta: config.DefaultMeta(resources.ProcedureJavascript)}
	p.WithDatabase(database)
	p.WithName(name)
	p.WithProcedureDefinition(procedureDefinition)
	p.WithReturnType(returnType)
	p.WithSchema(schema)
	return p
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (p *ProcedureJavascriptModel) MarshalJSON() ([]byte, error) {
	type Alias ProcedureJavascriptModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(p),
		DependsOn: p.DependsOn(),
	})
}

func (p *ProcedureJavascriptModel) WithDependsOn(values ...string) *ProcedureJavascriptModel {
	p.SetDependsOn(values...)
	return p
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// arguments attribute type is not yet supported, so WithArguments can't be generated

func (p *ProcedureJavascriptModel) WithComment(comment string) *ProcedureJavascriptModel {
	p.Comment = tfconfig.StringVariable(comment)
	return p
}

func (p *ProcedureJavascriptModel) WithDatabase(database string) *ProcedureJavascriptModel {
	p.Database = tfconfig.StringVariable(database)
	return p
}

func (p *ProcedureJavascriptModel) WithEnableConsoleOutput(enableConsoleOutput bool) *ProcedureJavascriptModel {
	p.EnableConsoleOutput = tfconfig.BoolVariable(enableConsoleOutput)
	return p
}

func (p *ProcedureJavascriptModel) WithExecuteAs(executeAs string) *ProcedureJavascriptModel {
	p.ExecuteAs = tfconfig.StringVariable(executeAs)
	return p
}

func (p *ProcedureJavascriptModel) WithFullyQualifiedName(fullyQualifiedName string) *ProcedureJavascriptModel {
	p.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return p
}

func (p *ProcedureJavascriptModel) WithIsSecure(isSecure string) *ProcedureJavascriptModel {
	p.IsSecure = tfconfig.StringVariable(isSecure)
	return p
}

func (p *ProcedureJavascriptModel) WithLogLevel(logLevel string) *ProcedureJavascriptModel {
	p.LogLevel = tfconfig.StringVariable(logLevel)
	return p
}

func (p *ProcedureJavascriptModel) WithMetricLevel(metricLevel string) *ProcedureJavascriptModel {
	p.MetricLevel = tfconfig.StringVariable(metricLevel)
	return p
}

func (p *ProcedureJavascriptModel) WithName(name string) *ProcedureJavascriptModel {
	p.Name = tfconfig.StringVariable(name)
	return p
}

func (p *ProcedureJavascriptModel) WithNullInputBehavior(nullInputBehavior string) *ProcedureJavascriptModel {
	p.NullInputBehavior = tfconfig.StringVariable(nullInputBehavior)
	return p
}

func (p *ProcedureJavascriptModel) WithProcedureDefinition(procedureDefinition string) *ProcedureJavascriptModel {
	p.ProcedureDefinition = tfconfig.StringVariable(procedureDefinition)
	return p
}

func (p *ProcedureJavascriptModel) WithProcedureLanguage(procedureLanguage string) *ProcedureJavascriptModel {
	p.ProcedureLanguage = tfconfig.StringVariable(procedureLanguage)
	return p
}

func (p *ProcedureJavascriptModel) WithReturnType(returnType string) *ProcedureJavascriptModel {
	p.ReturnType = tfconfig.StringVariable(returnType)
	return p
}

func (p *ProcedureJavascriptModel) WithSchema(schema string) *ProcedureJavascriptModel {
	p.Schema = tfconfig.StringVariable(schema)
	return p
}

func (p *ProcedureJavascriptModel) WithTraceLevel(traceLevel string) *ProcedureJavascriptModel {
	p.TraceLevel = tfconfig.StringVariable(traceLevel)
	return p
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (p *ProcedureJavascriptModel) WithArgumentsValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.Arguments = value
	return p
}

func (p *ProcedureJavascriptModel) WithCommentValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.Comment = value
	return p
}

func (p *ProcedureJavascriptModel) WithDatabaseValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.Database = value
	return p
}

func (p *ProcedureJavascriptModel) WithEnableConsoleOutputValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.EnableConsoleOutput = value
	return p
}

func (p *ProcedureJavascriptModel) WithExecuteAsValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.ExecuteAs = value
	return p
}

func (p *ProcedureJavascriptModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.FullyQualifiedName = value
	return p
}

func (p *ProcedureJavascriptModel) WithIsSecureValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.IsSecure = value
	return p
}

func (p *ProcedureJavascriptModel) WithLogLevelValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.LogLevel = value
	return p
}

func (p *ProcedureJavascriptModel) WithMetricLevelValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.MetricLevel = value
	return p
}

func (p *ProcedureJavascriptModel) WithNameValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.Name = value
	return p
}

func (p *ProcedureJavascriptModel) WithNullInputBehaviorValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.NullInputBehavior = value
	return p
}

func (p *ProcedureJavascriptModel) WithProcedureDefinitionValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.ProcedureDefinition = value
	return p
}

func (p *ProcedureJavascriptModel) WithProcedureLanguageValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.ProcedureLanguage = value
	return p
}

func (p *ProcedureJavascriptModel) WithReturnTypeValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.ReturnType = value
	return p
}

func (p *ProcedureJavascriptModel) WithSchemaValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.Schema = value
	return p
}

func (p *ProcedureJavascriptModel) WithTraceLevelValue(value tfconfig.Variable) *ProcedureJavascriptModel {
	p.TraceLevel = value
	return p
}
