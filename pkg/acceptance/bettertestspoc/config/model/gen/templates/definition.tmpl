{{- /*gotype: github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config/model/gen.ResourceConfigBuilderModel*/ -}}

{{- $modelName := .Name | printf "%sModel" -}}
{{- $nameLowerCase := FirstLetterLowercase .Name -}}
{{- $modelVar := FirstLetter $nameLowerCase }}

type {{ $modelName }} struct {
    {{ range .Attributes -}}
        {{ SnakeCaseToCamel .Name }} tfconfig.Variable `json:"{{ .Name }},omitempty"`
    {{ end }}
    *config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func {{ .Name }}(
    resourceName string,
    {{ range .Attributes -}}
        {{- $attributeNameCamel := SnakeCaseToCamel .Name -}}
        {{ if .Required -}}
            {{ FirstLetterLowercase $attributeNameCamel }} {{ .AttributeType }},
        {{ end }}
    {{- end -}}
) *{{ $modelName }} {
    {{ $modelVar }} := &{{ $modelName }}{ResourceModelMeta: config.Meta(resourceName, resources.{{ .Name }})}
    {{ range .Attributes -}}
        {{- $attributeNameCamel := SnakeCaseToCamel .Name -}}
        {{ if .Required -}}
            {{ $modelVar }}.With{{ $attributeNameCamel }}({{ FirstLetterLowercase $attributeNameCamel }})
        {{ end }}
    {{- end -}}
    return {{ $modelVar }}
}

func {{ .Name }}WithDefaultMeta(
    {{ range .Attributes -}}
        {{- $attributeNameCamel := SnakeCaseToCamel .Name -}}
        {{ if .Required -}}
            {{ FirstLetterLowercase $attributeNameCamel }} {{ .AttributeType }},
        {{ end }}
    {{- end -}}
) *{{ $modelName }} {
    {{ $modelVar }} := &{{ $modelName }}{ResourceModelMeta: config.DefaultMeta(resources.{{ .Name }})}
    {{ range .Attributes -}}
        {{- $attributeNameCamel := SnakeCaseToCamel .Name -}}
        {{ if .Required -}}
            {{ $modelVar }}.With{{ $attributeNameCamel }}({{ FirstLetterLowercase $attributeNameCamel }})
        {{ end }}
    {{- end -}}
    return {{ $modelVar }}
}

func (r *{{ $modelName }}) ToConfigVariables() tfconfig.Variables {
    variables := make(tfconfig.Variables)
    rType := reflect.TypeOf(r).Elem()
    rValue := reflect.ValueOf(r).Elem()
    for i := 0; i < rType.NumField(); i++ {
        field := rType.Field(i)
        if jsonTag, ok := field.Tag.Lookup("json"); ok {
            name := strings.Split(jsonTag, ",")[0]
            if fieldValue, ok := rValue.Field(i).Interface().(tfconfig.Variable); ok {
                variables[name] = fieldValue
            }
        }
    }
    return variables
}
