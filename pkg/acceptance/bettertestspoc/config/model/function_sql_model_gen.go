// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type FunctionSqlModel struct {
	Arguments             tfconfig.Variable `json:"arguments,omitempty"`
	Comment               tfconfig.Variable `json:"comment,omitempty"`
	Database              tfconfig.Variable `json:"database,omitempty"`
	EnableConsoleOutput   tfconfig.Variable `json:"enable_console_output,omitempty"`
	FullyQualifiedName    tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	FunctionDefinition    tfconfig.Variable `json:"function_definition,omitempty"`
	FunctionLanguage      tfconfig.Variable `json:"function_language,omitempty"`
	IsSecure              tfconfig.Variable `json:"is_secure,omitempty"`
	LogLevel              tfconfig.Variable `json:"log_level,omitempty"`
	MetricLevel           tfconfig.Variable `json:"metric_level,omitempty"`
	Name                  tfconfig.Variable `json:"name,omitempty"`
	ReturnResultsBehavior tfconfig.Variable `json:"return_results_behavior,omitempty"`
	ReturnType            tfconfig.Variable `json:"return_type,omitempty"`
	Schema                tfconfig.Variable `json:"schema,omitempty"`
	TraceLevel            tfconfig.Variable `json:"trace_level,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func FunctionSql(
	resourceName string,
	database string,
	functionDefinition string,
	name string,
	returnType string,
	schema string,
) *FunctionSqlModel {
	f := &FunctionSqlModel{ResourceModelMeta: config.Meta(resourceName, resources.FunctionSql)}
	f.WithDatabase(database)
	f.WithFunctionDefinition(functionDefinition)
	f.WithName(name)
	f.WithReturnType(returnType)
	f.WithSchema(schema)
	return f
}

func FunctionSqlWithDefaultMeta(
	database string,
	functionDefinition string,
	name string,
	returnType string,
	schema string,
) *FunctionSqlModel {
	f := &FunctionSqlModel{ResourceModelMeta: config.DefaultMeta(resources.FunctionSql)}
	f.WithDatabase(database)
	f.WithFunctionDefinition(functionDefinition)
	f.WithName(name)
	f.WithReturnType(returnType)
	f.WithSchema(schema)
	return f
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (f *FunctionSqlModel) MarshalJSON() ([]byte, error) {
	type Alias FunctionSqlModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(f),
		DependsOn: f.DependsOn(),
	})
}

func (f *FunctionSqlModel) WithDependsOn(values ...string) *FunctionSqlModel {
	f.SetDependsOn(values...)
	return f
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// arguments attribute type is not yet supported, so WithArguments can't be generated

func (f *FunctionSqlModel) WithComment(comment string) *FunctionSqlModel {
	f.Comment = tfconfig.StringVariable(comment)
	return f
}

func (f *FunctionSqlModel) WithDatabase(database string) *FunctionSqlModel {
	f.Database = tfconfig.StringVariable(database)
	return f
}

func (f *FunctionSqlModel) WithEnableConsoleOutput(enableConsoleOutput bool) *FunctionSqlModel {
	f.EnableConsoleOutput = tfconfig.BoolVariable(enableConsoleOutput)
	return f
}

func (f *FunctionSqlModel) WithFullyQualifiedName(fullyQualifiedName string) *FunctionSqlModel {
	f.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return f
}

func (f *FunctionSqlModel) WithFunctionDefinition(functionDefinition string) *FunctionSqlModel {
	f.FunctionDefinition = tfconfig.StringVariable(functionDefinition)
	return f
}

func (f *FunctionSqlModel) WithFunctionLanguage(functionLanguage string) *FunctionSqlModel {
	f.FunctionLanguage = tfconfig.StringVariable(functionLanguage)
	return f
}

func (f *FunctionSqlModel) WithIsSecure(isSecure string) *FunctionSqlModel {
	f.IsSecure = tfconfig.StringVariable(isSecure)
	return f
}

func (f *FunctionSqlModel) WithLogLevel(logLevel string) *FunctionSqlModel {
	f.LogLevel = tfconfig.StringVariable(logLevel)
	return f
}

func (f *FunctionSqlModel) WithMetricLevel(metricLevel string) *FunctionSqlModel {
	f.MetricLevel = tfconfig.StringVariable(metricLevel)
	return f
}

func (f *FunctionSqlModel) WithName(name string) *FunctionSqlModel {
	f.Name = tfconfig.StringVariable(name)
	return f
}

func (f *FunctionSqlModel) WithReturnResultsBehavior(returnResultsBehavior string) *FunctionSqlModel {
	f.ReturnResultsBehavior = tfconfig.StringVariable(returnResultsBehavior)
	return f
}

func (f *FunctionSqlModel) WithReturnType(returnType string) *FunctionSqlModel {
	f.ReturnType = tfconfig.StringVariable(returnType)
	return f
}

func (f *FunctionSqlModel) WithSchema(schema string) *FunctionSqlModel {
	f.Schema = tfconfig.StringVariable(schema)
	return f
}

func (f *FunctionSqlModel) WithTraceLevel(traceLevel string) *FunctionSqlModel {
	f.TraceLevel = tfconfig.StringVariable(traceLevel)
	return f
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (f *FunctionSqlModel) WithArgumentsValue(value tfconfig.Variable) *FunctionSqlModel {
	f.Arguments = value
	return f
}

func (f *FunctionSqlModel) WithCommentValue(value tfconfig.Variable) *FunctionSqlModel {
	f.Comment = value
	return f
}

func (f *FunctionSqlModel) WithDatabaseValue(value tfconfig.Variable) *FunctionSqlModel {
	f.Database = value
	return f
}

func (f *FunctionSqlModel) WithEnableConsoleOutputValue(value tfconfig.Variable) *FunctionSqlModel {
	f.EnableConsoleOutput = value
	return f
}

func (f *FunctionSqlModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *FunctionSqlModel {
	f.FullyQualifiedName = value
	return f
}

func (f *FunctionSqlModel) WithFunctionDefinitionValue(value tfconfig.Variable) *FunctionSqlModel {
	f.FunctionDefinition = value
	return f
}

func (f *FunctionSqlModel) WithFunctionLanguageValue(value tfconfig.Variable) *FunctionSqlModel {
	f.FunctionLanguage = value
	return f
}

func (f *FunctionSqlModel) WithIsSecureValue(value tfconfig.Variable) *FunctionSqlModel {
	f.IsSecure = value
	return f
}

func (f *FunctionSqlModel) WithLogLevelValue(value tfconfig.Variable) *FunctionSqlModel {
	f.LogLevel = value
	return f
}

func (f *FunctionSqlModel) WithMetricLevelValue(value tfconfig.Variable) *FunctionSqlModel {
	f.MetricLevel = value
	return f
}

func (f *FunctionSqlModel) WithNameValue(value tfconfig.Variable) *FunctionSqlModel {
	f.Name = value
	return f
}

func (f *FunctionSqlModel) WithReturnResultsBehaviorValue(value tfconfig.Variable) *FunctionSqlModel {
	f.ReturnResultsBehavior = value
	return f
}

func (f *FunctionSqlModel) WithReturnTypeValue(value tfconfig.Variable) *FunctionSqlModel {
	f.ReturnType = value
	return f
}

func (f *FunctionSqlModel) WithSchemaValue(value tfconfig.Variable) *FunctionSqlModel {
	f.Schema = value
	return f
}

func (f *FunctionSqlModel) WithTraceLevelValue(value tfconfig.Variable) *FunctionSqlModel {
	f.TraceLevel = value
	return f
}
