// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type ProcedurePythonModel struct {
	Arguments                  tfconfig.Variable `json:"arguments,omitempty"`
	Comment                    tfconfig.Variable `json:"comment,omitempty"`
	Database                   tfconfig.Variable `json:"database,omitempty"`
	EnableConsoleOutput        tfconfig.Variable `json:"enable_console_output,omitempty"`
	ExecuteAs                  tfconfig.Variable `json:"execute_as,omitempty"`
	ExternalAccessIntegrations tfconfig.Variable `json:"external_access_integrations,omitempty"`
	FullyQualifiedName         tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	Handler                    tfconfig.Variable `json:"handler,omitempty"`
	Imports                    tfconfig.Variable `json:"imports,omitempty"`
	IsSecure                   tfconfig.Variable `json:"is_secure,omitempty"`
	LogLevel                   tfconfig.Variable `json:"log_level,omitempty"`
	MetricLevel                tfconfig.Variable `json:"metric_level,omitempty"`
	Name                       tfconfig.Variable `json:"name,omitempty"`
	NullInputBehavior          tfconfig.Variable `json:"null_input_behavior,omitempty"`
	Packages                   tfconfig.Variable `json:"packages,omitempty"`
	ProcedureDefinition        tfconfig.Variable `json:"procedure_definition,omitempty"`
	ProcedureLanguage          tfconfig.Variable `json:"procedure_language,omitempty"`
	ReturnType                 tfconfig.Variable `json:"return_type,omitempty"`
	RuntimeVersion             tfconfig.Variable `json:"runtime_version,omitempty"`
	Schema                     tfconfig.Variable `json:"schema,omitempty"`
	Secrets                    tfconfig.Variable `json:"secrets,omitempty"`
	SnowparkPackage            tfconfig.Variable `json:"snowpark_package,omitempty"`
	TraceLevel                 tfconfig.Variable `json:"trace_level,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func ProcedurePython(
	resourceName string,
	database string,
	handler string,
	name string,
	returnType string,
	runtimeVersion string,
	schema string,
	snowparkPackage string,
) *ProcedurePythonModel {
	p := &ProcedurePythonModel{ResourceModelMeta: config.Meta(resourceName, resources.ProcedurePython)}
	p.WithDatabase(database)
	p.WithHandler(handler)
	p.WithName(name)
	p.WithReturnType(returnType)
	p.WithRuntimeVersion(runtimeVersion)
	p.WithSchema(schema)
	p.WithSnowparkPackage(snowparkPackage)
	return p
}

func ProcedurePythonWithDefaultMeta(
	database string,
	handler string,
	name string,
	returnType string,
	runtimeVersion string,
	schema string,
	snowparkPackage string,
) *ProcedurePythonModel {
	p := &ProcedurePythonModel{ResourceModelMeta: config.DefaultMeta(resources.ProcedurePython)}
	p.WithDatabase(database)
	p.WithHandler(handler)
	p.WithName(name)
	p.WithReturnType(returnType)
	p.WithRuntimeVersion(runtimeVersion)
	p.WithSchema(schema)
	p.WithSnowparkPackage(snowparkPackage)
	return p
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (p *ProcedurePythonModel) MarshalJSON() ([]byte, error) {
	type Alias ProcedurePythonModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(p),
		DependsOn: p.DependsOn(),
	})
}

func (p *ProcedurePythonModel) WithDependsOn(values ...string) *ProcedurePythonModel {
	p.SetDependsOn(values...)
	return p
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// arguments attribute type is not yet supported, so WithArguments can't be generated

func (p *ProcedurePythonModel) WithComment(comment string) *ProcedurePythonModel {
	p.Comment = tfconfig.StringVariable(comment)
	return p
}

func (p *ProcedurePythonModel) WithDatabase(database string) *ProcedurePythonModel {
	p.Database = tfconfig.StringVariable(database)
	return p
}

func (p *ProcedurePythonModel) WithEnableConsoleOutput(enableConsoleOutput bool) *ProcedurePythonModel {
	p.EnableConsoleOutput = tfconfig.BoolVariable(enableConsoleOutput)
	return p
}

func (p *ProcedurePythonModel) WithExecuteAs(executeAs string) *ProcedurePythonModel {
	p.ExecuteAs = tfconfig.StringVariable(executeAs)
	return p
}

// external_access_integrations attribute type is not yet supported, so WithExternalAccessIntegrations can't be generated

func (p *ProcedurePythonModel) WithFullyQualifiedName(fullyQualifiedName string) *ProcedurePythonModel {
	p.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return p
}

func (p *ProcedurePythonModel) WithHandler(handler string) *ProcedurePythonModel {
	p.Handler = tfconfig.StringVariable(handler)
	return p
}

// imports attribute type is not yet supported, so WithImports can't be generated

func (p *ProcedurePythonModel) WithIsSecure(isSecure string) *ProcedurePythonModel {
	p.IsSecure = tfconfig.StringVariable(isSecure)
	return p
}

func (p *ProcedurePythonModel) WithLogLevel(logLevel string) *ProcedurePythonModel {
	p.LogLevel = tfconfig.StringVariable(logLevel)
	return p
}

func (p *ProcedurePythonModel) WithMetricLevel(metricLevel string) *ProcedurePythonModel {
	p.MetricLevel = tfconfig.StringVariable(metricLevel)
	return p
}

func (p *ProcedurePythonModel) WithName(name string) *ProcedurePythonModel {
	p.Name = tfconfig.StringVariable(name)
	return p
}

func (p *ProcedurePythonModel) WithNullInputBehavior(nullInputBehavior string) *ProcedurePythonModel {
	p.NullInputBehavior = tfconfig.StringVariable(nullInputBehavior)
	return p
}

// packages attribute type is not yet supported, so WithPackages can't be generated

func (p *ProcedurePythonModel) WithProcedureDefinition(procedureDefinition string) *ProcedurePythonModel {
	p.ProcedureDefinition = tfconfig.StringVariable(procedureDefinition)
	return p
}

func (p *ProcedurePythonModel) WithProcedureLanguage(procedureLanguage string) *ProcedurePythonModel {
	p.ProcedureLanguage = tfconfig.StringVariable(procedureLanguage)
	return p
}

func (p *ProcedurePythonModel) WithReturnType(returnType string) *ProcedurePythonModel {
	p.ReturnType = tfconfig.StringVariable(returnType)
	return p
}

func (p *ProcedurePythonModel) WithRuntimeVersion(runtimeVersion string) *ProcedurePythonModel {
	p.RuntimeVersion = tfconfig.StringVariable(runtimeVersion)
	return p
}

func (p *ProcedurePythonModel) WithSchema(schema string) *ProcedurePythonModel {
	p.Schema = tfconfig.StringVariable(schema)
	return p
}

// secrets attribute type is not yet supported, so WithSecrets can't be generated

func (p *ProcedurePythonModel) WithSnowparkPackage(snowparkPackage string) *ProcedurePythonModel {
	p.SnowparkPackage = tfconfig.StringVariable(snowparkPackage)
	return p
}

func (p *ProcedurePythonModel) WithTraceLevel(traceLevel string) *ProcedurePythonModel {
	p.TraceLevel = tfconfig.StringVariable(traceLevel)
	return p
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (p *ProcedurePythonModel) WithArgumentsValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.Arguments = value
	return p
}

func (p *ProcedurePythonModel) WithCommentValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.Comment = value
	return p
}

func (p *ProcedurePythonModel) WithDatabaseValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.Database = value
	return p
}

func (p *ProcedurePythonModel) WithEnableConsoleOutputValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.EnableConsoleOutput = value
	return p
}

func (p *ProcedurePythonModel) WithExecuteAsValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.ExecuteAs = value
	return p
}

func (p *ProcedurePythonModel) WithExternalAccessIntegrationsValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.ExternalAccessIntegrations = value
	return p
}

func (p *ProcedurePythonModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.FullyQualifiedName = value
	return p
}

func (p *ProcedurePythonModel) WithHandlerValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.Handler = value
	return p
}

func (p *ProcedurePythonModel) WithImportsValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.Imports = value
	return p
}

func (p *ProcedurePythonModel) WithIsSecureValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.IsSecure = value
	return p
}

func (p *ProcedurePythonModel) WithLogLevelValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.LogLevel = value
	return p
}

func (p *ProcedurePythonModel) WithMetricLevelValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.MetricLevel = value
	return p
}

func (p *ProcedurePythonModel) WithNameValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.Name = value
	return p
}

func (p *ProcedurePythonModel) WithNullInputBehaviorValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.NullInputBehavior = value
	return p
}

func (p *ProcedurePythonModel) WithPackagesValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.Packages = value
	return p
}

func (p *ProcedurePythonModel) WithProcedureDefinitionValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.ProcedureDefinition = value
	return p
}

func (p *ProcedurePythonModel) WithProcedureLanguageValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.ProcedureLanguage = value
	return p
}

func (p *ProcedurePythonModel) WithReturnTypeValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.ReturnType = value
	return p
}

func (p *ProcedurePythonModel) WithRuntimeVersionValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.RuntimeVersion = value
	return p
}

func (p *ProcedurePythonModel) WithSchemaValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.Schema = value
	return p
}

func (p *ProcedurePythonModel) WithSecretsValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.Secrets = value
	return p
}

func (p *ProcedurePythonModel) WithSnowparkPackageValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.SnowparkPackage = value
	return p
}

func (p *ProcedurePythonModel) WithTraceLevelValue(value tfconfig.Variable) *ProcedurePythonModel {
	p.TraceLevel = value
	return p
}
