// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type AccountModel struct {
	AdminName          tfconfig.Variable `json:"admin_name,omitempty"`
	AdminPassword      tfconfig.Variable `json:"admin_password,omitempty"`
	AdminRsaPublicKey  tfconfig.Variable `json:"admin_rsa_public_key,omitempty"`
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	Edition            tfconfig.Variable `json:"edition,omitempty"`
	Email              tfconfig.Variable `json:"email,omitempty"`
	FirstName          tfconfig.Variable `json:"first_name,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	GracePeriodInDays  tfconfig.Variable `json:"grace_period_in_days,omitempty"`
	IsOrgAdmin         tfconfig.Variable `json:"is_org_admin,omitempty"`
	LastName           tfconfig.Variable `json:"last_name,omitempty"`
	MustChangePassword tfconfig.Variable `json:"must_change_password,omitempty"`
	Name               tfconfig.Variable `json:"name,omitempty"`
	Region             tfconfig.Variable `json:"region,omitempty"`
	RegionGroup        tfconfig.Variable `json:"region_group,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func Account(
	resourceName string,
	adminName string,
	edition string,
	email string,
	name string,
) *AccountModel {
	a := &AccountModel{ResourceModelMeta: config.Meta(resourceName, resources.Account)}
	a.WithAdminName(adminName)
	a.WithEdition(edition)
	a.WithEmail(email)
	a.WithName(name)
	return a
}

func AccountWithDefaultMeta(
	adminName string,
	edition string,
	email string,
	name string,
) *AccountModel {
	a := &AccountModel{ResourceModelMeta: config.DefaultMeta(resources.Account)}
	a.WithAdminName(adminName)
	a.WithEdition(edition)
	a.WithEmail(email)
	a.WithName(name)
	return a
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (a *AccountModel) WithAdminName(adminName string) *AccountModel {
	a.AdminName = tfconfig.StringVariable(adminName)
	return a
}

func (a *AccountModel) WithAdminPassword(adminPassword string) *AccountModel {
	a.AdminPassword = tfconfig.StringVariable(adminPassword)
	return a
}

func (a *AccountModel) WithAdminRsaPublicKey(adminRsaPublicKey string) *AccountModel {
	a.AdminRsaPublicKey = tfconfig.StringVariable(adminRsaPublicKey)
	return a
}

func (a *AccountModel) WithComment(comment string) *AccountModel {
	a.Comment = tfconfig.StringVariable(comment)
	return a
}

func (a *AccountModel) WithEdition(edition string) *AccountModel {
	a.Edition = tfconfig.StringVariable(edition)
	return a
}

func (a *AccountModel) WithEmail(email string) *AccountModel {
	a.Email = tfconfig.StringVariable(email)
	return a
}

func (a *AccountModel) WithFirstName(firstName string) *AccountModel {
	a.FirstName = tfconfig.StringVariable(firstName)
	return a
}

func (a *AccountModel) WithFullyQualifiedName(fullyQualifiedName string) *AccountModel {
	a.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return a
}

func (a *AccountModel) WithGracePeriodInDays(gracePeriodInDays int) *AccountModel {
	a.GracePeriodInDays = tfconfig.IntegerVariable(gracePeriodInDays)
	return a
}

func (a *AccountModel) WithIsOrgAdmin(isOrgAdmin bool) *AccountModel {
	a.IsOrgAdmin = tfconfig.BoolVariable(isOrgAdmin)
	return a
}

func (a *AccountModel) WithLastName(lastName string) *AccountModel {
	a.LastName = tfconfig.StringVariable(lastName)
	return a
}

func (a *AccountModel) WithMustChangePassword(mustChangePassword bool) *AccountModel {
	a.MustChangePassword = tfconfig.BoolVariable(mustChangePassword)
	return a
}

func (a *AccountModel) WithName(name string) *AccountModel {
	a.Name = tfconfig.StringVariable(name)
	return a
}

func (a *AccountModel) WithRegion(region string) *AccountModel {
	a.Region = tfconfig.StringVariable(region)
	return a
}

func (a *AccountModel) WithRegionGroup(regionGroup string) *AccountModel {
	a.RegionGroup = tfconfig.StringVariable(regionGroup)
	return a
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (a *AccountModel) WithAdminNameValue(value tfconfig.Variable) *AccountModel {
	a.AdminName = value
	return a
}

func (a *AccountModel) WithAdminPasswordValue(value tfconfig.Variable) *AccountModel {
	a.AdminPassword = value
	return a
}

func (a *AccountModel) WithAdminRsaPublicKeyValue(value tfconfig.Variable) *AccountModel {
	a.AdminRsaPublicKey = value
	return a
}

func (a *AccountModel) WithCommentValue(value tfconfig.Variable) *AccountModel {
	a.Comment = value
	return a
}

func (a *AccountModel) WithEditionValue(value tfconfig.Variable) *AccountModel {
	a.Edition = value
	return a
}

func (a *AccountModel) WithEmailValue(value tfconfig.Variable) *AccountModel {
	a.Email = value
	return a
}

func (a *AccountModel) WithFirstNameValue(value tfconfig.Variable) *AccountModel {
	a.FirstName = value
	return a
}

func (a *AccountModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *AccountModel {
	a.FullyQualifiedName = value
	return a
}

func (a *AccountModel) WithGracePeriodInDaysValue(value tfconfig.Variable) *AccountModel {
	a.GracePeriodInDays = value
	return a
}

func (a *AccountModel) WithIsOrgAdminValue(value tfconfig.Variable) *AccountModel {
	a.IsOrgAdmin = value
	return a
}

func (a *AccountModel) WithLastNameValue(value tfconfig.Variable) *AccountModel {
	a.LastName = value
	return a
}

func (a *AccountModel) WithMustChangePasswordValue(value tfconfig.Variable) *AccountModel {
	a.MustChangePassword = value
	return a
}

func (a *AccountModel) WithNameValue(value tfconfig.Variable) *AccountModel {
	a.Name = value
	return a
}

func (a *AccountModel) WithRegionValue(value tfconfig.Variable) *AccountModel {
	a.Region = value
	return a
}

func (a *AccountModel) WithRegionGroupValue(value tfconfig.Variable) *AccountModel {
	a.RegionGroup = value
	return a
}
