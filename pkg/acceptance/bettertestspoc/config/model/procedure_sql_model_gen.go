// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type ProcedureSqlModel struct {
	Arguments           tfconfig.Variable `json:"arguments,omitempty"`
	Comment             tfconfig.Variable `json:"comment,omitempty"`
	Database            tfconfig.Variable `json:"database,omitempty"`
	EnableConsoleOutput tfconfig.Variable `json:"enable_console_output,omitempty"`
	ExecuteAs           tfconfig.Variable `json:"execute_as,omitempty"`
	FullyQualifiedName  tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	IsSecure            tfconfig.Variable `json:"is_secure,omitempty"`
	LogLevel            tfconfig.Variable `json:"log_level,omitempty"`
	MetricLevel         tfconfig.Variable `json:"metric_level,omitempty"`
	Name                tfconfig.Variable `json:"name,omitempty"`
	NullInputBehavior   tfconfig.Variable `json:"null_input_behavior,omitempty"`
	ProcedureDefinition tfconfig.Variable `json:"procedure_definition,omitempty"`
	ProcedureLanguage   tfconfig.Variable `json:"procedure_language,omitempty"`
	ReturnType          tfconfig.Variable `json:"return_type,omitempty"`
	Schema              tfconfig.Variable `json:"schema,omitempty"`
	TraceLevel          tfconfig.Variable `json:"trace_level,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func ProcedureSql(
	resourceName string,
	database string,
	name string,
	procedureDefinition string,
	returnType string,
	schema string,
) *ProcedureSqlModel {
	p := &ProcedureSqlModel{ResourceModelMeta: config.Meta(resourceName, resources.ProcedureSql)}
	p.WithDatabase(database)
	p.WithName(name)
	p.WithProcedureDefinition(procedureDefinition)
	p.WithReturnType(returnType)
	p.WithSchema(schema)
	return p
}

func ProcedureSqlWithDefaultMeta(
	database string,
	name string,
	procedureDefinition string,
	returnType string,
	schema string,
) *ProcedureSqlModel {
	p := &ProcedureSqlModel{ResourceModelMeta: config.DefaultMeta(resources.ProcedureSql)}
	p.WithDatabase(database)
	p.WithName(name)
	p.WithProcedureDefinition(procedureDefinition)
	p.WithReturnType(returnType)
	p.WithSchema(schema)
	return p
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// arguments attribute type is not yet supported, so WithArguments can't be generated

func (p *ProcedureSqlModel) WithComment(comment string) *ProcedureSqlModel {
	p.Comment = tfconfig.StringVariable(comment)
	return p
}

func (p *ProcedureSqlModel) WithDatabase(database string) *ProcedureSqlModel {
	p.Database = tfconfig.StringVariable(database)
	return p
}

func (p *ProcedureSqlModel) WithEnableConsoleOutput(enableConsoleOutput bool) *ProcedureSqlModel {
	p.EnableConsoleOutput = tfconfig.BoolVariable(enableConsoleOutput)
	return p
}

func (p *ProcedureSqlModel) WithExecuteAs(executeAs string) *ProcedureSqlModel {
	p.ExecuteAs = tfconfig.StringVariable(executeAs)
	return p
}

func (p *ProcedureSqlModel) WithFullyQualifiedName(fullyQualifiedName string) *ProcedureSqlModel {
	p.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return p
}

func (p *ProcedureSqlModel) WithIsSecure(isSecure string) *ProcedureSqlModel {
	p.IsSecure = tfconfig.StringVariable(isSecure)
	return p
}

func (p *ProcedureSqlModel) WithLogLevel(logLevel string) *ProcedureSqlModel {
	p.LogLevel = tfconfig.StringVariable(logLevel)
	return p
}

func (p *ProcedureSqlModel) WithMetricLevel(metricLevel string) *ProcedureSqlModel {
	p.MetricLevel = tfconfig.StringVariable(metricLevel)
	return p
}

func (p *ProcedureSqlModel) WithName(name string) *ProcedureSqlModel {
	p.Name = tfconfig.StringVariable(name)
	return p
}

func (p *ProcedureSqlModel) WithNullInputBehavior(nullInputBehavior string) *ProcedureSqlModel {
	p.NullInputBehavior = tfconfig.StringVariable(nullInputBehavior)
	return p
}

func (p *ProcedureSqlModel) WithProcedureDefinition(procedureDefinition string) *ProcedureSqlModel {
	p.ProcedureDefinition = tfconfig.StringVariable(procedureDefinition)
	return p
}

func (p *ProcedureSqlModel) WithProcedureLanguage(procedureLanguage string) *ProcedureSqlModel {
	p.ProcedureLanguage = tfconfig.StringVariable(procedureLanguage)
	return p
}

func (p *ProcedureSqlModel) WithReturnType(returnType string) *ProcedureSqlModel {
	p.ReturnType = tfconfig.StringVariable(returnType)
	return p
}

func (p *ProcedureSqlModel) WithSchema(schema string) *ProcedureSqlModel {
	p.Schema = tfconfig.StringVariable(schema)
	return p
}

func (p *ProcedureSqlModel) WithTraceLevel(traceLevel string) *ProcedureSqlModel {
	p.TraceLevel = tfconfig.StringVariable(traceLevel)
	return p
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (p *ProcedureSqlModel) WithArgumentsValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.Arguments = value
	return p
}

func (p *ProcedureSqlModel) WithCommentValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.Comment = value
	return p
}

func (p *ProcedureSqlModel) WithDatabaseValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.Database = value
	return p
}

func (p *ProcedureSqlModel) WithEnableConsoleOutputValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.EnableConsoleOutput = value
	return p
}

func (p *ProcedureSqlModel) WithExecuteAsValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.ExecuteAs = value
	return p
}

func (p *ProcedureSqlModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.FullyQualifiedName = value
	return p
}

func (p *ProcedureSqlModel) WithIsSecureValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.IsSecure = value
	return p
}

func (p *ProcedureSqlModel) WithLogLevelValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.LogLevel = value
	return p
}

func (p *ProcedureSqlModel) WithMetricLevelValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.MetricLevel = value
	return p
}

func (p *ProcedureSqlModel) WithNameValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.Name = value
	return p
}

func (p *ProcedureSqlModel) WithNullInputBehaviorValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.NullInputBehavior = value
	return p
}

func (p *ProcedureSqlModel) WithProcedureDefinitionValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.ProcedureDefinition = value
	return p
}

func (p *ProcedureSqlModel) WithProcedureLanguageValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.ProcedureLanguage = value
	return p
}

func (p *ProcedureSqlModel) WithReturnTypeValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.ReturnType = value
	return p
}

func (p *ProcedureSqlModel) WithSchemaValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.Schema = value
	return p
}

func (p *ProcedureSqlModel) WithTraceLevelValue(value tfconfig.Variable) *ProcedureSqlModel {
	p.TraceLevel = value
	return p
}
