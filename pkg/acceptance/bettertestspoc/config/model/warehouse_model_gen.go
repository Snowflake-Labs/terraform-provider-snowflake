// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type WarehouseModel struct {
	AutoResume                      tfconfig.Variable `json:"auto_resume,omitempty"`
	AutoSuspend                     tfconfig.Variable `json:"auto_suspend,omitempty"`
	Comment                         tfconfig.Variable `json:"comment,omitempty"`
	EnableQueryAcceleration         tfconfig.Variable `json:"enable_query_acceleration,omitempty"`
	FullyQualifiedName              tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	InitiallySuspended              tfconfig.Variable `json:"initially_suspended,omitempty"`
	MaxClusterCount                 tfconfig.Variable `json:"max_cluster_count,omitempty"`
	MaxConcurrencyLevel             tfconfig.Variable `json:"max_concurrency_level,omitempty"`
	MinClusterCount                 tfconfig.Variable `json:"min_cluster_count,omitempty"`
	Name                            tfconfig.Variable `json:"name,omitempty"`
	QueryAccelerationMaxScaleFactor tfconfig.Variable `json:"query_acceleration_max_scale_factor,omitempty"`
	ResourceMonitor                 tfconfig.Variable `json:"resource_monitor,omitempty"`
	ScalingPolicy                   tfconfig.Variable `json:"scaling_policy,omitempty"`
	StatementQueuedTimeoutInSeconds tfconfig.Variable `json:"statement_queued_timeout_in_seconds,omitempty"`
	StatementTimeoutInSeconds       tfconfig.Variable `json:"statement_timeout_in_seconds,omitempty"`
	WarehouseSize                   tfconfig.Variable `json:"warehouse_size,omitempty"`
	WarehouseType                   tfconfig.Variable `json:"warehouse_type,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func Warehouse(
	resourceName string,
	name string,
) *WarehouseModel {
	w := &WarehouseModel{ResourceModelMeta: config.Meta(resourceName, resources.Warehouse)}
	w.WithName(name)
	return w
}

func WarehouseWithDefaultMeta(
	name string,
) *WarehouseModel {
	w := &WarehouseModel{ResourceModelMeta: config.DefaultMeta(resources.Warehouse)}
	w.WithName(name)
	return w
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (w *WarehouseModel) MarshalJSON() ([]byte, error) {
	type Alias WarehouseModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(w),
		DependsOn: w.DependsOn(),
	})
}

func (w *WarehouseModel) WithDependsOn(values ...string) *WarehouseModel {
	w.SetDependsOn(values...)
	return w
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (w *WarehouseModel) WithAutoResume(autoResume string) *WarehouseModel {
	w.AutoResume = tfconfig.StringVariable(autoResume)
	return w
}

func (w *WarehouseModel) WithAutoSuspend(autoSuspend int) *WarehouseModel {
	w.AutoSuspend = tfconfig.IntegerVariable(autoSuspend)
	return w
}

func (w *WarehouseModel) WithComment(comment string) *WarehouseModel {
	w.Comment = tfconfig.StringVariable(comment)
	return w
}

func (w *WarehouseModel) WithEnableQueryAcceleration(enableQueryAcceleration string) *WarehouseModel {
	w.EnableQueryAcceleration = tfconfig.StringVariable(enableQueryAcceleration)
	return w
}

func (w *WarehouseModel) WithFullyQualifiedName(fullyQualifiedName string) *WarehouseModel {
	w.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return w
}

func (w *WarehouseModel) WithInitiallySuspended(initiallySuspended bool) *WarehouseModel {
	w.InitiallySuspended = tfconfig.BoolVariable(initiallySuspended)
	return w
}

func (w *WarehouseModel) WithMaxClusterCount(maxClusterCount int) *WarehouseModel {
	w.MaxClusterCount = tfconfig.IntegerVariable(maxClusterCount)
	return w
}

func (w *WarehouseModel) WithMaxConcurrencyLevel(maxConcurrencyLevel int) *WarehouseModel {
	w.MaxConcurrencyLevel = tfconfig.IntegerVariable(maxConcurrencyLevel)
	return w
}

func (w *WarehouseModel) WithMinClusterCount(minClusterCount int) *WarehouseModel {
	w.MinClusterCount = tfconfig.IntegerVariable(minClusterCount)
	return w
}

func (w *WarehouseModel) WithName(name string) *WarehouseModel {
	w.Name = tfconfig.StringVariable(name)
	return w
}

func (w *WarehouseModel) WithQueryAccelerationMaxScaleFactor(queryAccelerationMaxScaleFactor int) *WarehouseModel {
	w.QueryAccelerationMaxScaleFactor = tfconfig.IntegerVariable(queryAccelerationMaxScaleFactor)
	return w
}

func (w *WarehouseModel) WithResourceMonitor(resourceMonitor string) *WarehouseModel {
	w.ResourceMonitor = tfconfig.StringVariable(resourceMonitor)
	return w
}

func (w *WarehouseModel) WithScalingPolicy(scalingPolicy string) *WarehouseModel {
	w.ScalingPolicy = tfconfig.StringVariable(scalingPolicy)
	return w
}

func (w *WarehouseModel) WithStatementQueuedTimeoutInSeconds(statementQueuedTimeoutInSeconds int) *WarehouseModel {
	w.StatementQueuedTimeoutInSeconds = tfconfig.IntegerVariable(statementQueuedTimeoutInSeconds)
	return w
}

func (w *WarehouseModel) WithStatementTimeoutInSeconds(statementTimeoutInSeconds int) *WarehouseModel {
	w.StatementTimeoutInSeconds = tfconfig.IntegerVariable(statementTimeoutInSeconds)
	return w
}

func (w *WarehouseModel) WithWarehouseSize(warehouseSize string) *WarehouseModel {
	w.WarehouseSize = tfconfig.StringVariable(warehouseSize)
	return w
}

func (w *WarehouseModel) WithWarehouseType(warehouseType string) *WarehouseModel {
	w.WarehouseType = tfconfig.StringVariable(warehouseType)
	return w
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (w *WarehouseModel) WithAutoResumeValue(value tfconfig.Variable) *WarehouseModel {
	w.AutoResume = value
	return w
}

func (w *WarehouseModel) WithAutoSuspendValue(value tfconfig.Variable) *WarehouseModel {
	w.AutoSuspend = value
	return w
}

func (w *WarehouseModel) WithCommentValue(value tfconfig.Variable) *WarehouseModel {
	w.Comment = value
	return w
}

func (w *WarehouseModel) WithEnableQueryAccelerationValue(value tfconfig.Variable) *WarehouseModel {
	w.EnableQueryAcceleration = value
	return w
}

func (w *WarehouseModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *WarehouseModel {
	w.FullyQualifiedName = value
	return w
}

func (w *WarehouseModel) WithInitiallySuspendedValue(value tfconfig.Variable) *WarehouseModel {
	w.InitiallySuspended = value
	return w
}

func (w *WarehouseModel) WithMaxClusterCountValue(value tfconfig.Variable) *WarehouseModel {
	w.MaxClusterCount = value
	return w
}

func (w *WarehouseModel) WithMaxConcurrencyLevelValue(value tfconfig.Variable) *WarehouseModel {
	w.MaxConcurrencyLevel = value
	return w
}

func (w *WarehouseModel) WithMinClusterCountValue(value tfconfig.Variable) *WarehouseModel {
	w.MinClusterCount = value
	return w
}

func (w *WarehouseModel) WithNameValue(value tfconfig.Variable) *WarehouseModel {
	w.Name = value
	return w
}

func (w *WarehouseModel) WithQueryAccelerationMaxScaleFactorValue(value tfconfig.Variable) *WarehouseModel {
	w.QueryAccelerationMaxScaleFactor = value
	return w
}

func (w *WarehouseModel) WithResourceMonitorValue(value tfconfig.Variable) *WarehouseModel {
	w.ResourceMonitor = value
	return w
}

func (w *WarehouseModel) WithScalingPolicyValue(value tfconfig.Variable) *WarehouseModel {
	w.ScalingPolicy = value
	return w
}

func (w *WarehouseModel) WithStatementQueuedTimeoutInSecondsValue(value tfconfig.Variable) *WarehouseModel {
	w.StatementQueuedTimeoutInSeconds = value
	return w
}

func (w *WarehouseModel) WithStatementTimeoutInSecondsValue(value tfconfig.Variable) *WarehouseModel {
	w.StatementTimeoutInSeconds = value
	return w
}

func (w *WarehouseModel) WithWarehouseSizeValue(value tfconfig.Variable) *WarehouseModel {
	w.WarehouseSize = value
	return w
}

func (w *WarehouseModel) WithWarehouseTypeValue(value tfconfig.Variable) *WarehouseModel {
	w.WarehouseType = value
	return w
}
