// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type StreamlitModel struct {
	Comment                    tfconfig.Variable `json:"comment,omitempty"`
	Database                   tfconfig.Variable `json:"database,omitempty"`
	DirectoryLocation          tfconfig.Variable `json:"directory_location,omitempty"`
	ExternalAccessIntegrations tfconfig.Variable `json:"external_access_integrations,omitempty"`
	FullyQualifiedName         tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	MainFile                   tfconfig.Variable `json:"main_file,omitempty"`
	Name                       tfconfig.Variable `json:"name,omitempty"`
	QueryWarehouse             tfconfig.Variable `json:"query_warehouse,omitempty"`
	Schema                     tfconfig.Variable `json:"schema,omitempty"`
	Stage                      tfconfig.Variable `json:"stage,omitempty"`
	Title                      tfconfig.Variable `json:"title,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func Streamlit(
	resourceName string,
	database string,
	mainFile string,
	name string,
	schema string,
	stage string,
) *StreamlitModel {
	s := &StreamlitModel{ResourceModelMeta: config.Meta(resourceName, resources.Streamlit)}
	s.WithDatabase(database)
	s.WithMainFile(mainFile)
	s.WithName(name)
	s.WithSchema(schema)
	s.WithStage(stage)
	return s
}

func StreamlitWithDefaultMeta(
	database string,
	mainFile string,
	name string,
	schema string,
	stage string,
) *StreamlitModel {
	s := &StreamlitModel{ResourceModelMeta: config.DefaultMeta(resources.Streamlit)}
	s.WithDatabase(database)
	s.WithMainFile(mainFile)
	s.WithName(name)
	s.WithSchema(schema)
	s.WithStage(stage)
	return s
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (s *StreamlitModel) MarshalJSON() ([]byte, error) {
	type Alias StreamlitModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(s),
		DependsOn: s.DependsOn(),
	})
}

func (s *StreamlitModel) WithDependsOn(values ...string) *StreamlitModel {
	s.SetDependsOn(values...)
	return s
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (s *StreamlitModel) WithComment(comment string) *StreamlitModel {
	s.Comment = tfconfig.StringVariable(comment)
	return s
}

func (s *StreamlitModel) WithDatabase(database string) *StreamlitModel {
	s.Database = tfconfig.StringVariable(database)
	return s
}

func (s *StreamlitModel) WithDirectoryLocation(directoryLocation string) *StreamlitModel {
	s.DirectoryLocation = tfconfig.StringVariable(directoryLocation)
	return s
}

// external_access_integrations attribute type is not yet supported, so WithExternalAccessIntegrations can't be generated

func (s *StreamlitModel) WithFullyQualifiedName(fullyQualifiedName string) *StreamlitModel {
	s.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return s
}

func (s *StreamlitModel) WithMainFile(mainFile string) *StreamlitModel {
	s.MainFile = tfconfig.StringVariable(mainFile)
	return s
}

func (s *StreamlitModel) WithName(name string) *StreamlitModel {
	s.Name = tfconfig.StringVariable(name)
	return s
}

func (s *StreamlitModel) WithQueryWarehouse(queryWarehouse string) *StreamlitModel {
	s.QueryWarehouse = tfconfig.StringVariable(queryWarehouse)
	return s
}

func (s *StreamlitModel) WithSchema(schema string) *StreamlitModel {
	s.Schema = tfconfig.StringVariable(schema)
	return s
}

func (s *StreamlitModel) WithStage(stage string) *StreamlitModel {
	s.Stage = tfconfig.StringVariable(stage)
	return s
}

func (s *StreamlitModel) WithTitle(title string) *StreamlitModel {
	s.Title = tfconfig.StringVariable(title)
	return s
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (s *StreamlitModel) WithCommentValue(value tfconfig.Variable) *StreamlitModel {
	s.Comment = value
	return s
}

func (s *StreamlitModel) WithDatabaseValue(value tfconfig.Variable) *StreamlitModel {
	s.Database = value
	return s
}

func (s *StreamlitModel) WithDirectoryLocationValue(value tfconfig.Variable) *StreamlitModel {
	s.DirectoryLocation = value
	return s
}

func (s *StreamlitModel) WithExternalAccessIntegrationsValue(value tfconfig.Variable) *StreamlitModel {
	s.ExternalAccessIntegrations = value
	return s
}

func (s *StreamlitModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *StreamlitModel {
	s.FullyQualifiedName = value
	return s
}

func (s *StreamlitModel) WithMainFileValue(value tfconfig.Variable) *StreamlitModel {
	s.MainFile = value
	return s
}

func (s *StreamlitModel) WithNameValue(value tfconfig.Variable) *StreamlitModel {
	s.Name = value
	return s
}

func (s *StreamlitModel) WithQueryWarehouseValue(value tfconfig.Variable) *StreamlitModel {
	s.QueryWarehouse = value
	return s
}

func (s *StreamlitModel) WithSchemaValue(value tfconfig.Variable) *StreamlitModel {
	s.Schema = value
	return s
}

func (s *StreamlitModel) WithStageValue(value tfconfig.Variable) *StreamlitModel {
	s.Stage = value
	return s
}

func (s *StreamlitModel) WithTitleValue(value tfconfig.Variable) *StreamlitModel {
	s.Title = value
	return s
}
