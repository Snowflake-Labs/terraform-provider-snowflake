// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type NetworkPolicyModel struct {
	AllowedIpList          tfconfig.Variable `json:"allowed_ip_list,omitempty"`
	AllowedNetworkRuleList tfconfig.Variable `json:"allowed_network_rule_list,omitempty"`
	BlockedIpList          tfconfig.Variable `json:"blocked_ip_list,omitempty"`
	BlockedNetworkRuleList tfconfig.Variable `json:"blocked_network_rule_list,omitempty"`
	Comment                tfconfig.Variable `json:"comment,omitempty"`
	FullyQualifiedName     tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	Name                   tfconfig.Variable `json:"name,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func NetworkPolicy(
	resourceName string,
	name string,
) *NetworkPolicyModel {
	n := &NetworkPolicyModel{ResourceModelMeta: config.Meta(resourceName, resources.NetworkPolicy)}
	n.WithName(name)
	return n
}

func NetworkPolicyWithDefaultMeta(
	name string,
) *NetworkPolicyModel {
	n := &NetworkPolicyModel{ResourceModelMeta: config.DefaultMeta(resources.NetworkPolicy)}
	n.WithName(name)
	return n
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (n *NetworkPolicyModel) MarshalJSON() ([]byte, error) {
	type Alias NetworkPolicyModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(n),
		DependsOn: n.DependsOn(),
	})
}

func (n *NetworkPolicyModel) WithDependsOn(values ...string) *NetworkPolicyModel {
	n.SetDependsOn(values...)
	return n
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// allowed_ip_list attribute type is not yet supported, so WithAllowedIpList can't be generated

// allowed_network_rule_list attribute type is not yet supported, so WithAllowedNetworkRuleList can't be generated

// blocked_ip_list attribute type is not yet supported, so WithBlockedIpList can't be generated

// blocked_network_rule_list attribute type is not yet supported, so WithBlockedNetworkRuleList can't be generated

func (n *NetworkPolicyModel) WithComment(comment string) *NetworkPolicyModel {
	n.Comment = tfconfig.StringVariable(comment)
	return n
}

func (n *NetworkPolicyModel) WithFullyQualifiedName(fullyQualifiedName string) *NetworkPolicyModel {
	n.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return n
}

func (n *NetworkPolicyModel) WithName(name string) *NetworkPolicyModel {
	n.Name = tfconfig.StringVariable(name)
	return n
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (n *NetworkPolicyModel) WithAllowedIpListValue(value tfconfig.Variable) *NetworkPolicyModel {
	n.AllowedIpList = value
	return n
}

func (n *NetworkPolicyModel) WithAllowedNetworkRuleListValue(value tfconfig.Variable) *NetworkPolicyModel {
	n.AllowedNetworkRuleList = value
	return n
}

func (n *NetworkPolicyModel) WithBlockedIpListValue(value tfconfig.Variable) *NetworkPolicyModel {
	n.BlockedIpList = value
	return n
}

func (n *NetworkPolicyModel) WithBlockedNetworkRuleListValue(value tfconfig.Variable) *NetworkPolicyModel {
	n.BlockedNetworkRuleList = value
	return n
}

func (n *NetworkPolicyModel) WithCommentValue(value tfconfig.Variable) *NetworkPolicyModel {
	n.Comment = value
	return n
}

func (n *NetworkPolicyModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *NetworkPolicyModel {
	n.FullyQualifiedName = value
	return n
}

func (n *NetworkPolicyModel) WithNameValue(value tfconfig.Variable) *NetworkPolicyModel {
	n.Name = value
	return n
}
