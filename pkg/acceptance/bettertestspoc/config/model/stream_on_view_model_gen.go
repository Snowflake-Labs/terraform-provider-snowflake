// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type StreamOnViewModel struct {
	AppendOnly         tfconfig.Variable `json:"append_only,omitempty"`
	At                 tfconfig.Variable `json:"at,omitempty"`
	Before             tfconfig.Variable `json:"before,omitempty"`
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	CopyGrants         tfconfig.Variable `json:"copy_grants,omitempty"`
	Database           tfconfig.Variable `json:"database,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	Name               tfconfig.Variable `json:"name,omitempty"`
	Schema             tfconfig.Variable `json:"schema,omitempty"`
	ShowInitialRows    tfconfig.Variable `json:"show_initial_rows,omitempty"`
	Stale              tfconfig.Variable `json:"stale,omitempty"`
	StreamType         tfconfig.Variable `json:"stream_type,omitempty"`
	View               tfconfig.Variable `json:"view,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func StreamOnView(
	resourceName string,
	database string,
	name string,
	schema string,
	view string,
) *StreamOnViewModel {
	s := &StreamOnViewModel{ResourceModelMeta: config.Meta(resourceName, resources.StreamOnView)}
	s.WithDatabase(database)
	s.WithName(name)
	s.WithSchema(schema)
	s.WithView(view)
	return s
}

func StreamOnViewWithDefaultMeta(
	database string,
	name string,
	schema string,
	view string,
) *StreamOnViewModel {
	s := &StreamOnViewModel{ResourceModelMeta: config.DefaultMeta(resources.StreamOnView)}
	s.WithDatabase(database)
	s.WithName(name)
	s.WithSchema(schema)
	s.WithView(view)
	return s
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (s *StreamOnViewModel) MarshalJSON() ([]byte, error) {
	type Alias StreamOnViewModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(s),
		DependsOn: s.DependsOn(),
	})
}

func (s *StreamOnViewModel) WithDependsOn(values ...string) *StreamOnViewModel {
	s.SetDependsOn(values...)
	return s
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (s *StreamOnViewModel) WithAppendOnly(appendOnly string) *StreamOnViewModel {
	s.AppendOnly = tfconfig.StringVariable(appendOnly)
	return s
}

// at attribute type is not yet supported, so WithAt can't be generated

// before attribute type is not yet supported, so WithBefore can't be generated

func (s *StreamOnViewModel) WithComment(comment string) *StreamOnViewModel {
	s.Comment = tfconfig.StringVariable(comment)
	return s
}

func (s *StreamOnViewModel) WithCopyGrants(copyGrants bool) *StreamOnViewModel {
	s.CopyGrants = tfconfig.BoolVariable(copyGrants)
	return s
}

func (s *StreamOnViewModel) WithDatabase(database string) *StreamOnViewModel {
	s.Database = tfconfig.StringVariable(database)
	return s
}

func (s *StreamOnViewModel) WithFullyQualifiedName(fullyQualifiedName string) *StreamOnViewModel {
	s.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return s
}

func (s *StreamOnViewModel) WithName(name string) *StreamOnViewModel {
	s.Name = tfconfig.StringVariable(name)
	return s
}

func (s *StreamOnViewModel) WithSchema(schema string) *StreamOnViewModel {
	s.Schema = tfconfig.StringVariable(schema)
	return s
}

func (s *StreamOnViewModel) WithShowInitialRows(showInitialRows string) *StreamOnViewModel {
	s.ShowInitialRows = tfconfig.StringVariable(showInitialRows)
	return s
}

func (s *StreamOnViewModel) WithStale(stale bool) *StreamOnViewModel {
	s.Stale = tfconfig.BoolVariable(stale)
	return s
}

func (s *StreamOnViewModel) WithStreamType(streamType string) *StreamOnViewModel {
	s.StreamType = tfconfig.StringVariable(streamType)
	return s
}

func (s *StreamOnViewModel) WithView(view string) *StreamOnViewModel {
	s.View = tfconfig.StringVariable(view)
	return s
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (s *StreamOnViewModel) WithAppendOnlyValue(value tfconfig.Variable) *StreamOnViewModel {
	s.AppendOnly = value
	return s
}

func (s *StreamOnViewModel) WithAtValue(value tfconfig.Variable) *StreamOnViewModel {
	s.At = value
	return s
}

func (s *StreamOnViewModel) WithBeforeValue(value tfconfig.Variable) *StreamOnViewModel {
	s.Before = value
	return s
}

func (s *StreamOnViewModel) WithCommentValue(value tfconfig.Variable) *StreamOnViewModel {
	s.Comment = value
	return s
}

func (s *StreamOnViewModel) WithCopyGrantsValue(value tfconfig.Variable) *StreamOnViewModel {
	s.CopyGrants = value
	return s
}

func (s *StreamOnViewModel) WithDatabaseValue(value tfconfig.Variable) *StreamOnViewModel {
	s.Database = value
	return s
}

func (s *StreamOnViewModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *StreamOnViewModel {
	s.FullyQualifiedName = value
	return s
}

func (s *StreamOnViewModel) WithNameValue(value tfconfig.Variable) *StreamOnViewModel {
	s.Name = value
	return s
}

func (s *StreamOnViewModel) WithSchemaValue(value tfconfig.Variable) *StreamOnViewModel {
	s.Schema = value
	return s
}

func (s *StreamOnViewModel) WithShowInitialRowsValue(value tfconfig.Variable) *StreamOnViewModel {
	s.ShowInitialRows = value
	return s
}

func (s *StreamOnViewModel) WithStaleValue(value tfconfig.Variable) *StreamOnViewModel {
	s.Stale = value
	return s
}

func (s *StreamOnViewModel) WithStreamTypeValue(value tfconfig.Variable) *StreamOnViewModel {
	s.StreamType = value
	return s
}

func (s *StreamOnViewModel) WithViewValue(value tfconfig.Variable) *StreamOnViewModel {
	s.View = value
	return s
}
