// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type AccountRoleModel struct {
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	Name               tfconfig.Variable `json:"name,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func AccountRole(
	resourceName string,
	name string,
) *AccountRoleModel {
	a := &AccountRoleModel{ResourceModelMeta: config.Meta(resourceName, resources.AccountRole)}
	a.WithName(name)
	return a
}

func AccountRoleWithDefaultMeta(
	name string,
) *AccountRoleModel {
	a := &AccountRoleModel{ResourceModelMeta: config.DefaultMeta(resources.AccountRole)}
	a.WithName(name)
	return a
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (a *AccountRoleModel) MarshalJSON() ([]byte, error) {
	type Alias AccountRoleModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(a),
		DependsOn: a.DependsOn(),
	})
}

func (a *AccountRoleModel) WithDependsOn(values ...string) *AccountRoleModel {
	a.SetDependsOn(values...)
	return a
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (a *AccountRoleModel) WithComment(comment string) *AccountRoleModel {
	a.Comment = tfconfig.StringVariable(comment)
	return a
}

func (a *AccountRoleModel) WithFullyQualifiedName(fullyQualifiedName string) *AccountRoleModel {
	a.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return a
}

func (a *AccountRoleModel) WithName(name string) *AccountRoleModel {
	a.Name = tfconfig.StringVariable(name)
	return a
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (a *AccountRoleModel) WithCommentValue(value tfconfig.Variable) *AccountRoleModel {
	a.Comment = value
	return a
}

func (a *AccountRoleModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *AccountRoleModel {
	a.FullyQualifiedName = value
	return a
}

func (a *AccountRoleModel) WithNameValue(value tfconfig.Variable) *AccountRoleModel {
	a.Name = value
	return a
}
