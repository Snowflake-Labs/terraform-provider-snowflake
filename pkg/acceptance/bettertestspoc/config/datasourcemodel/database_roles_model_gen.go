// Code generated by config model builder generator; DO NOT EDIT.

package datasourcemodel

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
)

type DatabaseRolesModel struct {
	DatabaseRoles tfconfig.Variable `json:"database_roles,omitempty"`
	InDatabase    tfconfig.Variable `json:"in_database,omitempty"`
	Like          tfconfig.Variable `json:"like,omitempty"`
	Limit         tfconfig.Variable `json:"limit,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func DatabaseRoles(
	datasourceName string,
	inDatabase string,
) *DatabaseRolesModel {
	d := &DatabaseRolesModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.DatabaseRoles)}
	d.WithInDatabase(inDatabase)
	return d
}

func DatabaseRolesWithDefaultMeta(
	inDatabase string,
) *DatabaseRolesModel {
	d := &DatabaseRolesModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.DatabaseRoles)}
	d.WithInDatabase(inDatabase)
	return d
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (d *DatabaseRolesModel) MarshalJSON() ([]byte, error) {
	type Alias DatabaseRolesModel
	return json.Marshal(&struct {
		*Alias
		DependsOn                 []string                      `json:"depends_on,omitempty"`
		SingleAttributeWorkaround config.ReplacementPlaceholder `json:"single_attribute_workaround,omitempty"`
	}{
		Alias:                     (*Alias)(d),
		DependsOn:                 d.DependsOn(),
		SingleAttributeWorkaround: config.SnowflakeProviderConfigSingleAttributeWorkaround,
	})
}

func (d *DatabaseRolesModel) WithDependsOn(values ...string) *DatabaseRolesModel {
	d.SetDependsOn(values...)
	return d
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// database_roles attribute type is not yet supported, so WithDatabaseRoles can't be generated

func (d *DatabaseRolesModel) WithInDatabase(inDatabase string) *DatabaseRolesModel {
	d.InDatabase = tfconfig.StringVariable(inDatabase)
	return d
}

func (d *DatabaseRolesModel) WithLike(like string) *DatabaseRolesModel {
	d.Like = tfconfig.StringVariable(like)
	return d
}

// limit attribute type is not yet supported, so WithLimit can't be generated

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (d *DatabaseRolesModel) WithDatabaseRolesValue(value tfconfig.Variable) *DatabaseRolesModel {
	d.DatabaseRoles = value
	return d
}

func (d *DatabaseRolesModel) WithInDatabaseValue(value tfconfig.Variable) *DatabaseRolesModel {
	d.InDatabase = value
	return d
}

func (d *DatabaseRolesModel) WithLikeValue(value tfconfig.Variable) *DatabaseRolesModel {
	d.Like = value
	return d
}

func (d *DatabaseRolesModel) WithLimitValue(value tfconfig.Variable) *DatabaseRolesModel {
	d.Limit = value
	return d
}
