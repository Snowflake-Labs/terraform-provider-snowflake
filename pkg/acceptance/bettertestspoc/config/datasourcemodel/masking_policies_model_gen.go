// Code generated by config model builder generator; DO NOT EDIT.

package datasourcemodel

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
)

type MaskingPoliciesModel struct {
	In              tfconfig.Variable `json:"in,omitempty"`
	Like            tfconfig.Variable `json:"like,omitempty"`
	Limit           tfconfig.Variable `json:"limit,omitempty"`
	MaskingPolicies tfconfig.Variable `json:"masking_policies,omitempty"`
	WithDescribe    tfconfig.Variable `json:"with_describe,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func MaskingPolicies(
	datasourceName string,
) *MaskingPoliciesModel {
	m := &MaskingPoliciesModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.MaskingPolicies)}
	return m
}

func MaskingPoliciesWithDefaultMeta() *MaskingPoliciesModel {
	m := &MaskingPoliciesModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.MaskingPolicies)}
	return m
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (m *MaskingPoliciesModel) MarshalJSON() ([]byte, error) {
	type Alias MaskingPoliciesModel
	return json.Marshal(&struct {
		*Alias
		DependsOn                 []string                      `json:"depends_on,omitempty"`
		SingleAttributeWorkaround config.ReplacementPlaceholder `json:"single_attribute_workaround,omitempty"`
	}{
		Alias:                     (*Alias)(m),
		DependsOn:                 m.DependsOn(),
		SingleAttributeWorkaround: config.SnowflakeProviderConfigSingleAttributeWorkaround,
	})
}

func (m *MaskingPoliciesModel) WithDependsOn(values ...string) *MaskingPoliciesModel {
	m.SetDependsOn(values...)
	return m
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// in attribute type is not yet supported, so WithIn can't be generated

func (m *MaskingPoliciesModel) WithLike(like string) *MaskingPoliciesModel {
	m.Like = tfconfig.StringVariable(like)
	return m
}

// limit attribute type is not yet supported, so WithLimit can't be generated

// masking_policies attribute type is not yet supported, so WithMaskingPolicies can't be generated

func (m *MaskingPoliciesModel) WithWithDescribe(withDescribe bool) *MaskingPoliciesModel {
	m.WithDescribe = tfconfig.BoolVariable(withDescribe)
	return m
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (m *MaskingPoliciesModel) WithInValue(value tfconfig.Variable) *MaskingPoliciesModel {
	m.In = value
	return m
}

func (m *MaskingPoliciesModel) WithLikeValue(value tfconfig.Variable) *MaskingPoliciesModel {
	m.Like = value
	return m
}

func (m *MaskingPoliciesModel) WithLimitValue(value tfconfig.Variable) *MaskingPoliciesModel {
	m.Limit = value
	return m
}

func (m *MaskingPoliciesModel) WithMaskingPoliciesValue(value tfconfig.Variable) *MaskingPoliciesModel {
	m.MaskingPolicies = value
	return m
}

func (m *MaskingPoliciesModel) WithWithDescribeValue(value tfconfig.Variable) *MaskingPoliciesModel {
	m.WithDescribe = value
	return m
}
