// Code generated by config model builder generator; DO NOT EDIT.

package datasourcemodel

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
)

type TagsModel struct {
	In   tfconfig.Variable `json:"in,omitempty"`
	Like tfconfig.Variable `json:"like,omitempty"`
	Tags tfconfig.Variable `json:"tags,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func Tags(
	datasourceName string,
) *TagsModel {
	t := &TagsModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.Tags)}
	return t
}

func TagsWithDefaultMeta() *TagsModel {
	t := &TagsModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.Tags)}
	return t
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (t *TagsModel) MarshalJSON() ([]byte, error) {
	type Alias TagsModel
	return json.Marshal(&struct {
		*Alias
		DependsOn                 []string                      `json:"depends_on,omitempty"`
		SingleAttributeWorkaround config.ReplacementPlaceholder `json:"single_attribute_workaround,omitempty"`
	}{
		Alias:                     (*Alias)(t),
		DependsOn:                 t.DependsOn(),
		SingleAttributeWorkaround: config.SnowflakeProviderConfigSingleAttributeWorkaround,
	})
}

func (t *TagsModel) WithDependsOn(values ...string) *TagsModel {
	t.SetDependsOn(values...)
	return t
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// in attribute type is not yet supported, so WithIn can't be generated

func (t *TagsModel) WithLike(like string) *TagsModel {
	t.Like = tfconfig.StringVariable(like)
	return t
}

// tags attribute type is not yet supported, so WithTags can't be generated

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (t *TagsModel) WithInValue(value tfconfig.Variable) *TagsModel {
	t.In = value
	return t
}

func (t *TagsModel) WithLikeValue(value tfconfig.Variable) *TagsModel {
	t.Like = value
	return t
}

func (t *TagsModel) WithTagsValue(value tfconfig.Variable) *TagsModel {
	t.Tags = value
	return t
}
