// Code generated by config model builder generator; DO NOT EDIT.

package datasourcemodel

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
)

type ResourceMonitorsModel struct {
	Like             tfconfig.Variable `json:"like,omitempty"`
	ResourceMonitors tfconfig.Variable `json:"resource_monitors,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func ResourceMonitors(
	datasourceName string,
) *ResourceMonitorsModel {
	r := &ResourceMonitorsModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.ResourceMonitors)}
	return r
}

func ResourceMonitorsWithDefaultMeta() *ResourceMonitorsModel {
	r := &ResourceMonitorsModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.ResourceMonitors)}
	return r
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (r *ResourceMonitorsModel) MarshalJSON() ([]byte, error) {
	type Alias ResourceMonitorsModel
	return json.Marshal(&struct {
		*Alias
		DependsOn                 []string                      `json:"depends_on,omitempty"`
		SingleAttributeWorkaround config.ReplacementPlaceholder `json:"single_attribute_workaround,omitempty"`
	}{
		Alias:                     (*Alias)(r),
		DependsOn:                 r.DependsOn(),
		SingleAttributeWorkaround: config.SnowflakeProviderConfigSingleAttributeWorkaround,
	})
}

func (r *ResourceMonitorsModel) WithDependsOn(values ...string) *ResourceMonitorsModel {
	r.SetDependsOn(values...)
	return r
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (r *ResourceMonitorsModel) WithLike(like string) *ResourceMonitorsModel {
	r.Like = tfconfig.StringVariable(like)
	return r
}

// resource_monitors attribute type is not yet supported, so WithResourceMonitors can't be generated

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (r *ResourceMonitorsModel) WithLikeValue(value tfconfig.Variable) *ResourceMonitorsModel {
	r.Like = value
	return r
}

func (r *ResourceMonitorsModel) WithResourceMonitorsValue(value tfconfig.Variable) *ResourceMonitorsModel {
	r.ResourceMonitors = value
	return r
}
