// Code generated by config model builder generator; DO NOT EDIT.

package datasourcemodel

import (
	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
)

type DatabasesModel struct {
	Databases      tfconfig.Variable `json:"databases,omitempty"`
	Like           tfconfig.Variable `json:"like,omitempty"`
	Limit          tfconfig.Variable `json:"limit,omitempty"`
	StartsWith     tfconfig.Variable `json:"starts_with,omitempty"`
	WithDescribe   tfconfig.Variable `json:"with_describe,omitempty"`
	WithParameters tfconfig.Variable `json:"with_parameters,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func Databases(
	datasourceName string,
) *DatabasesModel {
	d := &DatabasesModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.Databases)}
	return d
}

func DatabasesWithDefaultMeta() *DatabasesModel {
	d := &DatabasesModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.Databases)}
	return d
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// databases attribute type is not yet supported, so WithDatabases can't be generated

func (d *DatabasesModel) WithLike(like string) *DatabasesModel {
	d.Like = tfconfig.StringVariable(like)
	return d
}

// limit attribute type is not yet supported, so WithLimit can't be generated

func (d *DatabasesModel) WithStartsWith(startsWith string) *DatabasesModel {
	d.StartsWith = tfconfig.StringVariable(startsWith)
	return d
}

func (d *DatabasesModel) WithWithDescribe(withDescribe bool) *DatabasesModel {
	d.WithDescribe = tfconfig.BoolVariable(withDescribe)
	return d
}

func (d *DatabasesModel) WithWithParameters(withParameters bool) *DatabasesModel {
	d.WithParameters = tfconfig.BoolVariable(withParameters)
	return d
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (d *DatabasesModel) WithDatabasesValue(value tfconfig.Variable) *DatabasesModel {
	d.Databases = value
	return d
}

func (d *DatabasesModel) WithLikeValue(value tfconfig.Variable) *DatabasesModel {
	d.Like = value
	return d
}

func (d *DatabasesModel) WithLimitValue(value tfconfig.Variable) *DatabasesModel {
	d.Limit = value
	return d
}

func (d *DatabasesModel) WithStartsWithValue(value tfconfig.Variable) *DatabasesModel {
	d.StartsWith = value
	return d
}

func (d *DatabasesModel) WithWithDescribeValue(value tfconfig.Variable) *DatabasesModel {
	d.WithDescribe = value
	return d
}

func (d *DatabasesModel) WithWithParametersValue(value tfconfig.Variable) *DatabasesModel {
	d.WithParameters = value
	return d
}
