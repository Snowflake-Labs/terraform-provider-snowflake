// Code generated by assertions generator; DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"

	acc "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type DatabaseRoleAssert struct {
	*assert.SnowflakeObjectAssert[sdk.DatabaseRole, sdk.DatabaseObjectIdentifier]
}

func DatabaseRole(t *testing.T, id sdk.DatabaseObjectIdentifier) *DatabaseRoleAssert {
	t.Helper()
	return &DatabaseRoleAssert{
		assert.NewSnowflakeObjectAssertWithProvider(sdk.ObjectTypeDatabaseRole, id, acc.TestClient().DatabaseRole.Show),
	}
}

func DatabaseRoleFromObject(t *testing.T, databaseRole *sdk.DatabaseRole) *DatabaseRoleAssert {
	t.Helper()
	return &DatabaseRoleAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeDatabaseRole, databaseRole.ID(), databaseRole),
	}
}

func (d *DatabaseRoleAssert) HasCreatedOn(expected string) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasName(expected string) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasDatabaseName(expected string) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.DatabaseName != expected {
			return fmt.Errorf("expected database name: %v; got: %v", expected, o.DatabaseName)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasIsDefault(expected bool) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.IsDefault != expected {
			return fmt.Errorf("expected is default: %v; got: %v", expected, o.IsDefault)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasIsCurrent(expected bool) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.IsCurrent != expected {
			return fmt.Errorf("expected is current: %v; got: %v", expected, o.IsCurrent)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasIsInherited(expected bool) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.IsInherited != expected {
			return fmt.Errorf("expected is inherited: %v; got: %v", expected, o.IsInherited)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasGrantedToRoles(expected int) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.GrantedToRoles != expected {
			return fmt.Errorf("expected granted to roles: %v; got: %v", expected, o.GrantedToRoles)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasGrantedToDatabaseRoles(expected int) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.GrantedToDatabaseRoles != expected {
			return fmt.Errorf("expected granted to database roles: %v; got: %v", expected, o.GrantedToDatabaseRoles)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasGrantedDatabaseRoles(expected int) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.GrantedDatabaseRoles != expected {
			return fmt.Errorf("expected granted database roles: %v; got: %v", expected, o.GrantedDatabaseRoles)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasOwner(expected string) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasComment(expected string) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, o.Comment)
		}
		return nil
	})
	return d
}

func (d *DatabaseRoleAssert) HasOwnerRoleType(expected string) *DatabaseRoleAssert {
	d.AddAssertion(func(t *testing.T, o *sdk.DatabaseRole) error {
		t.Helper()
		if o.OwnerRoleType != expected {
			return fmt.Errorf("expected owner role type: %v; got: %v", expected, o.OwnerRoleType)
		}
		return nil
	})
	return d
}
