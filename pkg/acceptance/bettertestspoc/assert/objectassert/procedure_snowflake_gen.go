// Code generated by assertions generator; DO NOT EDIT.

package objectassert

// imports edited manually
import (
	"fmt"
	"slices"
	"testing"

	acc "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type ProcedureAssert struct {
	*assert.SnowflakeObjectAssert[sdk.Procedure, sdk.SchemaObjectIdentifierWithArguments]
}

func Procedure(t *testing.T, id sdk.SchemaObjectIdentifierWithArguments) *ProcedureAssert {
	t.Helper()
	return &ProcedureAssert{
		assert.NewSnowflakeObjectAssertWithProvider(sdk.ObjectTypeProcedure, id, acc.TestClient().Procedure.Show),
	}
}

func ProcedureFromObject(t *testing.T, procedure *sdk.Procedure) *ProcedureAssert {
	t.Helper()
	return &ProcedureAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeProcedure, procedure.ID(), procedure),
	}
}

func (p *ProcedureAssert) HasCreatedOn(expected string) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasName(expected string) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasSchemaName(expected string) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.SchemaName != expected {
			return fmt.Errorf("expected schema name: %v; got: %v", expected, o.SchemaName)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasIsBuiltin(expected bool) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.IsBuiltin != expected {
			return fmt.Errorf("expected is builtin: %v; got: %v", expected, o.IsBuiltin)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasIsAggregate(expected bool) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.IsAggregate != expected {
			return fmt.Errorf("expected is aggregate: %v; got: %v", expected, o.IsAggregate)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasIsAnsi(expected bool) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.IsAnsi != expected {
			return fmt.Errorf("expected is ansi: %v; got: %v", expected, o.IsAnsi)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasMinNumArguments(expected int) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.MinNumArguments != expected {
			return fmt.Errorf("expected min num arguments: %v; got: %v", expected, o.MinNumArguments)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasMaxNumArguments(expected int) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.MaxNumArguments != expected {
			return fmt.Errorf("expected max num arguments: %v; got: %v", expected, o.MaxNumArguments)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasArgumentsOld(expected []sdk.DataType) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		// edited manually
		if !slices.Equal(o.ArgumentsOld, expected) {
			return fmt.Errorf("expected arguments old: %v; got: %v", expected, o.ArgumentsOld)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasArgumentsRaw(expected string) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.ArgumentsRaw != expected {
			return fmt.Errorf("expected arguments raw: %v; got: %v", expected, o.ArgumentsRaw)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasDescription(expected string) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.Description != expected {
			return fmt.Errorf("expected description: %v; got: %v", expected, o.Description)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasCatalogName(expected string) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.CatalogName != expected {
			return fmt.Errorf("expected catalog name: %v; got: %v", expected, o.CatalogName)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasIsTableFunction(expected bool) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.IsTableFunction != expected {
			return fmt.Errorf("expected is table function: %v; got: %v", expected, o.IsTableFunction)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasValidForClustering(expected bool) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.ValidForClustering != expected {
			return fmt.Errorf("expected valid for clustering: %v; got: %v", expected, o.ValidForClustering)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasIsSecure(expected bool) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.IsSecure != expected {
			return fmt.Errorf("expected is secure: %v; got: %v", expected, o.IsSecure)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasSecrets(expected string) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.Secrets == nil {
			return fmt.Errorf("expected secrets to have value; got: nil")
		}
		if *o.Secrets != expected {
			return fmt.Errorf("expected secrets: %v; got: %v", expected, *o.Secrets)
		}
		return nil
	})
	return p
}

func (p *ProcedureAssert) HasExternalAccessIntegrations(expected string) *ProcedureAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.Procedure) error {
		t.Helper()
		if o.ExternalAccessIntegrations == nil {
			return fmt.Errorf("expected external access integrations to have value; got: nil")
		}
		if *o.ExternalAccessIntegrations != expected {
			return fmt.Errorf("expected external access integrations: %v; got: %v", expected, *o.ExternalAccessIntegrations)
		}
		return nil
	})
	return p
}
