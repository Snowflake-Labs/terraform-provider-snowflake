// Code generated by assertions generator; DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"
	"time"

	acc "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type AccountAssert struct {
	*assert.SnowflakeObjectAssert[sdk.Account, sdk.AccountObjectIdentifier]
}

func Account(t *testing.T, id sdk.AccountObjectIdentifier) *AccountAssert {
	t.Helper()
	return &AccountAssert{
		assert.NewSnowflakeObjectAssertWithProvider(sdk.ObjectTypeAccount, id, acc.TestClient().Account.Show),
	}
}

func AccountFromObject(t *testing.T, account *sdk.Account) *AccountAssert {
	t.Helper()
	return &AccountAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeAccount, account.ID(), account),
	}
}

func (a *AccountAssert) HasOrganizationName(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.OrganizationName != expected {
			return fmt.Errorf("expected organization name: %v; got: %v", expected, o.OrganizationName)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasAccountName(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.AccountName != expected {
			return fmt.Errorf("expected account name: %v; got: %v", expected, o.AccountName)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasSnowflakeRegion(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.SnowflakeRegion != expected {
			return fmt.Errorf("expected snowflake region: %v; got: %v", expected, o.SnowflakeRegion)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasRegionGroup(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.RegionGroup == nil {
			return fmt.Errorf("expected region group to have value; got: nil")
		}
		if *o.RegionGroup != expected {
			return fmt.Errorf("expected region group: %v; got: %v", expected, *o.RegionGroup)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasEdition(expected sdk.AccountEdition) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.Edition == nil {
			return fmt.Errorf("expected edition to have value; got: nil")
		}
		if *o.Edition != expected {
			return fmt.Errorf("expected edition: %v; got: %v", expected, *o.Edition)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasAccountURL(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.AccountURL == nil {
			return fmt.Errorf("expected account url to have value; got: nil")
		}
		if *o.AccountURL != expected {
			return fmt.Errorf("expected account url: %v; got: %v", expected, *o.AccountURL)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasCreatedOn(expected time.Time) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.CreatedOn == nil {
			return fmt.Errorf("expected created on to have value; got: nil")
		}
		if *o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, *o.CreatedOn)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasComment(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.Comment == nil {
			return fmt.Errorf("expected comment to have value; got: nil")
		}
		if *o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, *o.Comment)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasAccountLocator(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.AccountLocator != expected {
			return fmt.Errorf("expected account locator: %v; got: %v", expected, o.AccountLocator)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasAccountLocatorURL(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.AccountLocatorUrl == nil {
			return fmt.Errorf("expected account locator url to have value; got: nil")
		}
		if *o.AccountLocatorUrl != expected {
			return fmt.Errorf("expected account locator url: %v; got: %v", expected, *o.AccountLocatorUrl)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasManagedAccounts(expected int) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.ManagedAccounts == nil {
			return fmt.Errorf("expected managed accounts to have value; got: nil")
		}
		if *o.ManagedAccounts != expected {
			return fmt.Errorf("expected managed accounts: %v; got: %v", expected, *o.ManagedAccounts)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasConsumptionBillingEntityName(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.ConsumptionBillingEntityName == nil {
			return fmt.Errorf("expected consumption billing entity name to have value; got: nil")
		}
		if *o.ConsumptionBillingEntityName != expected {
			return fmt.Errorf("expected consumption billing entity name: %v; got: %v", expected, *o.ConsumptionBillingEntityName)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasMarketplaceConsumerBillingEntityName(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.MarketplaceConsumerBillingEntityName == nil {
			return fmt.Errorf("expected marketplace consumer billing entity name to have value; got: nil")
		}
		if *o.MarketplaceConsumerBillingEntityName != expected {
			return fmt.Errorf("expected marketplace consumer billing entity name: %v; got: %v", expected, *o.MarketplaceConsumerBillingEntityName)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasMarketplaceProviderBillingEntityName(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.MarketplaceProviderBillingEntityName == nil {
			return fmt.Errorf("expected marketplace provider billing entity name to have value; got: nil")
		}
		if *o.MarketplaceProviderBillingEntityName != expected {
			return fmt.Errorf("expected marketplace provider billing entity name: %v; got: %v", expected, *o.MarketplaceProviderBillingEntityName)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasOldAccountURL(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.OldAccountURL == nil {
			return fmt.Errorf("expected old account url to have value; got: nil")
		}
		if *o.OldAccountURL != expected {
			return fmt.Errorf("expected old account url: %v; got: %v", expected, *o.OldAccountURL)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasIsOrgAdmin(expected bool) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.IsOrgAdmin == nil {
			return fmt.Errorf("expected is org admin to have value; got: nil")
		}
		if *o.IsOrgAdmin != expected {
			return fmt.Errorf("expected is org admin: %v; got: %v", expected, *o.IsOrgAdmin)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasAccountOldUrlSavedOn(expected time.Time) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.AccountOldUrlSavedOn == nil {
			return fmt.Errorf("expected account old url saved on to have value; got: nil")
		}
		if *o.AccountOldUrlSavedOn != expected {
			return fmt.Errorf("expected account old url saved on: %v; got: %v", expected, *o.AccountOldUrlSavedOn)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasAccountOldUrlLastUsed(expected time.Time) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.AccountOldUrlLastUsed == nil {
			return fmt.Errorf("expected account old url last used to have value; got: nil")
		}
		if *o.AccountOldUrlLastUsed != expected {
			return fmt.Errorf("expected account old url last used: %v; got: %v", expected, *o.AccountOldUrlLastUsed)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasOrganizationOldUrl(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.OrganizationOldUrl == nil {
			return fmt.Errorf("expected organization old url to have value; got: nil")
		}
		if *o.OrganizationOldUrl != expected {
			return fmt.Errorf("expected organization old url: %v; got: %v", expected, *o.OrganizationOldUrl)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasOrganizationOldUrlSavedOn(expected time.Time) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.OrganizationOldUrlSavedOn == nil {
			return fmt.Errorf("expected organization old url saved on to have value; got: nil")
		}
		if *o.OrganizationOldUrlSavedOn != expected {
			return fmt.Errorf("expected organization old url saved on: %v; got: %v", expected, *o.OrganizationOldUrlSavedOn)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasOrganizationOldUrlLastUsed(expected time.Time) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.OrganizationOldUrlLastUsed == nil {
			return fmt.Errorf("expected organization old url last used to have value; got: nil")
		}
		if *o.OrganizationOldUrlLastUsed != expected {
			return fmt.Errorf("expected organization old url last used: %v; got: %v", expected, *o.OrganizationOldUrlLastUsed)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasIsEventsAccount(expected bool) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.IsEventsAccount == nil {
			return fmt.Errorf("expected is events account to have value; got: nil")
		}
		if *o.IsEventsAccount != expected {
			return fmt.Errorf("expected is events account: %v; got: %v", expected, *o.IsEventsAccount)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasIsOrganizationAccount(expected bool) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.IsOrganizationAccount != expected {
			return fmt.Errorf("expected is organization account: %v; got: %v", expected, o.IsOrganizationAccount)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasDroppedOn(expected time.Time) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.DroppedOn == nil {
			return fmt.Errorf("expected dropped on to have value; got: nil")
		}
		if *o.DroppedOn != expected {
			return fmt.Errorf("expected dropped on: %v; got: %v", expected, *o.DroppedOn)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasScheduledDeletionTime(expected time.Time) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.ScheduledDeletionTime == nil {
			return fmt.Errorf("expected scheduled deletion time to have value; got: nil")
		}
		if *o.ScheduledDeletionTime != expected {
			return fmt.Errorf("expected scheduled deletion time: %v; got: %v", expected, *o.ScheduledDeletionTime)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasRestoredOn(expected time.Time) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.RestoredOn == nil {
			return fmt.Errorf("expected restored on to have value; got: nil")
		}
		if *o.RestoredOn != expected {
			return fmt.Errorf("expected restored on: %v; got: %v", expected, *o.RestoredOn)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasMovedToOrganization(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.MovedToOrganization == nil {
			return fmt.Errorf("expected moved to organization to have value; got: nil")
		}
		if *o.MovedToOrganization != expected {
			return fmt.Errorf("expected moved to organization: %v; got: %v", expected, *o.MovedToOrganization)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasMovedOn(expected string) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.MovedOn == nil {
			return fmt.Errorf("expected moved on to have value; got: nil")
		}
		if *o.MovedOn != expected {
			return fmt.Errorf("expected moved on: %v; got: %v", expected, *o.MovedOn)
		}
		return nil
	})
	return a
}

func (a *AccountAssert) HasOrganizationUrlExpirationOn(expected time.Time) *AccountAssert {
	a.AddAssertion(func(t *testing.T, o *sdk.Account) error {
		t.Helper()
		if o.OrganizationUrlExpirationOn == nil {
			return fmt.Errorf("expected organization url expiration on to have value; got: nil")
		}
		if *o.OrganizationUrlExpirationOn != expected {
			return fmt.Errorf("expected organization url expiration on: %v; got: %v", expected, *o.OrganizationUrlExpirationOn)
		}
		return nil
	})
	return a
}
