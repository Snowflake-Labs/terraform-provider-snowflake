{{- /*gotype: github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert/objectassert/gen.SnowflakeObjectAssertionsModel*/ -}}

{{ $assertName := .Name | printf "%sAssert" }}
{{ $sdkType := .SdkType }}
{{ $nameLowerCase := FirstLetterLowercase .Name }}
{{ $assertVar := FirstLetter $nameLowerCase }}

{{- range .Fields }}
    {{ $functionParameterType := TypeToFunctionParameter .ConcreteType }}

    func ({{ $assertVar }} *{{ $assertName }}) Has{{ .Name }}(expected {{ $functionParameterType }}) *{{ $assertName }} {
        {{ $assertVar }}.AddAssertion(func(t *testing.T, o *{{ $sdkType }}) error {
            t.Helper()
            {{ if .IsOriginalTypePointer -}}
                if o.{{ .Name }} == nil {
                    return fmt.Errorf("expected {{ CamelToWords .Name }} to have value; got: nil")
                }
                if *{{ RunMapper .Mapper "o." .Name }} != {{ RunMapper .Mapper "expected" }} {
                    return fmt.Errorf("expected {{ CamelToWords .Name }}: %v; got: %v", {{ RunMapper .Mapper "expected" }}, *{{ RunMapper .Mapper "o." .Name }})
                }
                return nil
            {{ else if .IsOriginalTypeSlice -}}
                if len(o.{{ .Name }}) != len(expected) {
                    return fmt.Errorf("expected {{ CamelToWords .Name }} length: %v; got: %v", len(expected), len(o.{{ .Name }}))
                }
                var errs []error
                for _, want := range expected {
                    if !slices.ContainsFunc(o.{{ .Name }}, func(got {{ TypeWithoutSlice .ConcreteType }}) bool {
                        return {{ RunMapper .Mapper "want" }} == {{ RunMapper .Mapper "got" }}
                    }) {
                        errs = append(errs, fmt.Errorf("expected: %v, to be in the list: %v", want, o.{{ .Name }}))
                    }
                }
                return errors.Join(errs...)
            {{ else -}}
                if {{ RunMapper .Mapper "o." .Name }} != {{ RunMapper .Mapper "expected" }} {
                    return fmt.Errorf("expected {{ CamelToWords .Name }}: %v; got: %v", {{ RunMapper .Mapper "expected" }}, {{ RunMapper .Mapper "o." .Name }})
                }
                return nil
            {{ end -}}
        })
        return {{ $assertVar }}
    }
{{ end }}
