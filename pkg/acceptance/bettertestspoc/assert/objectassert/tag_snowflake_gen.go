// Code generated by assertions generator; DO NOT EDIT.

package objectassert

import (
	"errors"
	"fmt"
	"slices"
	"testing"
	"time"

	acc "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type TagAssert struct {
	*assert.SnowflakeObjectAssert[sdk.Tag, sdk.SchemaObjectIdentifier]
}

func Tag(t *testing.T, id sdk.SchemaObjectIdentifier) *TagAssert {
	t.Helper()
	return &TagAssert{
		assert.NewSnowflakeObjectAssertWithProvider(sdk.ObjectTypeTag, id, acc.TestClient().Tag.Show),
	}
}

func TagFromObject(t *testing.T, tag *sdk.Tag) *TagAssert {
	t.Helper()
	return &TagAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeTag, tag.ID(), tag),
	}
}

func (t *TagAssert) HasCreatedOn(expected time.Time) *TagAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Tag) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return t
}

func (t *TagAssert) HasName(expected string) *TagAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Tag) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return t
}

func (t *TagAssert) HasDatabaseName(expected string) *TagAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Tag) error {
		t.Helper()
		if o.DatabaseName != expected {
			return fmt.Errorf("expected database name: %v; got: %v", expected, o.DatabaseName)
		}
		return nil
	})
	return t
}

func (t *TagAssert) HasSchemaName(expected string) *TagAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Tag) error {
		t.Helper()
		if o.SchemaName != expected {
			return fmt.Errorf("expected schema name: %v; got: %v", expected, o.SchemaName)
		}
		return nil
	})
	return t
}

func (t *TagAssert) HasOwner(expected string) *TagAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Tag) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return t
}

func (t *TagAssert) HasComment(expected string) *TagAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Tag) error {
		t.Helper()
		if o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, o.Comment)
		}
		return nil
	})
	return t
}

func (t *TagAssert) HasAllowedValues(expected ...string) *TagAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Tag) error {
		t.Helper()
		if len(o.AllowedValues) != len(expected) {
			return fmt.Errorf("expected allowed values length: %v; got: %v", len(expected), len(o.AllowedValues))
		}
		var errs []error
		for _, want := range expected {
			if !slices.ContainsFunc(o.AllowedValues, func(got string) bool {
				return want == got
			}) {
				errs = append(errs, fmt.Errorf("expected: %v, to be in the list: %v", want, o.AllowedValues))
			}
		}
		return errors.Join(errs...)
	})
	return t
}

func (t *TagAssert) HasOwnerRoleType(expected string) *TagAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Tag) error {
		t.Helper()
		if o.OwnerRoleType != expected {
			return fmt.Errorf("expected owner role type: %v; got: %v", expected, o.OwnerRoleType)
		}
		return nil
	})
	return t
}
