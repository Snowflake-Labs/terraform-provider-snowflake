// Code generated by assertions generator; DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"

	acc "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type ExternalVolumeAssert struct {
	*assert.SnowflakeObjectAssert[sdk.ExternalVolume, sdk.AccountObjectIdentifier]
}

func ExternalVolume(t *testing.T, id sdk.AccountObjectIdentifier) *ExternalVolumeAssert {
	t.Helper()
	return &ExternalVolumeAssert{
		assert.NewSnowflakeObjectAssertWithProvider(sdk.ObjectTypeExternalVolume, id, acc.TestClient().ExternalVolume.Show),
	}
}

func ExternalVolumeFromObject(t *testing.T, externalVolume *sdk.ExternalVolume) *ExternalVolumeAssert {
	t.Helper()
	return &ExternalVolumeAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeExternalVolume, externalVolume.ID(), externalVolume),
	}
}

func (e *ExternalVolumeAssert) HasName(expected string) *ExternalVolumeAssert {
	e.AddAssertion(func(t *testing.T, o *sdk.ExternalVolume) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return e
}

func (e *ExternalVolumeAssert) HasAllowWrites(expected bool) *ExternalVolumeAssert {
	e.AddAssertion(func(t *testing.T, o *sdk.ExternalVolume) error {
		t.Helper()
		if o.AllowWrites != expected {
			return fmt.Errorf("expected allow writes: %v; got: %v", expected, o.AllowWrites)
		}
		return nil
	})
	return e
}

func (e *ExternalVolumeAssert) HasComment(expected string) *ExternalVolumeAssert {
	e.AddAssertion(func(t *testing.T, o *sdk.ExternalVolume) error {
		t.Helper()
		if o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, o.Comment)
		}
		return nil
	})
	return e
}
