// Code generated by assertions generator; DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"

	acc "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type TaskAssert struct {
	*assert.SnowflakeObjectAssert[sdk.Task, sdk.SchemaObjectIdentifier]
}

func Task(t *testing.T, id sdk.SchemaObjectIdentifier) *TaskAssert {
	t.Helper()
	return &TaskAssert{
		assert.NewSnowflakeObjectAssertWithProvider(sdk.ObjectTypeTask, id, acc.TestClient().Task.Show),
	}
}

func TaskFromObject(t *testing.T, task *sdk.Task) *TaskAssert {
	t.Helper()
	return &TaskAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeTask, task.ID(), task),
	}
}

func (t *TaskAssert) HasCreatedOn(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasName(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasId(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.Id != expected {
			return fmt.Errorf("expected id: %v; got: %v", expected, o.Id)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasDatabaseName(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.DatabaseName != expected {
			return fmt.Errorf("expected database name: %v; got: %v", expected, o.DatabaseName)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasSchemaName(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.SchemaName != expected {
			return fmt.Errorf("expected schema name: %v; got: %v", expected, o.SchemaName)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasOwner(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasComment(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, o.Comment)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasWarehouse(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.Warehouse != expected {
			return fmt.Errorf("expected warehouse: %v; got: %v", expected, o.Warehouse)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasSchedule(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.Schedule != expected {
			return fmt.Errorf("expected schedule: %v; got: %v", expected, o.Schedule)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasState(expected sdk.TaskState) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.State != expected {
			return fmt.Errorf("expected state: %v; got: %v", expected, o.State)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasDefinition(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.Definition != expected {
			return fmt.Errorf("expected definition: %v; got: %v", expected, o.Definition)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasCondition(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.Condition != expected {
			return fmt.Errorf("expected condition: %v; got: %v", expected, o.Condition)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasAllowOverlappingExecution(expected bool) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.AllowOverlappingExecution != expected {
			return fmt.Errorf("expected allow overlapping execution: %v; got: %v", expected, o.AllowOverlappingExecution)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasErrorIntegration(expected *sdk.AccountObjectIdentifier) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.ErrorIntegration != expected {
			return fmt.Errorf("expected error integration: %v; got: %v", expected, o.ErrorIntegration)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasLastCommittedOn(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.LastCommittedOn != expected {
			return fmt.Errorf("expected last committed on: %v; got: %v", expected, o.LastCommittedOn)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasLastSuspendedOn(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.LastSuspendedOn != expected {
			return fmt.Errorf("expected last suspended on: %v; got: %v", expected, o.LastSuspendedOn)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasOwnerRoleType(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.OwnerRoleType != expected {
			return fmt.Errorf("expected owner role type: %v; got: %v", expected, o.OwnerRoleType)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasConfig(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.Config != expected {
			return fmt.Errorf("expected config: %v; got: %v", expected, o.Config)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasBudget(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.Budget != expected {
			return fmt.Errorf("expected budget: %v; got: %v", expected, o.Budget)
		}
		return nil
	})
	return t
}

func (t *TaskAssert) HasLastSuspendedReason(expected string) *TaskAssert {
	t.AddAssertion(func(t *testing.T, o *sdk.Task) error {
		t.Helper()
		if o.LastSuspendedReason != expected {
			return fmt.Errorf("expected last suspended reason: %v; got: %v", expected, o.LastSuspendedReason)
		}
		return nil
	})
	return t
}
