// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type DatabaseShowOutputAssert struct {
	*assert.ResourceAssert
}

func DatabaseShowOutput(t *testing.T, name string) *DatabaseShowOutputAssert {
	t.Helper()

	d := DatabaseShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	d.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &d
}

func ImportedDatabaseShowOutput(t *testing.T, id string) *DatabaseShowOutputAssert {
	t.Helper()

	d := DatabaseShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	d.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &d
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (d *DatabaseShowOutputAssert) HasCreatedOn(expected time.Time) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return d
}

func (d *DatabaseShowOutputAssert) HasName(expected string) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasIsDefault(expected bool) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_default", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasIsCurrent(expected bool) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_current", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasOrigin(expected sdk.ExternalObjectIdentifier) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("origin", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasOwner(expected string) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasComment(expected string) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasOptions(expected string) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputValueSet("options", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasRetentionTime(expected int) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputIntValueSet("retention_time", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasResourceGroup(expected string) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputValueSet("resource_group", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasDroppedOn(expected time.Time) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputValueSet("dropped_on", expected.String()))
	return d
}

func (d *DatabaseShowOutputAssert) HasTransient(expected bool) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputBoolValueSet("transient", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasKind(expected string) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputValueSet("kind", expected))
	return d
}

func (d *DatabaseShowOutputAssert) HasOwnerRoleType(expected string) *DatabaseShowOutputAssert {
	d.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return d
}
