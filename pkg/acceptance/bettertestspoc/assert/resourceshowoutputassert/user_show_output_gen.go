// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type UserShowOutputAssert struct {
	*assert.ResourceAssert
}

func UserShowOutput(t *testing.T, name string) *UserShowOutputAssert {
	t.Helper()

	u := UserShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	u.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &u
}

func ImportedUserShowOutput(t *testing.T, id string) *UserShowOutputAssert {
	t.Helper()

	u := UserShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	u.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &u
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (u *UserShowOutputAssert) HasName(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return u
}

func (u *UserShowOutputAssert) HasCreatedOn(expected time.Time) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return u
}

func (u *UserShowOutputAssert) HasLoginName(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("login_name", expected))
	return u
}

func (u *UserShowOutputAssert) HasDisplayName(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("display_name", expected))
	return u
}

func (u *UserShowOutputAssert) HasFirstName(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("first_name", expected))
	return u
}

func (u *UserShowOutputAssert) HasLastName(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("last_name", expected))
	return u
}

func (u *UserShowOutputAssert) HasEmail(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("email", expected))
	return u
}

func (u *UserShowOutputAssert) HasMinsToUnlock(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("mins_to_unlock", expected))
	return u
}

func (u *UserShowOutputAssert) HasDaysToExpiry(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("days_to_expiry", expected))
	return u
}

func (u *UserShowOutputAssert) HasComment(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return u
}

func (u *UserShowOutputAssert) HasDisabled(expected bool) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputBoolValueSet("disabled", expected))
	return u
}

func (u *UserShowOutputAssert) HasMustChangePassword(expected bool) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputBoolValueSet("must_change_password", expected))
	return u
}

func (u *UserShowOutputAssert) HasSnowflakeLock(expected bool) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputBoolValueSet("snowflake_lock", expected))
	return u
}

func (u *UserShowOutputAssert) HasDefaultWarehouse(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("default_warehouse", expected))
	return u
}

func (u *UserShowOutputAssert) HasDefaultNamespace(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("default_namespace", expected))
	return u
}

func (u *UserShowOutputAssert) HasDefaultRole(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("default_role", expected))
	return u
}

func (u *UserShowOutputAssert) HasDefaultSecondaryRoles(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("default_secondary_roles", expected))
	return u
}

func (u *UserShowOutputAssert) HasExtAuthnDuo(expected bool) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputBoolValueSet("ext_authn_duo", expected))
	return u
}

func (u *UserShowOutputAssert) HasExtAuthnUid(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("ext_authn_uid", expected))
	return u
}

func (u *UserShowOutputAssert) HasMinsToBypassMfa(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("mins_to_bypass_mfa", expected))
	return u
}

func (u *UserShowOutputAssert) HasOwner(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return u
}

func (u *UserShowOutputAssert) HasLastSuccessLogin(expected time.Time) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("last_success_login", expected.String()))
	return u
}

func (u *UserShowOutputAssert) HasExpiresAtTime(expected time.Time) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("expires_at_time", expected.String()))
	return u
}

func (u *UserShowOutputAssert) HasLockedUntilTime(expected time.Time) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("locked_until_time", expected.String()))
	return u
}

func (u *UserShowOutputAssert) HasHasPassword(expected bool) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputBoolValueSet("has_password", expected))
	return u
}

func (u *UserShowOutputAssert) HasHasRsaPublicKey(expected bool) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputBoolValueSet("has_rsa_public_key", expected))
	return u
}

func (u *UserShowOutputAssert) HasType(expected string) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputValueSet("type", expected))
	return u
}

func (u *UserShowOutputAssert) HasHasMfa(expected bool) *UserShowOutputAssert {
	u.AddAssertion(assert.ResourceShowOutputBoolValueSet("has_mfa", expected))
	return u
}
