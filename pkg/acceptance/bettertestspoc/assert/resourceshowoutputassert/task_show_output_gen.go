// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"fmt"
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type TaskShowOutputAssert struct {
	*assert.ResourceAssert
}

func TaskShowOutput(t *testing.T, name string) *TaskShowOutputAssert {
	t.Helper()

	taskAssert := TaskShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	taskAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &taskAssert
}

func ImportedTaskShowOutput(t *testing.T, id string) *TaskShowOutputAssert {
	t.Helper()

	taskAssert := TaskShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	taskAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &taskAssert
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (t *TaskShowOutputAssert) HasCreatedOn(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected))
	return t
}

func (t *TaskShowOutputAssert) HasName(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return t
}

func (t *TaskShowOutputAssert) HasId(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("id", expected))
	return t
}

func (t *TaskShowOutputAssert) HasDatabaseName(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("database_name", expected))
	return t
}

func (t *TaskShowOutputAssert) HasSchemaName(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("schema_name", expected))
	return t
}

func (t *TaskShowOutputAssert) HasOwner(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return t
}

func (t *TaskShowOutputAssert) HasComment(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return t
}

func (t *TaskShowOutputAssert) HasWarehouse(expected sdk.AccountObjectIdentifier) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("warehouse", expected.Name()))
	return t
}

func (t *TaskShowOutputAssert) HasSchedule(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("schedule", expected))
	return t
}

func (t *TaskShowOutputAssert) HasPredecessors(expected ...sdk.SchemaObjectIdentifier) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("predecessors", fmt.Sprintf("%v", expected)))
	return t
}

func (t *TaskShowOutputAssert) HasState(expected sdk.TaskState) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("state", expected))
	return t
}

func (t *TaskShowOutputAssert) HasDefinition(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("definition", expected))
	return t
}

func (t *TaskShowOutputAssert) HasCondition(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("condition", expected))
	return t
}

func (t *TaskShowOutputAssert) HasAllowOverlappingExecution(expected bool) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputBoolValueSet("allow_overlapping_execution", expected))
	return t
}

func (t *TaskShowOutputAssert) HasErrorIntegration(expected sdk.AccountObjectIdentifier) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("error_integration", expected.Name()))
	return t
}

func (t *TaskShowOutputAssert) HasLastCommittedOn(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("last_committed_on", expected))
	return t
}

func (t *TaskShowOutputAssert) HasLastSuspendedOn(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("last_suspended_on", expected))
	return t
}

func (t *TaskShowOutputAssert) HasOwnerRoleType(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return t
}

func (t *TaskShowOutputAssert) HasConfig(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("config", expected))
	return t
}

func (t *TaskShowOutputAssert) HasBudget(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("budget", expected))
	return t
}

func (t *TaskShowOutputAssert) HasLastSuspendedReason(expected string) *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("last_suspended_reason", expected))
	return t
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (t *TaskShowOutputAssert) HasNoCreatedOn() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("created_on"))
	return t
}

func (t *TaskShowOutputAssert) HasNoName() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("name"))
	return t
}

func (t *TaskShowOutputAssert) HasNoId() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("id"))
	return t
}

func (t *TaskShowOutputAssert) HasNoDatabaseName() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("database_name"))
	return t
}

func (t *TaskShowOutputAssert) HasNoSchemaName() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("schema_name"))
	return t
}

func (t *TaskShowOutputAssert) HasNoOwner() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("owner"))
	return t
}

func (t *TaskShowOutputAssert) HasNoComment() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("comment"))
	return t
}

func (t *TaskShowOutputAssert) HasNoWarehouse() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("warehouse"))
	return t
}

func (t *TaskShowOutputAssert) HasNoSchedule() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("schedule"))
	return t
}

func (t *TaskShowOutputAssert) HasNoPredecessors() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("predecessors"))
	return t
}

func (t *TaskShowOutputAssert) HasNoState() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("state"))
	return t
}

func (t *TaskShowOutputAssert) HasNoDefinition() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("definition"))
	return t
}

func (t *TaskShowOutputAssert) HasNoCondition() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("condition"))
	return t
}

func (t *TaskShowOutputAssert) HasNoAllowOverlappingExecution() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputBoolValueNotSet("allow_overlapping_execution"))
	return t
}

func (t *TaskShowOutputAssert) HasNoErrorIntegration() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("error_integration"))
	return t
}

func (t *TaskShowOutputAssert) HasNoLastCommittedOn() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("last_committed_on"))
	return t
}

func (t *TaskShowOutputAssert) HasNoLastSuspendedOn() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("last_suspended_on"))
	return t
}

func (t *TaskShowOutputAssert) HasNoOwnerRoleType() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("owner_role_type"))
	return t
}

func (t *TaskShowOutputAssert) HasNoConfig() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("config"))
	return t
}

func (t *TaskShowOutputAssert) HasNoBudget() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("budget"))
	return t
}

func (t *TaskShowOutputAssert) HasNoTaskRelations() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("task_relations"))
	return t
}

func (t *TaskShowOutputAssert) HasNoLastSuspendedReason() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueNotSet("last_suspended_reason"))
	return t
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (t *TaskShowOutputAssert) HasCreatedOnEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("created_on", ""))
	return t
}

func (t *TaskShowOutputAssert) HasNameEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("name", ""))
	return t
}

func (t *TaskShowOutputAssert) HasIdEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("id", ""))
	return t
}

func (t *TaskShowOutputAssert) HasDatabaseNameEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("database_name", ""))
	return t
}

func (t *TaskShowOutputAssert) HasSchemaNameEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("schema_name", ""))
	return t
}

func (t *TaskShowOutputAssert) HasOwnerEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("owner", ""))
	return t
}

func (t *TaskShowOutputAssert) HasCommentEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("comment", ""))
	return t
}

func (t *TaskShowOutputAssert) HasScheduleEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("schedule", ""))
	return t
}

func (t *TaskShowOutputAssert) HasDefinitionEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("definition", ""))
	return t
}

func (t *TaskShowOutputAssert) HasConditionEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("condition", ""))
	return t
}

func (t *TaskShowOutputAssert) HasLastCommittedOnEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("last_committed_on", ""))
	return t
}

func (t *TaskShowOutputAssert) HasLastSuspendedOnEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("last_suspended_on", ""))
	return t
}

func (t *TaskShowOutputAssert) HasOwnerRoleTypeEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", ""))
	return t
}

func (t *TaskShowOutputAssert) HasConfigEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("config", ""))
	return t
}

func (t *TaskShowOutputAssert) HasBudgetEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("budget", ""))
	return t
}

func (t *TaskShowOutputAssert) HasLastSuspendedReasonEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValueSet("last_suspended_reason", ""))
	return t
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (t *TaskShowOutputAssert) HasCreatedOnNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("created_on"))
	return t
}

func (t *TaskShowOutputAssert) HasNameNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("name"))
	return t
}

func (t *TaskShowOutputAssert) HasIdNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("id"))
	return t
}

func (t *TaskShowOutputAssert) HasDatabaseNameNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("database_name"))
	return t
}

func (t *TaskShowOutputAssert) HasSchemaNameNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("schema_name"))
	return t
}

func (t *TaskShowOutputAssert) HasOwnerNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("owner"))
	return t
}

func (t *TaskShowOutputAssert) HasCommentNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("comment"))
	return t
}

func (t *TaskShowOutputAssert) HasWarehouseNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValuePresent("warehouse"))
	return t
}

func (t *TaskShowOutputAssert) HasScheduleNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("schedule"))
	return t
}

func (t *TaskShowOutputAssert) HasPredecessorsNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("predecessors"))
	return t
}

func (t *TaskShowOutputAssert) HasStateNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValuePresent("state"))
	return t
}

func (t *TaskShowOutputAssert) HasDefinitionNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("definition"))
	return t
}

func (t *TaskShowOutputAssert) HasConditionNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("condition"))
	return t
}

func (t *TaskShowOutputAssert) HasAllowOverlappingExecutionNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputBoolValuePresent("allow_overlapping_execution"))
	return t
}

func (t *TaskShowOutputAssert) HasErrorIntegrationNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValuePresent("error_integration"))
	return t
}

func (t *TaskShowOutputAssert) HasLastCommittedOnNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("last_committed_on"))
	return t
}

func (t *TaskShowOutputAssert) HasLastSuspendedOnNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("last_suspended_on"))
	return t
}

func (t *TaskShowOutputAssert) HasOwnerRoleTypeNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("owner_role_type"))
	return t
}

func (t *TaskShowOutputAssert) HasConfigNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("config"))
	return t
}

func (t *TaskShowOutputAssert) HasBudgetNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("budget"))
	return t
}

func (t *TaskShowOutputAssert) HasTaskRelationsNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputStringUnderlyingValuePresent("task_relations"))
	return t
}

func (t *TaskShowOutputAssert) HasLastSuspendedReasonNotEmpty() *TaskShowOutputAssert {
	t.AddAssertion(assert.ResourceShowOutputValuePresent("last_suspended_reason"))
	return t
}
