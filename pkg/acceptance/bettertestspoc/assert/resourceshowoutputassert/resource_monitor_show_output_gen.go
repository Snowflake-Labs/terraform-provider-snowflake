// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"fmt"
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type ResourceMonitorShowOutputAssert struct {
	*assert.ResourceAssert
}

func ResourceMonitorShowOutput(t *testing.T, name string) *ResourceMonitorShowOutputAssert {
	t.Helper()

	resourceMonitorAssert := ResourceMonitorShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	resourceMonitorAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &resourceMonitorAssert
}

func ImportedResourceMonitorShowOutput(t *testing.T, id string) *ResourceMonitorShowOutputAssert {
	t.Helper()

	resourceMonitorAssert := ResourceMonitorShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	resourceMonitorAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &resourceMonitorAssert
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (r *ResourceMonitorShowOutputAssert) HasName(expected string) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasCreditQuota(expected float64) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputFloatValueSet("credit_quota", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasUsedCredits(expected float64) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputFloatValueSet("used_credits", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasRemainingCredits(expected float64) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputFloatValueSet("remaining_credits", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasLevel(expected sdk.ResourceMonitorLevel) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("level", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasFrequency(expected sdk.Frequency) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("frequency", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasStartTime(expected string) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("start_time", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasEndTime(expected string) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("end_time", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNotifyAt(expected []int) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("notify_at", fmt.Sprintf("%v", expected)))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasSuspendAt(expected int) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputIntValueSet("suspend_at", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasSuspendImmediateAt(expected int) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputIntValueSet("suspend_immediate_at", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasCreatedOn(expected time.Time) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasOwner(expected string) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasComment(expected string) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNotifyUsers(expected []string) *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("notify_users", fmt.Sprintf("%v", expected)))
	return r
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (r *ResourceMonitorShowOutputAssert) HasNoName() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueNotSet("name"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoCreditQuota() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputFloatValueNotSet("credit_quota"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoUsedCredits() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputFloatValueNotSet("used_credits"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoRemainingCredits() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputFloatValueNotSet("remaining_credits"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoLevel() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("level"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoFrequency() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("frequency"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoStartTime() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueNotSet("start_time"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoEndTime() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueNotSet("end_time"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoNotifyAt() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueNotSet("notify_at"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoSuspendAt() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputIntValueNotSet("suspend_at"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoSuspendImmediateAt() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputIntValueNotSet("suspend_immediate_at"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoCreatedOn() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueNotSet("created_on"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoOwner() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueNotSet("owner"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoComment() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueNotSet("comment"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNoNotifyUsers() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueNotSet("notify_users"))
	return r
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (r *ResourceMonitorShowOutputAssert) HasNameEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("name", ""))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasStartTimeEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("start_time", ""))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasEndTimeEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("end_time", ""))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasOwnerEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("owner", ""))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasCommentEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValueSet("comment", ""))
	return r
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (r *ResourceMonitorShowOutputAssert) HasNameNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValuePresent("name"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasCreditQuotaNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputFloatValuePresent("credit_quota"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasUsedCreditsNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputFloatValuePresent("used_credits"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasRemainingCreditsNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputFloatValuePresent("remaining_credits"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasLevelNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputStringUnderlyingValuePresent("level"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasFrequencyNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputStringUnderlyingValuePresent("frequency"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasStartTimeNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValuePresent("start_time"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasEndTimeNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValuePresent("end_time"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNotifyAtNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValuePresent("notify_at"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasSuspendAtNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputIntValuePresent("suspend_at"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasSuspendImmediateAtNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputIntValuePresent("suspend_immediate_at"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasCreatedOnNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValuePresent("created_on"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasOwnerNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValuePresent("owner"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasCommentNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValuePresent("comment"))
	return r
}

func (r *ResourceMonitorShowOutputAssert) HasNotifyUsersNotEmpty() *ResourceMonitorShowOutputAssert {
	r.AddAssertion(assert.ResourceShowOutputValuePresent("notify_users"))
	return r
}
