// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type AccountResourceAssert struct {
	*assert.ResourceAssert
}

func AccountResource(t *testing.T, name string) *AccountResourceAssert {
	t.Helper()

	return &AccountResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedAccountResource(t *testing.T, id string) *AccountResourceAssert {
	t.Helper()

	return &AccountResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (a *AccountResourceAssert) HasAdminNameString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("admin_name", expected))
	return a
}

func (a *AccountResourceAssert) HasAdminPasswordString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("admin_password", expected))
	return a
}

func (a *AccountResourceAssert) HasAdminRsaPublicKeyString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("admin_rsa_public_key", expected))
	return a
}

func (a *AccountResourceAssert) HasAdminUserTypeString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("admin_user_type", expected))
	return a
}

func (a *AccountResourceAssert) HasCommentString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("comment", expected))
	return a
}

func (a *AccountResourceAssert) HasEditionString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("edition", expected))
	return a
}

func (a *AccountResourceAssert) HasEmailString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("email", expected))
	return a
}

func (a *AccountResourceAssert) HasFirstNameString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("first_name", expected))
	return a
}

func (a *AccountResourceAssert) HasFullyQualifiedNameString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return a
}

func (a *AccountResourceAssert) HasGracePeriodInDaysString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("grace_period_in_days", expected))
	return a
}

func (a *AccountResourceAssert) HasIsOrgAdminString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("is_org_admin", expected))
	return a
}

func (a *AccountResourceAssert) HasLastNameString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("last_name", expected))
	return a
}

func (a *AccountResourceAssert) HasMustChangePasswordString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("must_change_password", expected))
	return a
}

func (a *AccountResourceAssert) HasNameString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("name", expected))
	return a
}

func (a *AccountResourceAssert) HasRegionString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("region", expected))
	return a
}

func (a *AccountResourceAssert) HasRegionGroupString(expected string) *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("region_group", expected))
	return a
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (a *AccountResourceAssert) HasNoAdminName() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("admin_name"))
	return a
}

func (a *AccountResourceAssert) HasNoAdminPassword() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("admin_password"))
	return a
}

func (a *AccountResourceAssert) HasNoAdminRsaPublicKey() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("admin_rsa_public_key"))
	return a
}

func (a *AccountResourceAssert) HasNoAdminUserType() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("admin_user_type"))
	return a
}

func (a *AccountResourceAssert) HasNoComment() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("comment"))
	return a
}

func (a *AccountResourceAssert) HasNoEdition() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("edition"))
	return a
}

func (a *AccountResourceAssert) HasNoEmail() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("email"))
	return a
}

func (a *AccountResourceAssert) HasNoFirstName() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("first_name"))
	return a
}

func (a *AccountResourceAssert) HasNoFullyQualifiedName() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return a
}

func (a *AccountResourceAssert) HasNoGracePeriodInDays() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("grace_period_in_days"))
	return a
}

func (a *AccountResourceAssert) HasNoIsOrgAdmin() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("is_org_admin"))
	return a
}

func (a *AccountResourceAssert) HasNoLastName() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("last_name"))
	return a
}

func (a *AccountResourceAssert) HasNoMustChangePassword() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("must_change_password"))
	return a
}

func (a *AccountResourceAssert) HasNoName() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("name"))
	return a
}

func (a *AccountResourceAssert) HasNoRegion() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("region"))
	return a
}

func (a *AccountResourceAssert) HasNoRegionGroup() *AccountResourceAssert {
	a.AddAssertion(assert.ValueNotSet("region_group"))
	return a
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (a *AccountResourceAssert) HasAdminPasswordEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("admin_password", ""))
	return a
}

func (a *AccountResourceAssert) HasAdminRsaPublicKeyEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("admin_rsa_public_key", ""))
	return a
}

func (a *AccountResourceAssert) HasAdminUserTypeEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("admin_user_type", ""))
	return a
}

func (a *AccountResourceAssert) HasCommentEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("comment", ""))
	return a
}

func (a *AccountResourceAssert) HasFirstNameEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("first_name", ""))
	return a
}

func (a *AccountResourceAssert) HasFullyQualifiedNameEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return a
}

func (a *AccountResourceAssert) HasIsOrgAdminEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("is_org_admin", ""))
	return a
}

func (a *AccountResourceAssert) HasLastNameEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("last_name", ""))
	return a
}

func (a *AccountResourceAssert) HasMustChangePasswordEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("must_change_password", ""))
	return a
}

func (a *AccountResourceAssert) HasRegionEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("region", ""))
	return a
}

func (a *AccountResourceAssert) HasRegionGroupEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValueSet("region_group", ""))
	return a
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (a *AccountResourceAssert) HasAdminNameNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("admin_name"))
	return a
}

func (a *AccountResourceAssert) HasAdminPasswordNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("admin_password"))
	return a
}

func (a *AccountResourceAssert) HasAdminRsaPublicKeyNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("admin_rsa_public_key"))
	return a
}

func (a *AccountResourceAssert) HasAdminUserTypeNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("admin_user_type"))
	return a
}

func (a *AccountResourceAssert) HasCommentNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("comment"))
	return a
}

func (a *AccountResourceAssert) HasEditionNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("edition"))
	return a
}

func (a *AccountResourceAssert) HasEmailNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("email"))
	return a
}

func (a *AccountResourceAssert) HasFirstNameNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("first_name"))
	return a
}

func (a *AccountResourceAssert) HasFullyQualifiedNameNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return a
}

func (a *AccountResourceAssert) HasGracePeriodInDaysNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("grace_period_in_days"))
	return a
}

func (a *AccountResourceAssert) HasIsOrgAdminNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("is_org_admin"))
	return a
}

func (a *AccountResourceAssert) HasLastNameNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("last_name"))
	return a
}

func (a *AccountResourceAssert) HasMustChangePasswordNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("must_change_password"))
	return a
}

func (a *AccountResourceAssert) HasNameNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("name"))
	return a
}

func (a *AccountResourceAssert) HasRegionNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("region"))
	return a
}

func (a *AccountResourceAssert) HasRegionGroupNotEmpty() *AccountResourceAssert {
	a.AddAssertion(assert.ValuePresent("region_group"))
	return a
}
