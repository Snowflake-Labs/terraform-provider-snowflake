// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type TaskResourceAssert struct {
	*assert.ResourceAssert
}

func TaskResource(t *testing.T, name string) *TaskResourceAssert {
	t.Helper()

	return &TaskResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedTaskResource(t *testing.T, id string) *TaskResourceAssert {
	t.Helper()

	return &TaskResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (t *TaskResourceAssert) HasAfterString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("after", expected))
	return t
}

func (t *TaskResourceAssert) HasAllowOverlappingExecutionString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("allow_overlapping_execution", expected))
	return t
}

func (t *TaskResourceAssert) HasCommentString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("comment", expected))
	return t
}

func (t *TaskResourceAssert) HasConfigString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("config", expected))
	return t
}

func (t *TaskResourceAssert) HasDatabaseString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("database", expected))
	return t
}

func (t *TaskResourceAssert) HasEnabledString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("enabled", expected))
	return t
}

func (t *TaskResourceAssert) HasErrorIntegrationString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("error_integration", expected))
	return t
}

func (t *TaskResourceAssert) HasFinalizeString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("finalize", expected))
	return t
}

func (t *TaskResourceAssert) HasFullyQualifiedNameString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return t
}

func (t *TaskResourceAssert) HasNameString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("name", expected))
	return t
}

func (t *TaskResourceAssert) HasScheduleString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("schedule", expected))
	return t
}

func (t *TaskResourceAssert) HasSchemaString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("schema", expected))
	return t
}

func (t *TaskResourceAssert) HasSessionParametersString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("session_parameters", expected))
	return t
}

func (t *TaskResourceAssert) HasSqlStatementString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("sql_statement", expected))
	return t
}

func (t *TaskResourceAssert) HasSuspendTaskAfterNumFailuresString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("suspend_task_after_num_failures", expected))
	return t
}

func (t *TaskResourceAssert) HasTaskAutoRetryAttemptsString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("task_auto_retry_attempts", expected))
	return t
}

func (t *TaskResourceAssert) HasUserTaskManagedInitialWarehouseSizeString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("user_task_managed_initial_warehouse_size", expected))
	return t
}

func (t *TaskResourceAssert) HasUserTaskMinimumTriggerIntervalInSecondsString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("user_task_minimum_trigger_interval_in_seconds", expected))
	return t
}

func (t *TaskResourceAssert) HasUserTaskTimeoutMsString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("user_task_timeout_ms", expected))
	return t
}

func (t *TaskResourceAssert) HasWarehouseString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("warehouse", expected))
	return t
}

func (t *TaskResourceAssert) HasWhenString(expected string) *TaskResourceAssert {
	t.AddAssertion(assert.ValueSet("when", expected))
	return t
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (t *TaskResourceAssert) HasNoAfter() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("after"))
	return t
}

func (t *TaskResourceAssert) HasNoAllowOverlappingExecution() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("allow_overlapping_execution"))
	return t
}

func (t *TaskResourceAssert) HasNoComment() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("comment"))
	return t
}

func (t *TaskResourceAssert) HasNoConfig() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("config"))
	return t
}

func (t *TaskResourceAssert) HasNoDatabase() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("database"))
	return t
}

func (t *TaskResourceAssert) HasNoEnabled() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("enabled"))
	return t
}

func (t *TaskResourceAssert) HasNoErrorIntegration() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("error_integration"))
	return t
}

func (t *TaskResourceAssert) HasNoFinalize() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("finalize"))
	return t
}

func (t *TaskResourceAssert) HasNoFullyQualifiedName() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return t
}

func (t *TaskResourceAssert) HasNoName() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("name"))
	return t
}

func (t *TaskResourceAssert) HasNoSchedule() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("schedule"))
	return t
}

func (t *TaskResourceAssert) HasNoSchema() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("schema"))
	return t
}

func (t *TaskResourceAssert) HasNoSessionParameters() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("session_parameters"))
	return t
}

func (t *TaskResourceAssert) HasNoSqlStatement() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("sql_statement"))
	return t
}

func (t *TaskResourceAssert) HasNoSuspendTaskAfterNumFailures() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("suspend_task_after_num_failures"))
	return t
}

func (t *TaskResourceAssert) HasNoTaskAutoRetryAttempts() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("task_auto_retry_attempts"))
	return t
}

func (t *TaskResourceAssert) HasNoUserTaskManagedInitialWarehouseSize() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("user_task_managed_initial_warehouse_size"))
	return t
}

func (t *TaskResourceAssert) HasNoUserTaskMinimumTriggerIntervalInSeconds() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("user_task_minimum_trigger_interval_in_seconds"))
	return t
}

func (t *TaskResourceAssert) HasNoUserTaskTimeoutMs() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("user_task_timeout_ms"))
	return t
}

func (t *TaskResourceAssert) HasNoWarehouse() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("warehouse"))
	return t
}

func (t *TaskResourceAssert) HasNoWhen() *TaskResourceAssert {
	t.AddAssertion(assert.ValueNotSet("when"))
	return t
}
