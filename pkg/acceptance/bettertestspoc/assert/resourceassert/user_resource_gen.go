// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type UserResourceAssert struct {
	*assert.ResourceAssert
}

func UserResource(t *testing.T, name string) *UserResourceAssert {
	t.Helper()

	return &UserResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedUserResource(t *testing.T, id string) *UserResourceAssert {
	t.Helper()

	return &UserResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (u *UserResourceAssert) HasCommentString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("comment", expected))
	return u
}

func (u *UserResourceAssert) HasDefaultNamespaceString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("default_namespace", expected))
	return u
}

func (u *UserResourceAssert) HasDefaultRoleString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("default_role", expected))
	return u
}

func (u *UserResourceAssert) HasDefaultSecondaryRolesString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("default_secondary_roles", expected))
	return u
}

func (u *UserResourceAssert) HasDefaultWarehouseString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("default_warehouse", expected))
	return u
}

func (u *UserResourceAssert) HasDisabledString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("disabled", expected))
	return u
}

func (u *UserResourceAssert) HasDisplayNameString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("display_name", expected))
	return u
}

func (u *UserResourceAssert) HasEmailString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("email", expected))
	return u
}

func (u *UserResourceAssert) HasFirstNameString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("first_name", expected))
	return u
}

func (u *UserResourceAssert) HasHasRsaPublicKeyString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("has_rsa_public_key", expected))
	return u
}

func (u *UserResourceAssert) HasLastNameString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("last_name", expected))
	return u
}

func (u *UserResourceAssert) HasLoginNameString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("login_name", expected))
	return u
}

func (u *UserResourceAssert) HasMustChangePasswordString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("must_change_password", expected))
	return u
}

func (u *UserResourceAssert) HasNameString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("name", expected))
	return u
}

func (u *UserResourceAssert) HasPasswordString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("password", expected))
	return u
}

func (u *UserResourceAssert) HasRsaPublicKeyString(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("rsa_public_key", expected))
	return u
}

func (u *UserResourceAssert) HasRsaPublicKey2String(expected string) *UserResourceAssert {
	u.AddAssertion(assert.ValueSet("rsa_public_key_2", expected))
	return u
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (u *UserResourceAssert) HasNoComment() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("comment"))
	return u
}

func (u *UserResourceAssert) HasNoDefaultNamespace() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("default_namespace"))
	return u
}

func (u *UserResourceAssert) HasNoDefaultRole() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("default_role"))
	return u
}

func (u *UserResourceAssert) HasNoDefaultSecondaryRoles() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("default_secondary_roles"))
	return u
}

func (u *UserResourceAssert) HasNoDefaultWarehouse() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("default_warehouse"))
	return u
}

func (u *UserResourceAssert) HasNoDisabled() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("disabled"))
	return u
}

func (u *UserResourceAssert) HasNoDisplayName() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("display_name"))
	return u
}

func (u *UserResourceAssert) HasNoEmail() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("email"))
	return u
}

func (u *UserResourceAssert) HasNoFirstName() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("first_name"))
	return u
}

func (u *UserResourceAssert) HasNoHasRsaPublicKey() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("has_rsa_public_key"))
	return u
}

func (u *UserResourceAssert) HasNoLastName() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("last_name"))
	return u
}

func (u *UserResourceAssert) HasNoLoginName() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("login_name"))
	return u
}

func (u *UserResourceAssert) HasNoMustChangePassword() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("must_change_password"))
	return u
}

func (u *UserResourceAssert) HasNoName() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("name"))
	return u
}

func (u *UserResourceAssert) HasNoPassword() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("password"))
	return u
}

func (u *UserResourceAssert) HasNoRsaPublicKey() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("rsa_public_key"))
	return u
}

func (u *UserResourceAssert) HasNoRsaPublicKey2() *UserResourceAssert {
	u.AddAssertion(assert.ValueNotSet("rsa_public_key_2"))
	return u
}
