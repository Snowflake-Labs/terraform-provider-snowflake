// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type ProcedurePythonResourceAssert struct {
	*assert.ResourceAssert
}

func ProcedurePythonResource(t *testing.T, name string) *ProcedurePythonResourceAssert {
	t.Helper()

	return &ProcedurePythonResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedProcedurePythonResource(t *testing.T, id string) *ProcedurePythonResourceAssert {
	t.Helper()

	return &ProcedurePythonResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (p *ProcedurePythonResourceAssert) HasArgumentsString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("arguments", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasCommentString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("comment", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasDatabaseString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("database", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasEnableConsoleOutputString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("enable_console_output", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasExecuteAsString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("execute_as", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasExternalAccessIntegrationsString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("external_access_integrations", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasFullyQualifiedNameString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasHandlerString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("handler", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasImportsString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("imports", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasIsSecureString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("is_secure", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasLogLevelString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("log_level", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasMetricLevelString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("metric_level", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNameString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("name", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNullInputBehaviorString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("null_input_behavior", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasPackagesString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("packages", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasProcedureDefinitionString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("procedure_definition", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasProcedureLanguageString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("procedure_language", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasReturnTypeString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("return_type", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasRuntimeVersionString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("runtime_version", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasSchemaString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("schema", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasSecretsString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("secrets", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasSnowparkPackageString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("snowpark_package", expected))
	return p
}

func (p *ProcedurePythonResourceAssert) HasTraceLevelString(expected string) *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("trace_level", expected))
	return p
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (p *ProcedurePythonResourceAssert) HasNoArguments() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("arguments.#", "0"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoComment() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("comment"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoDatabase() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("database"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoEnableConsoleOutput() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("enable_console_output"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoExecuteAs() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("execute_as"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoExternalAccessIntegrations() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("external_access_integrations.#", "0"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoFullyQualifiedName() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoHandler() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("handler"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoImports() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("imports.#", "0"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoIsSecure() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("is_secure"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoLogLevel() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("log_level"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoMetricLevel() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("metric_level"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoName() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("name"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoNullInputBehavior() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("null_input_behavior"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoPackages() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("packages.#", "0"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoProcedureDefinition() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("procedure_definition"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoProcedureLanguage() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("procedure_language"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoReturnType() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("return_type"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoRuntimeVersion() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("runtime_version"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoSchema() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("schema"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoSecrets() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("secrets.#", "0"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoSnowparkPackage() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("snowpark_package"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNoTraceLevel() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueNotSet("trace_level"))
	return p
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (p *ProcedurePythonResourceAssert) HasCommentEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("comment", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasDatabaseEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("database", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasExecuteAsEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("execute_as", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasFullyQualifiedNameEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasHandlerEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("handler", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasIsSecureEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("is_secure", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasLogLevelEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("log_level", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasMetricLevelEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("metric_level", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasNameEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("name", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasNullInputBehaviorEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("null_input_behavior", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasProcedureDefinitionEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("procedure_definition", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasProcedureLanguageEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("procedure_language", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasReturnTypeEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("return_type", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasRuntimeVersionEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("runtime_version", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasSchemaEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("schema", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasSnowparkPackageEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("snowpark_package", ""))
	return p
}
func (p *ProcedurePythonResourceAssert) HasTraceLevelEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValueSet("trace_level", ""))
	return p
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (p *ProcedurePythonResourceAssert) HasArgumentsNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("arguments"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasCommentNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("comment"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasDatabaseNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("database"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasEnableConsoleOutputNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("enable_console_output"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasExecuteAsNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("execute_as"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasExternalAccessIntegrationsNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("external_access_integrations"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasFullyQualifiedNameNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasHandlerNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("handler"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasImportsNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("imports"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasIsSecureNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("is_secure"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasLogLevelNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("log_level"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasMetricLevelNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("metric_level"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNameNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("name"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasNullInputBehaviorNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("null_input_behavior"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasPackagesNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("packages"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasProcedureDefinitionNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("procedure_definition"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasProcedureLanguageNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("procedure_language"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasReturnTypeNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("return_type"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasRuntimeVersionNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("runtime_version"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasSchemaNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("schema"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasSecretsNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("secrets"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasSnowparkPackageNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("snowpark_package"))
	return p
}

func (p *ProcedurePythonResourceAssert) HasTraceLevelNotEmpty() *ProcedurePythonResourceAssert {
	p.AddAssertion(assert.ValuePresent("trace_level"))
	return p
}
