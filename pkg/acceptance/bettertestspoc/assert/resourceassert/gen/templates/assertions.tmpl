{{- /*gotype: github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert/resourceassert/gen.ResourceAssertionsModel*/ -}}

{{- $assertName := .Name | printf "%sResourceAssert" -}}
{{- $nameLowerCase := FirstLetterLowercase .Name -}}
{{- $assertVar := FirstLetter $nameLowerCase }}
///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

{{ range .Attributes -}}
    func ({{ $assertVar }} *{{ $assertName }}) Has{{ SnakeCaseToCamel .Name }}String(expected string) *{{ $assertName }} {
        {{ $assertVar }}.AddAssertion(assert.ValueSet("{{ .Name }}", expected))
        return {{ $assertVar }}
    }

{{ end -}}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

{{ range .Attributes -}}
    func ({{ $assertVar }} *{{ $assertName }}) HasNo{{ SnakeCaseToCamel .Name }}() *{{ $assertName }} {
        {{ if or (eq .AttributeType "TypeList") (eq .AttributeType "TypeSet") -}}
            {{ $assertVar }}.AddAssertion(assert.ValueSet("{{ .Name }}.#", "0"))
            return {{ $assertVar }}
        {{ else -}}
            {{ $assertVar }}.AddAssertion(assert.ValueNotSet("{{ .Name }}"))
            return {{ $assertVar }}
        {{ end -}}
    }

{{ end -}}

////////////////////////////
// Attribute empty checks //
////////////////////////////

{{ range .Attributes -}}
    {{ if eq .AttributeType "TypeString" -}}
        func ({{ $assertVar }} *{{ $assertName }}) Has{{ SnakeCaseToCamel .Name }}Empty() *{{ $assertName }} {
            {{ $assertVar }}.AddAssertion(assert.ValueSet("{{ .Name }}", ""))
            return {{ $assertVar }}
        }
    {{ end -}}

{{ end -}}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

{{ range .Attributes -}}
    func ({{ $assertVar }} *{{ $assertName }}) Has{{ SnakeCaseToCamel .Name }}NotEmpty() *{{ $assertName }} {
    {{ $assertVar }}.AddAssertion(assert.ValuePresent("{{ .Name }}"))
    return {{ $assertVar }}
    }

{{ end -}}
