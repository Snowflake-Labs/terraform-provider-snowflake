// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type MaskingPolicyResourceAssert struct {
	*assert.ResourceAssert
}

func MaskingPolicyResource(t *testing.T, name string) *MaskingPolicyResourceAssert {
	t.Helper()

	return &MaskingPolicyResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedMaskingPolicyResource(t *testing.T, id string) *MaskingPolicyResourceAssert {
	t.Helper()

	return &MaskingPolicyResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (m *MaskingPolicyResourceAssert) HasArgumentString(expected string) *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueSet("argument", expected))
	return m
}

func (m *MaskingPolicyResourceAssert) HasBodyString(expected string) *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueSet("body", expected))
	return m
}

func (m *MaskingPolicyResourceAssert) HasCommentString(expected string) *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueSet("comment", expected))
	return m
}

func (m *MaskingPolicyResourceAssert) HasDatabaseString(expected string) *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueSet("database", expected))
	return m
}

func (m *MaskingPolicyResourceAssert) HasExemptOtherPoliciesString(expected string) *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueSet("exempt_other_policies", expected))
	return m
}

func (m *MaskingPolicyResourceAssert) HasFullyQualifiedNameString(expected string) *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return m
}

func (m *MaskingPolicyResourceAssert) HasNameString(expected string) *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueSet("name", expected))
	return m
}

func (m *MaskingPolicyResourceAssert) HasReturnDataTypeString(expected string) *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueSet("return_data_type", expected))
	return m
}

func (m *MaskingPolicyResourceAssert) HasSchemaString(expected string) *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueSet("schema", expected))
	return m
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (m *MaskingPolicyResourceAssert) HasNoArgument() *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueNotSet("argument"))
	return m
}

func (m *MaskingPolicyResourceAssert) HasNoBody() *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueNotSet("body"))
	return m
}

func (m *MaskingPolicyResourceAssert) HasNoComment() *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueNotSet("comment"))
	return m
}

func (m *MaskingPolicyResourceAssert) HasNoDatabase() *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueNotSet("database"))
	return m
}

func (m *MaskingPolicyResourceAssert) HasNoExemptOtherPolicies() *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueNotSet("exempt_other_policies"))
	return m
}

func (m *MaskingPolicyResourceAssert) HasNoFullyQualifiedName() *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return m
}

func (m *MaskingPolicyResourceAssert) HasNoName() *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueNotSet("name"))
	return m
}

func (m *MaskingPolicyResourceAssert) HasNoReturnDataType() *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueNotSet("return_data_type"))
	return m
}

func (m *MaskingPolicyResourceAssert) HasNoSchema() *MaskingPolicyResourceAssert {
	m.AddAssertion(assert.ValueNotSet("schema"))
	return m
}
