// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type SecretWithAuthorizationCodeGrantResourceAssert struct {
	*assert.ResourceAssert
}

func SecretWithAuthorizationCodeGrantResource(t *testing.T, name string) *SecretWithAuthorizationCodeGrantResourceAssert {
	t.Helper()

	return &SecretWithAuthorizationCodeGrantResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedSecretWithAuthorizationCodeGrantResource(t *testing.T, id string) *SecretWithAuthorizationCodeGrantResourceAssert {
	t.Helper()

	return &SecretWithAuthorizationCodeGrantResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasApiAuthenticationString(expected string) *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueSet("api_authentication", expected))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasCommentString(expected string) *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", expected))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasDatabaseString(expected string) *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueSet("database", expected))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasFullyQualifiedNameString(expected string) *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasNameString(expected string) *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueSet("name", expected))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasOauthRefreshTokenString(expected string) *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueSet("oauth_refresh_token", expected))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasOauthRefreshTokenExpiryTimeString(expected string) *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueSet("oauth_refresh_token_expiry_time", expected))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasSchemaString(expected string) *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueSet("schema", expected))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasSecretTypeString(expected string) *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueSet("secret_type", expected))
	return s
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasNoApiAuthentication() *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueNotSet("api_authentication"))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasNoComment() *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueNotSet("comment"))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasNoDatabase() *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueNotSet("database"))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasNoFullyQualifiedName() *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasNoName() *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueNotSet("name"))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasNoOauthRefreshToken() *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueNotSet("oauth_refresh_token"))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasNoOauthRefreshTokenExpiryTime() *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueNotSet("oauth_refresh_token_expiry_time"))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasNoSchema() *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueNotSet("schema"))
	return s
}

func (s *SecretWithAuthorizationCodeGrantResourceAssert) HasNoSecretType() *SecretWithAuthorizationCodeGrantResourceAssert {
	s.AddAssertion(assert.ValueNotSet("secret_type"))
	return s
}
