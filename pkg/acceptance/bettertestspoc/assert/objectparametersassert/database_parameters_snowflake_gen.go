// Code generated by assertions generator; DO NOT EDIT.

package objectparametersassert

import (
	"testing"

	acc "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type DatabaseParametersAssert struct {
	*assert.SnowflakeParametersAssert[sdk.AccountObjectIdentifier]
}

func DatabaseParameters(t *testing.T, id sdk.AccountObjectIdentifier) *DatabaseParametersAssert {
	t.Helper()
	return &DatabaseParametersAssert{
		assert.NewSnowflakeParametersAssertWithProvider(id, sdk.ObjectTypeDatabase, acc.TestClient().Parameter.ShowDatabaseParameters),
	}
}

func DatabaseParametersPrefetched(t *testing.T, id sdk.AccountObjectIdentifier, parameters []*sdk.Parameter) *DatabaseParametersAssert {
	t.Helper()
	return &DatabaseParametersAssert{
		assert.NewSnowflakeParametersAssertWithParameters(id, sdk.ObjectTypeDatabase, parameters),
	}
}

//////////////////////////////
// Generic parameter checks //
//////////////////////////////

func (d *DatabaseParametersAssert) HasBoolParameterValue(parameterName sdk.DatabaseParameter, expected bool) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterBoolValueSet(parameterName, expected))
	return d
}

func (d *DatabaseParametersAssert) HasIntParameterValue(parameterName sdk.DatabaseParameter, expected int) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterIntValueSet(parameterName, expected))
	return d
}

func (d *DatabaseParametersAssert) HasStringParameterValue(parameterName sdk.DatabaseParameter, expected string) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterValueSet(parameterName, expected))
	return d
}

func (d *DatabaseParametersAssert) HasDefaultParameterValue(parameterName sdk.DatabaseParameter) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterDefaultValueSet(parameterName))
	return d
}

func (d *DatabaseParametersAssert) HasDefaultParameterValueOnLevel(parameterName sdk.DatabaseParameter, parameterType sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterDefaultValueOnLevelSet(parameterName, parameterType))
	return d
}

///////////////////////////////
// Aggregated generic checks //
///////////////////////////////

// HasAllDefaults checks if all the parameters:
// - have a default value by comparing current value of the sdk.Parameter with its default
// - have an expected level
func (d *DatabaseParametersAssert) HasAllDefaults() *DatabaseParametersAssert {
	return d.
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterDataRetentionTimeInDays, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterMaxDataExtensionTimeInDays, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterExternalVolume, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterCatalog, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterReplaceInvalidCharacters, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterDefaultDdlCollation, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterStorageSerializationPolicy, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterLogLevel, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterTraceLevel, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterSuspendTaskAfterNumFailures, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterTaskAutoRetryAttempts, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterUserTaskManagedInitialWarehouseSize, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterUserTaskTimeoutMs, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterUserTaskMinimumTriggerIntervalInSeconds, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterQuotedIdentifiersIgnoreCase, sdk.ParameterTypeSnowflakeDefault).
		HasDefaultParameterValueOnLevel(sdk.DatabaseParameterEnableConsoleOutput, sdk.ParameterTypeSnowflakeDefault)
}

func (d *DatabaseParametersAssert) HasAllDefaultsExplicit() *DatabaseParametersAssert {
	return d.
		HasDefaultDataRetentionTimeInDaysValueExplicit().
		HasDefaultMaxDataExtensionTimeInDaysValueExplicit().
		HasDefaultExternalVolumeValueExplicit().
		HasDefaultCatalogValueExplicit().
		HasDefaultReplaceInvalidCharactersValueExplicit().
		HasDefaultDefaultDdlCollationValueExplicit().
		HasDefaultStorageSerializationPolicyValueExplicit().
		HasDefaultLogLevelValueExplicit().
		HasDefaultTraceLevelValueExplicit().
		HasDefaultSuspendTaskAfterNumFailuresValueExplicit().
		HasDefaultTaskAutoRetryAttemptsValueExplicit().
		HasDefaultUserTaskManagedInitialWarehouseSizeValueExplicit().
		HasDefaultUserTaskTimeoutMsValueExplicit().
		HasDefaultUserTaskMinimumTriggerIntervalInSecondsValueExplicit().
		HasDefaultQuotedIdentifiersIgnoreCaseValueExplicit().
		HasDefaultEnableConsoleOutputValueExplicit()
}

////////////////////////////
// Parameter value checks //
////////////////////////////

func (d *DatabaseParametersAssert) HasDataRetentionTimeInDays(expected int) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterIntValueSet(sdk.DatabaseParameterDataRetentionTimeInDays, expected))
	return d
}

func (d *DatabaseParametersAssert) HasMaxDataExtensionTimeInDays(expected int) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterIntValueSet(sdk.DatabaseParameterMaxDataExtensionTimeInDays, expected))
	return d
}

func (d *DatabaseParametersAssert) HasExternalVolume(expected string) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterValueSet(sdk.DatabaseParameterExternalVolume, expected))
	return d
}

func (d *DatabaseParametersAssert) HasCatalog(expected string) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterValueSet(sdk.DatabaseParameterCatalog, expected))
	return d
}

func (d *DatabaseParametersAssert) HasReplaceInvalidCharacters(expected bool) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterBoolValueSet(sdk.DatabaseParameterReplaceInvalidCharacters, expected))
	return d
}

func (d *DatabaseParametersAssert) HasDefaultDdlCollation(expected string) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterValueSet(sdk.DatabaseParameterDefaultDdlCollation, expected))
	return d
}

func (d *DatabaseParametersAssert) HasStorageSerializationPolicy(expected sdk.StorageSerializationPolicy) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterStringUnderlyingValueSet(sdk.DatabaseParameterStorageSerializationPolicy, expected))
	return d
}

func (d *DatabaseParametersAssert) HasLogLevel(expected sdk.LogLevel) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterStringUnderlyingValueSet(sdk.DatabaseParameterLogLevel, expected))
	return d
}

func (d *DatabaseParametersAssert) HasTraceLevel(expected sdk.TraceLevel) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterStringUnderlyingValueSet(sdk.DatabaseParameterTraceLevel, expected))
	return d
}

func (d *DatabaseParametersAssert) HasSuspendTaskAfterNumFailures(expected int) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterIntValueSet(sdk.DatabaseParameterSuspendTaskAfterNumFailures, expected))
	return d
}

func (d *DatabaseParametersAssert) HasTaskAutoRetryAttempts(expected int) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterIntValueSet(sdk.DatabaseParameterTaskAutoRetryAttempts, expected))
	return d
}

func (d *DatabaseParametersAssert) HasUserTaskManagedInitialWarehouseSize(expected sdk.WarehouseSize) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterStringUnderlyingValueSet(sdk.DatabaseParameterUserTaskManagedInitialWarehouseSize, expected))
	return d
}

func (d *DatabaseParametersAssert) HasUserTaskTimeoutMs(expected int) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterIntValueSet(sdk.DatabaseParameterUserTaskTimeoutMs, expected))
	return d
}

func (d *DatabaseParametersAssert) HasUserTaskMinimumTriggerIntervalInSeconds(expected int) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterIntValueSet(sdk.DatabaseParameterUserTaskMinimumTriggerIntervalInSeconds, expected))
	return d
}

func (d *DatabaseParametersAssert) HasQuotedIdentifiersIgnoreCase(expected bool) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterBoolValueSet(sdk.DatabaseParameterQuotedIdentifiersIgnoreCase, expected))
	return d
}

func (d *DatabaseParametersAssert) HasEnableConsoleOutput(expected bool) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterBoolValueSet(sdk.DatabaseParameterEnableConsoleOutput, expected))
	return d
}

////////////////////////////
// Parameter level checks //
////////////////////////////

func (d *DatabaseParametersAssert) HasDataRetentionTimeInDaysLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterDataRetentionTimeInDays, expected))
	return d
}

func (d *DatabaseParametersAssert) HasMaxDataExtensionTimeInDaysLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterMaxDataExtensionTimeInDays, expected))
	return d
}

func (d *DatabaseParametersAssert) HasExternalVolumeLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterExternalVolume, expected))
	return d
}

func (d *DatabaseParametersAssert) HasCatalogLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterCatalog, expected))
	return d
}

func (d *DatabaseParametersAssert) HasReplaceInvalidCharactersLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterReplaceInvalidCharacters, expected))
	return d
}

func (d *DatabaseParametersAssert) HasDefaultDdlCollationLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterDefaultDdlCollation, expected))
	return d
}

func (d *DatabaseParametersAssert) HasStorageSerializationPolicyLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterStorageSerializationPolicy, expected))
	return d
}

func (d *DatabaseParametersAssert) HasLogLevelLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterLogLevel, expected))
	return d
}

func (d *DatabaseParametersAssert) HasTraceLevelLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterTraceLevel, expected))
	return d
}

func (d *DatabaseParametersAssert) HasSuspendTaskAfterNumFailuresLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterSuspendTaskAfterNumFailures, expected))
	return d
}

func (d *DatabaseParametersAssert) HasTaskAutoRetryAttemptsLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterTaskAutoRetryAttempts, expected))
	return d
}

func (d *DatabaseParametersAssert) HasUserTaskManagedInitialWarehouseSizeLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterUserTaskManagedInitialWarehouseSize, expected))
	return d
}

func (d *DatabaseParametersAssert) HasUserTaskTimeoutMsLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterUserTaskTimeoutMs, expected))
	return d
}

func (d *DatabaseParametersAssert) HasUserTaskMinimumTriggerIntervalInSecondsLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterUserTaskMinimumTriggerIntervalInSeconds, expected))
	return d
}

func (d *DatabaseParametersAssert) HasQuotedIdentifiersIgnoreCaseLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterQuotedIdentifiersIgnoreCase, expected))
	return d
}

func (d *DatabaseParametersAssert) HasEnableConsoleOutputLevel(expected sdk.ParameterType) *DatabaseParametersAssert {
	d.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.DatabaseParameterEnableConsoleOutput, expected))
	return d
}

////////////////////////////////////
// Parameter default value checks //
////////////////////////////////////

func (d *DatabaseParametersAssert) HasDefaultDataRetentionTimeInDaysValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterDataRetentionTimeInDays)
}

func (d *DatabaseParametersAssert) HasDefaultMaxDataExtensionTimeInDaysValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterMaxDataExtensionTimeInDays)
}

func (d *DatabaseParametersAssert) HasDefaultExternalVolumeValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterExternalVolume)
}

func (d *DatabaseParametersAssert) HasDefaultCatalogValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterCatalog)
}

func (d *DatabaseParametersAssert) HasDefaultReplaceInvalidCharactersValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterReplaceInvalidCharacters)
}

func (d *DatabaseParametersAssert) HasDefaultDefaultDdlCollationValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterDefaultDdlCollation)
}

func (d *DatabaseParametersAssert) HasDefaultStorageSerializationPolicyValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterStorageSerializationPolicy)
}

func (d *DatabaseParametersAssert) HasDefaultLogLevelValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterLogLevel)
}

func (d *DatabaseParametersAssert) HasDefaultTraceLevelValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterTraceLevel)
}

func (d *DatabaseParametersAssert) HasDefaultSuspendTaskAfterNumFailuresValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterSuspendTaskAfterNumFailures)
}

func (d *DatabaseParametersAssert) HasDefaultTaskAutoRetryAttemptsValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterTaskAutoRetryAttempts)
}

func (d *DatabaseParametersAssert) HasDefaultUserTaskManagedInitialWarehouseSizeValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterUserTaskManagedInitialWarehouseSize)
}

func (d *DatabaseParametersAssert) HasDefaultUserTaskTimeoutMsValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterUserTaskTimeoutMs)
}

func (d *DatabaseParametersAssert) HasDefaultUserTaskMinimumTriggerIntervalInSecondsValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterUserTaskMinimumTriggerIntervalInSeconds)
}

func (d *DatabaseParametersAssert) HasDefaultQuotedIdentifiersIgnoreCaseValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterQuotedIdentifiersIgnoreCase)
}

func (d *DatabaseParametersAssert) HasDefaultEnableConsoleOutputValue() *DatabaseParametersAssert {
	return d.HasDefaultParameterValue(sdk.DatabaseParameterEnableConsoleOutput)
}

/////////////////////////////////////////////
// Parameter explicit default value checks //
/////////////////////////////////////////////

func (d *DatabaseParametersAssert) HasDefaultDataRetentionTimeInDaysValueExplicit() *DatabaseParametersAssert {
	return d.HasDataRetentionTimeInDays(1)
}

func (d *DatabaseParametersAssert) HasDefaultMaxDataExtensionTimeInDaysValueExplicit() *DatabaseParametersAssert {
	return d.HasMaxDataExtensionTimeInDays(14)
}

func (d *DatabaseParametersAssert) HasDefaultExternalVolumeValueExplicit() *DatabaseParametersAssert {
	return d.HasExternalVolume("")
}

func (d *DatabaseParametersAssert) HasDefaultCatalogValueExplicit() *DatabaseParametersAssert {
	return d.HasCatalog("")
}

func (d *DatabaseParametersAssert) HasDefaultReplaceInvalidCharactersValueExplicit() *DatabaseParametersAssert {
	return d.HasReplaceInvalidCharacters(false)
}

func (d *DatabaseParametersAssert) HasDefaultDefaultDdlCollationValueExplicit() *DatabaseParametersAssert {
	return d.HasDefaultDdlCollation("")
}

func (d *DatabaseParametersAssert) HasDefaultStorageSerializationPolicyValueExplicit() *DatabaseParametersAssert {
	return d.HasStorageSerializationPolicy(sdk.StorageSerializationPolicyOptimized)
}

func (d *DatabaseParametersAssert) HasDefaultLogLevelValueExplicit() *DatabaseParametersAssert {
	return d.HasLogLevel(sdk.LogLevelOff)
}

func (d *DatabaseParametersAssert) HasDefaultTraceLevelValueExplicit() *DatabaseParametersAssert {
	return d.HasTraceLevel(sdk.TraceLevelOff)
}

func (d *DatabaseParametersAssert) HasDefaultSuspendTaskAfterNumFailuresValueExplicit() *DatabaseParametersAssert {
	return d.HasSuspendTaskAfterNumFailures(10)
}

func (d *DatabaseParametersAssert) HasDefaultTaskAutoRetryAttemptsValueExplicit() *DatabaseParametersAssert {
	return d.HasTaskAutoRetryAttempts(0)
}

func (d *DatabaseParametersAssert) HasDefaultUserTaskManagedInitialWarehouseSizeValueExplicit() *DatabaseParametersAssert {
	return d.HasUserTaskManagedInitialWarehouseSize(sdk.WarehouseSizeMedium)
}

func (d *DatabaseParametersAssert) HasDefaultUserTaskTimeoutMsValueExplicit() *DatabaseParametersAssert {
	return d.HasUserTaskTimeoutMs(3600000)
}

func (d *DatabaseParametersAssert) HasDefaultUserTaskMinimumTriggerIntervalInSecondsValueExplicit() *DatabaseParametersAssert {
	return d.HasUserTaskMinimumTriggerIntervalInSeconds(30)
}

func (d *DatabaseParametersAssert) HasDefaultQuotedIdentifiersIgnoreCaseValueExplicit() *DatabaseParametersAssert {
	return d.HasQuotedIdentifiersIgnoreCase(false)
}

func (d *DatabaseParametersAssert) HasDefaultEnableConsoleOutputValueExplicit() *DatabaseParametersAssert {
	return d.HasEnableConsoleOutput(false)
}
