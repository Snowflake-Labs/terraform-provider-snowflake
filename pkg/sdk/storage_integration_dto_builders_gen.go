// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateStorageIntegrationRequest(
	name AccountObjectIdentifier,
	Enabled bool,
	StorageAllowedLocations []StorageLocation,
) *CreateStorageIntegrationRequest {
	s := CreateStorageIntegrationRequest{}
	s.name = name
	s.Enabled = Enabled
	s.StorageAllowedLocations = StorageAllowedLocations
	return &s
}

func (s *CreateStorageIntegrationRequest) WithOrReplace(OrReplace *bool) *CreateStorageIntegrationRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateStorageIntegrationRequest) WithIfNotExists(IfNotExists *bool) *CreateStorageIntegrationRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateStorageIntegrationRequest) WithS3StorageProviderParams(S3StorageProviderParams *S3StorageParamsRequest) *CreateStorageIntegrationRequest {
	s.S3StorageProviderParams = S3StorageProviderParams
	return s
}

func (s *CreateStorageIntegrationRequest) WithGCSStorageProviderParams(GCSStorageProviderParams *GCSStorageParamsRequest) *CreateStorageIntegrationRequest {
	s.GCSStorageProviderParams = GCSStorageProviderParams
	return s
}

func (s *CreateStorageIntegrationRequest) WithAzureStorageProviderParams(AzureStorageProviderParams *AzureStorageParamsRequest) *CreateStorageIntegrationRequest {
	s.AzureStorageProviderParams = AzureStorageProviderParams
	return s
}

func (s *CreateStorageIntegrationRequest) WithStorageBlockedLocations(StorageBlockedLocations []StorageLocation) *CreateStorageIntegrationRequest {
	s.StorageBlockedLocations = StorageBlockedLocations
	return s
}

func (s *CreateStorageIntegrationRequest) WithComment(Comment *string) *CreateStorageIntegrationRequest {
	s.Comment = Comment
	return s
}

func NewS3StorageParamsRequest(
	StorageAwsRoleArn string,
) *S3StorageParamsRequest {
	s := S3StorageParamsRequest{}
	s.StorageAwsRoleArn = StorageAwsRoleArn
	return &s
}

func (s *S3StorageParamsRequest) WithStorageAwsObjectAcl(StorageAwsObjectAcl *string) *S3StorageParamsRequest {
	s.StorageAwsObjectAcl = StorageAwsObjectAcl
	return s
}

func NewGCSStorageParamsRequest() *GCSStorageParamsRequest {
	return &GCSStorageParamsRequest{}
}

func NewAzureStorageParamsRequest(
	AzureTenantId *string,
) *AzureStorageParamsRequest {
	s := AzureStorageParamsRequest{}
	s.AzureTenantId = AzureTenantId
	return &s
}

func NewAlterStorageIntegrationRequest(
	name AccountObjectIdentifier,
) *AlterStorageIntegrationRequest {
	s := AlterStorageIntegrationRequest{}
	s.name = name
	return &s
}

func (s *AlterStorageIntegrationRequest) WithIfExists(IfExists *bool) *AlterStorageIntegrationRequest {
	s.IfExists = IfExists
	return s
}

func (s *AlterStorageIntegrationRequest) WithSet(Set *StorageIntegrationSetRequest) *AlterStorageIntegrationRequest {
	s.Set = Set
	return s
}

func (s *AlterStorageIntegrationRequest) WithUnset(Unset *StorageIntegrationUnsetRequest) *AlterStorageIntegrationRequest {
	s.Unset = Unset
	return s
}

func (s *AlterStorageIntegrationRequest) WithSetTags(SetTags []TagAssociation) *AlterStorageIntegrationRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterStorageIntegrationRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterStorageIntegrationRequest {
	s.UnsetTags = UnsetTags
	return s
}

func NewStorageIntegrationSetRequest() *StorageIntegrationSetRequest {
	return &StorageIntegrationSetRequest{}
}

func (s *StorageIntegrationSetRequest) WithSetS3Params(SetS3Params *SetS3StorageParamsRequest) *StorageIntegrationSetRequest {
	s.SetS3Params = SetS3Params
	return s
}

func (s *StorageIntegrationSetRequest) WithSetAzureParams(SetAzureParams *SetAzureStorageParamsRequest) *StorageIntegrationSetRequest {
	s.SetAzureParams = SetAzureParams
	return s
}

func (s *StorageIntegrationSetRequest) WithEnabled(Enabled bool) *StorageIntegrationSetRequest {
	s.Enabled = Enabled
	return s
}

func (s *StorageIntegrationSetRequest) WithStorageAllowedLocations(StorageAllowedLocations []StorageLocation) *StorageIntegrationSetRequest {
	s.StorageAllowedLocations = StorageAllowedLocations
	return s
}

func (s *StorageIntegrationSetRequest) WithStorageBlockedLocations(StorageBlockedLocations []StorageLocation) *StorageIntegrationSetRequest {
	s.StorageBlockedLocations = StorageBlockedLocations
	return s
}

func (s *StorageIntegrationSetRequest) WithComment(Comment *string) *StorageIntegrationSetRequest {
	s.Comment = Comment
	return s
}

func NewSetS3StorageParamsRequest(
	StorageAwsRoleArn string,
) *SetS3StorageParamsRequest {
	s := SetS3StorageParamsRequest{}
	s.StorageAwsRoleArn = StorageAwsRoleArn
	return &s
}

func (s *SetS3StorageParamsRequest) WithStorageAwsObjectAcl(StorageAwsObjectAcl *string) *SetS3StorageParamsRequest {
	s.StorageAwsObjectAcl = StorageAwsObjectAcl
	return s
}

func NewSetAzureStorageParamsRequest(
	AzureTenantId string,
) *SetAzureStorageParamsRequest {
	s := SetAzureStorageParamsRequest{}
	s.AzureTenantId = AzureTenantId
	return &s
}

func NewStorageIntegrationUnsetRequest() *StorageIntegrationUnsetRequest {
	return &StorageIntegrationUnsetRequest{}
}

func (s *StorageIntegrationUnsetRequest) WithEnabled(Enabled *bool) *StorageIntegrationUnsetRequest {
	s.Enabled = Enabled
	return s
}

func (s *StorageIntegrationUnsetRequest) WithStorageBlockedLocations(StorageBlockedLocations *bool) *StorageIntegrationUnsetRequest {
	s.StorageBlockedLocations = StorageBlockedLocations
	return s
}

func (s *StorageIntegrationUnsetRequest) WithComment(Comment *bool) *StorageIntegrationUnsetRequest {
	s.Comment = Comment
	return s
}

func NewDropStorageIntegrationRequest(
	name AccountObjectIdentifier,
) *DropStorageIntegrationRequest {
	s := DropStorageIntegrationRequest{}
	s.name = name
	return &s
}

func (s *DropStorageIntegrationRequest) WithIfExists(IfExists *bool) *DropStorageIntegrationRequest {
	s.IfExists = IfExists
	return s
}

func NewShowStorageIntegrationRequest() *ShowStorageIntegrationRequest {
	return &ShowStorageIntegrationRequest{}
}

func (s *ShowStorageIntegrationRequest) WithLike(Like *Like) *ShowStorageIntegrationRequest {
	s.Like = Like
	return s
}

func NewDescribeStorageIntegrationRequest(
	name AccountObjectIdentifier,
) *DescribeStorageIntegrationRequest {
	s := DescribeStorageIntegrationRequest{}
	s.name = name
	return &s
}
