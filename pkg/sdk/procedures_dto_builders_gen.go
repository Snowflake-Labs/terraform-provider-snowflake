// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateProcedureForJavaProcedureRequest(
	name SchemaObjectIdentifier,
) *CreateProcedureForJavaProcedureRequest {
	s := CreateProcedureForJavaProcedureRequest{}
	s.name = name
	return &s
}

func (s *CreateProcedureForJavaProcedureRequest) WithOrReplace(OrReplace *bool) *CreateProcedureForJavaProcedureRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithSecure(Secure *bool) *CreateProcedureForJavaProcedureRequest {
	s.Secure = Secure
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithArguments(Arguments []ProcedureArgumentRequest) *CreateProcedureForJavaProcedureRequest {
	s.Arguments = Arguments
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithCopyGrants(CopyGrants *bool) *CreateProcedureForJavaProcedureRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithReturns(Returns *ProcedureReturnsRequest) *CreateProcedureForJavaProcedureRequest {
	s.Returns = Returns
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithRuntimeVersion(RuntimeVersion *string) *CreateProcedureForJavaProcedureRequest {
	s.RuntimeVersion = RuntimeVersion
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithPackages(Packages []ProcedurePackageRequest) *CreateProcedureForJavaProcedureRequest {
	s.Packages = Packages
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithImports(Imports []ProcedureImportRequest) *CreateProcedureForJavaProcedureRequest {
	s.Imports = Imports
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithHandler(Handler string) *CreateProcedureForJavaProcedureRequest {
	s.Handler = Handler
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithExternalAccessIntegrations(ExternalAccessIntegrations []AccountObjectIdentifier) *CreateProcedureForJavaProcedureRequest {
	s.ExternalAccessIntegrations = ExternalAccessIntegrations
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithSecrets(Secrets []ProcedureSecretRequest) *CreateProcedureForJavaProcedureRequest {
	s.Secrets = Secrets
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithTargetPath(TargetPath *string) *CreateProcedureForJavaProcedureRequest {
	s.TargetPath = TargetPath
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithNullInputBehavior(NullInputBehavior ProcedureNullInputBehavior) *CreateProcedureForJavaProcedureRequest {
	s.NullInputBehavior = &NullInputBehavior
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithComment(Comment *string) *CreateProcedureForJavaProcedureRequest {
	s.Comment = Comment
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithExecuteAs(ExecuteAs ProcedureExecuteAs) *CreateProcedureForJavaProcedureRequest {
	s.ExecuteAs = &ExecuteAs
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithProcedureDefinition(ProcedureDefinition *string) *CreateProcedureForJavaProcedureRequest {
	s.ProcedureDefinition = ProcedureDefinition
	return s
}

func NewProcedureArgumentRequest() *ProcedureArgumentRequest {
	return &ProcedureArgumentRequest{}
}

func (s *ProcedureArgumentRequest) WithArgName(ArgName string) *ProcedureArgumentRequest {
	s.ArgName = ArgName
	return s
}

func (s *ProcedureArgumentRequest) WithArgDataType(ArgDataType DataType) *ProcedureArgumentRequest {
	s.ArgDataType = ArgDataType
	return s
}

func NewProcedureReturnsRequest() *ProcedureReturnsRequest {
	return &ProcedureReturnsRequest{}
}

func (s *ProcedureReturnsRequest) WithResultDataType(ResultDataType *ProcedureReturnsResultDataTypeRequest) *ProcedureReturnsRequest {
	s.ResultDataType = ResultDataType
	return s
}

func (s *ProcedureReturnsRequest) WithTable(Table *ProcedureReturnsTableRequest) *ProcedureReturnsRequest {
	s.Table = Table
	return s
}

func NewProcedureReturnsResultDataTypeRequest() *ProcedureReturnsResultDataTypeRequest {
	return &ProcedureReturnsResultDataTypeRequest{}
}

func (s *ProcedureReturnsResultDataTypeRequest) WithResultDataType(ResultDataType DataType) *ProcedureReturnsResultDataTypeRequest {
	s.ResultDataType = ResultDataType
	return s
}

func (s *ProcedureReturnsResultDataTypeRequest) WithNull(Null *bool) *ProcedureReturnsResultDataTypeRequest {
	s.Null = Null
	return s
}

func (s *ProcedureReturnsResultDataTypeRequest) WithNotNull(NotNull *bool) *ProcedureReturnsResultDataTypeRequest {
	s.NotNull = NotNull
	return s
}

func NewProcedureReturnsTableRequest() *ProcedureReturnsTableRequest {
	return &ProcedureReturnsTableRequest{}
}

func (s *ProcedureReturnsTableRequest) WithColumns(Columns []ProcedureColumnRequest) *ProcedureReturnsTableRequest {
	s.Columns = Columns
	return s
}

func NewProcedureColumnRequest() *ProcedureColumnRequest {
	return &ProcedureColumnRequest{}
}

func (s *ProcedureColumnRequest) WithColumnName(ColumnName string) *ProcedureColumnRequest {
	s.ColumnName = ColumnName
	return s
}

func (s *ProcedureColumnRequest) WithColumnDataType(ColumnDataType DataType) *ProcedureColumnRequest {
	s.ColumnDataType = ColumnDataType
	return s
}

func NewProcedurePackageRequest() *ProcedurePackageRequest {
	return &ProcedurePackageRequest{}
}

func (s *ProcedurePackageRequest) WithPackage(Package string) *ProcedurePackageRequest {
	s.Package = Package
	return s
}

func NewProcedureImportRequest() *ProcedureImportRequest {
	return &ProcedureImportRequest{}
}

func (s *ProcedureImportRequest) WithImport(Import string) *ProcedureImportRequest {
	s.Import = Import
	return s
}

func NewProcedureSecretRequest() *ProcedureSecretRequest {
	return &ProcedureSecretRequest{}
}

func (s *ProcedureSecretRequest) WithSecretVariableName(SecretVariableName string) *ProcedureSecretRequest {
	s.SecretVariableName = SecretVariableName
	return s
}

func (s *ProcedureSecretRequest) WithSecretName(SecretName string) *ProcedureSecretRequest {
	s.SecretName = SecretName
	return s
}

func NewCreateProcedureForJavaScriptProcedureRequest(
	name SchemaObjectIdentifier,
) *CreateProcedureForJavaScriptProcedureRequest {
	s := CreateProcedureForJavaScriptProcedureRequest{}
	s.name = name
	return &s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithOrReplace(OrReplace *bool) *CreateProcedureForJavaScriptProcedureRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithSecure(Secure *bool) *CreateProcedureForJavaScriptProcedureRequest {
	s.Secure = Secure
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithArguments(Arguments []ProcedureArgumentRequest) *CreateProcedureForJavaScriptProcedureRequest {
	s.Arguments = Arguments
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithCopyGrants(CopyGrants *bool) *CreateProcedureForJavaScriptProcedureRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithReturns(Returns *ProcedureReturns2Request) *CreateProcedureForJavaScriptProcedureRequest {
	s.Returns = Returns
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithNullInputBehavior(NullInputBehavior ProcedureNullInputBehavior) *CreateProcedureForJavaScriptProcedureRequest {
	s.NullInputBehavior = &NullInputBehavior
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithComment(Comment *string) *CreateProcedureForJavaScriptProcedureRequest {
	s.Comment = Comment
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithExecuteAs(ExecuteAs ProcedureExecuteAs) *CreateProcedureForJavaScriptProcedureRequest {
	s.ExecuteAs = &ExecuteAs
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithProcedureDefinition(ProcedureDefinition *string) *CreateProcedureForJavaScriptProcedureRequest {
	s.ProcedureDefinition = ProcedureDefinition
	return s
}

func NewProcedureReturns2Request() *ProcedureReturns2Request {
	return &ProcedureReturns2Request{}
}

func (s *ProcedureReturns2Request) WithResultDataType(ResultDataType DataType) *ProcedureReturns2Request {
	s.ResultDataType = ResultDataType
	return s
}

func (s *ProcedureReturns2Request) WithNotNull(NotNull *bool) *ProcedureReturns2Request {
	s.NotNull = NotNull
	return s
}

func NewCreateProcedureForPythonProcedureRequest(
	name SchemaObjectIdentifier,
) *CreateProcedureForPythonProcedureRequest {
	s := CreateProcedureForPythonProcedureRequest{}
	s.name = name
	return &s
}

func (s *CreateProcedureForPythonProcedureRequest) WithOrReplace(OrReplace *bool) *CreateProcedureForPythonProcedureRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithSecure(Secure *bool) *CreateProcedureForPythonProcedureRequest {
	s.Secure = Secure
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithArguments(Arguments []ProcedureArgumentRequest) *CreateProcedureForPythonProcedureRequest {
	s.Arguments = Arguments
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithCopyGrants(CopyGrants *bool) *CreateProcedureForPythonProcedureRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithReturns(Returns *ProcedureReturnsRequest) *CreateProcedureForPythonProcedureRequest {
	s.Returns = Returns
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithRuntimeVersion(RuntimeVersion *string) *CreateProcedureForPythonProcedureRequest {
	s.RuntimeVersion = RuntimeVersion
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithPackages(Packages []ProcedurePackageRequest) *CreateProcedureForPythonProcedureRequest {
	s.Packages = Packages
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithImports(Imports []ProcedureImportRequest) *CreateProcedureForPythonProcedureRequest {
	s.Imports = Imports
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithHandler(Handler string) *CreateProcedureForPythonProcedureRequest {
	s.Handler = Handler
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithExternalAccessIntegrations(ExternalAccessIntegrations []AccountObjectIdentifier) *CreateProcedureForPythonProcedureRequest {
	s.ExternalAccessIntegrations = ExternalAccessIntegrations
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithSecrets(Secrets []ProcedureSecretRequest) *CreateProcedureForPythonProcedureRequest {
	s.Secrets = Secrets
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithNullInputBehavior(NullInputBehavior ProcedureNullInputBehavior) *CreateProcedureForPythonProcedureRequest {
	s.NullInputBehavior = &NullInputBehavior
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithComment(Comment *string) *CreateProcedureForPythonProcedureRequest {
	s.Comment = Comment
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithExecuteAs(ExecuteAs ProcedureExecuteAs) *CreateProcedureForPythonProcedureRequest {
	s.ExecuteAs = &ExecuteAs
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithProcedureDefinition(ProcedureDefinition *string) *CreateProcedureForPythonProcedureRequest {
	s.ProcedureDefinition = ProcedureDefinition
	return s
}

func NewCreateProcedureForScalaProcedureRequest(
	name SchemaObjectIdentifier,
) *CreateProcedureForScalaProcedureRequest {
	s := CreateProcedureForScalaProcedureRequest{}
	s.name = name
	return &s
}

func (s *CreateProcedureForScalaProcedureRequest) WithOrReplace(OrReplace *bool) *CreateProcedureForScalaProcedureRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithSecure(Secure *bool) *CreateProcedureForScalaProcedureRequest {
	s.Secure = Secure
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithArguments(Arguments []ProcedureArgumentRequest) *CreateProcedureForScalaProcedureRequest {
	s.Arguments = Arguments
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithCopyGrants(CopyGrants *bool) *CreateProcedureForScalaProcedureRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithReturns(Returns *ProcedureReturnsRequest) *CreateProcedureForScalaProcedureRequest {
	s.Returns = Returns
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithRuntimeVersion(RuntimeVersion *string) *CreateProcedureForScalaProcedureRequest {
	s.RuntimeVersion = RuntimeVersion
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithPackages(Packages []ProcedurePackageRequest) *CreateProcedureForScalaProcedureRequest {
	s.Packages = Packages
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithImports(Imports []ProcedureImportRequest) *CreateProcedureForScalaProcedureRequest {
	s.Imports = Imports
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithHandler(Handler string) *CreateProcedureForScalaProcedureRequest {
	s.Handler = Handler
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithTargetPath(TargetPath *string) *CreateProcedureForScalaProcedureRequest {
	s.TargetPath = TargetPath
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithNullInputBehavior(NullInputBehavior ProcedureNullInputBehavior) *CreateProcedureForScalaProcedureRequest {
	s.NullInputBehavior = &NullInputBehavior
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithComment(Comment *string) *CreateProcedureForScalaProcedureRequest {
	s.Comment = Comment
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithExecuteAs(ExecuteAs ProcedureExecuteAs) *CreateProcedureForScalaProcedureRequest {
	s.ExecuteAs = &ExecuteAs
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithProcedureDefinition(ProcedureDefinition *string) *CreateProcedureForScalaProcedureRequest {
	s.ProcedureDefinition = ProcedureDefinition
	return s
}

func NewCreateProcedureForSQLProcedureRequest(
	name SchemaObjectIdentifier,
) *CreateProcedureForSQLProcedureRequest {
	s := CreateProcedureForSQLProcedureRequest{}
	s.name = name
	return &s
}

func (s *CreateProcedureForSQLProcedureRequest) WithOrReplace(OrReplace *bool) *CreateProcedureForSQLProcedureRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithSecure(Secure *bool) *CreateProcedureForSQLProcedureRequest {
	s.Secure = Secure
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithArguments(Arguments []ProcedureArgumentRequest) *CreateProcedureForSQLProcedureRequest {
	s.Arguments = Arguments
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithCopyGrants(CopyGrants *bool) *CreateProcedureForSQLProcedureRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithReturns(Returns *ProcedureReturns3Request) *CreateProcedureForSQLProcedureRequest {
	s.Returns = Returns
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithNullInputBehavior(NullInputBehavior ProcedureNullInputBehavior) *CreateProcedureForSQLProcedureRequest {
	s.NullInputBehavior = &NullInputBehavior
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithComment(Comment *string) *CreateProcedureForSQLProcedureRequest {
	s.Comment = Comment
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithExecuteAs(ExecuteAs ProcedureExecuteAs) *CreateProcedureForSQLProcedureRequest {
	s.ExecuteAs = &ExecuteAs
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithProcedureDefinition(ProcedureDefinition *string) *CreateProcedureForSQLProcedureRequest {
	s.ProcedureDefinition = ProcedureDefinition
	return s
}

func NewProcedureReturns3Request() *ProcedureReturns3Request {
	return &ProcedureReturns3Request{}
}

func (s *ProcedureReturns3Request) WithResultDataType(ResultDataType *ProcedureReturnsResultDataTypeRequest) *ProcedureReturns3Request {
	s.ResultDataType = ResultDataType
	return s
}

func (s *ProcedureReturns3Request) WithTable(Table *ProcedureReturnsTableRequest) *ProcedureReturns3Request {
	s.Table = Table
	return s
}

func (s *ProcedureReturns3Request) WithNotNull(NotNull *bool) *ProcedureReturns3Request {
	s.NotNull = NotNull
	return s
}

func NewAlterProcedureRequest(
	name SchemaObjectIdentifier,
) *AlterProcedureRequest {
	s := AlterProcedureRequest{}
	s.name = name
	return &s
}

func (s *AlterProcedureRequest) WithIfExists(IfExists *bool) *AlterProcedureRequest {
	s.IfExists = IfExists
	return s
}

func (s *AlterProcedureRequest) WithArgumentTypes(ArgumentTypes []ProcedureArgumentTypeRequest) *AlterProcedureRequest {
	s.ArgumentTypes = ArgumentTypes
	return s
}

func (s *AlterProcedureRequest) WithSet(Set *ProcedureSetRequest) *AlterProcedureRequest {
	s.Set = Set
	return s
}

func (s *AlterProcedureRequest) WithUnset(Unset *ProcedureUnsetRequest) *AlterProcedureRequest {
	s.Unset = Unset
	return s
}

func (s *AlterProcedureRequest) WithExecuteAs(ExecuteAs ProcedureExecuteAs) *AlterProcedureRequest {
	s.ExecuteAs = &ExecuteAs
	return s
}

func (s *AlterProcedureRequest) WithRenameTo(RenameTo *SchemaObjectIdentifier) *AlterProcedureRequest {
	s.RenameTo = RenameTo
	return s
}

func (s *AlterProcedureRequest) WithSetTags(SetTags []TagAssociation) *AlterProcedureRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterProcedureRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterProcedureRequest {
	s.UnsetTags = UnsetTags
	return s
}

func NewProcedureArgumentTypeRequest() *ProcedureArgumentTypeRequest {
	return &ProcedureArgumentTypeRequest{}
}

func (s *ProcedureArgumentTypeRequest) WithArgDataType(ArgDataType DataType) *ProcedureArgumentTypeRequest {
	s.ArgDataType = ArgDataType
	return s
}

func NewProcedureSetRequest() *ProcedureSetRequest {
	return &ProcedureSetRequest{}
}

func (s *ProcedureSetRequest) WithLogLevel(LogLevel *string) *ProcedureSetRequest {
	s.LogLevel = LogLevel
	return s
}

func (s *ProcedureSetRequest) WithTraceLevel(TraceLevel *string) *ProcedureSetRequest {
	s.TraceLevel = TraceLevel
	return s
}

func (s *ProcedureSetRequest) WithComment(Comment *string) *ProcedureSetRequest {
	s.Comment = Comment
	return s
}

func NewProcedureUnsetRequest() *ProcedureUnsetRequest {
	return &ProcedureUnsetRequest{}
}

func (s *ProcedureUnsetRequest) WithComment(Comment *bool) *ProcedureUnsetRequest {
	s.Comment = Comment
	return s
}

func NewDropProcedureRequest(
	name SchemaObjectIdentifier,
) *DropProcedureRequest {
	s := DropProcedureRequest{}
	s.name = name
	return &s
}

func (s *DropProcedureRequest) WithIfExists(IfExists *bool) *DropProcedureRequest {
	s.IfExists = IfExists
	return s
}

func (s *DropProcedureRequest) WithArgumentTypes(ArgumentTypes []ProcedureArgumentTypeRequest) *DropProcedureRequest {
	s.ArgumentTypes = ArgumentTypes
	return s
}

func NewShowProcedureRequest() *ShowProcedureRequest {
	return &ShowProcedureRequest{}
}

func (s *ShowProcedureRequest) WithLike(pattern string) *ShowProcedureRequest {
	s.Like = &Like{
		Pattern: String(pattern),
	}
	return s
}

func (s *ShowProcedureRequest) WithIn(In *In) *ShowProcedureRequest {
	s.In = In
	return s
}

func NewDescribeProcedureRequest(
	name SchemaObjectIdentifier,
) *DescribeProcedureRequest {
	s := DescribeProcedureRequest{}
	s.name = name
	return &s
}

func (s *DescribeProcedureRequest) WithArgumentTypes(ArgumentTypes []ProcedureArgumentTypeRequest) *DescribeProcedureRequest {
	s.ArgumentTypes = ArgumentTypes
	return s
}
