package testint

import (
	"fmt"
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestInt_SecurityIntegrations(t *testing.T) {
	client := testClient(t)
	ctx := testContext(t)

	acsURL := fmt.Sprintf("https://%s.snowflakecomputing.com/fed/login", testClientHelper().Context.CurrentAccount(t))
	issuerURL := fmt.Sprintf("https://%s.snowflakecomputing.com", testClientHelper().Context.CurrentAccount(t))

	cleanupSecurityIntegration := func(t *testing.T, id sdk.AccountObjectIdentifier) {
		t.Helper()
		t.Cleanup(func() {
			err := client.SecurityIntegrations.Drop(ctx, sdk.NewDropSecurityIntegrationRequest(id).WithIfExists(sdk.Pointer(true)))
			assert.NoError(t, err)
		})
	}

	// generated by `openssl req -x509 -new -newkey rsa:2048 -nodes -subj '/C=US/ST=California/L=San Francisco/O=Snowflake/CN=Snowflake' -out x509_key.pem -days 36500`
	x509 := `MIIDpzCCAo+gAwIBAgIUfg15OPhCN6lOivWEUoprAY27/5EwDQYJKoZIhvcNAQEL
	BQAwYjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcM
	DVNhbiBGcmFuY2lzY28xEjAQBgNVBAoMCVNub3dmbGFrZTESMBAGA1UEAwwJU25v
	d2ZsYWtlMCAXDTI0MDUxMzA5MDM0NFoYDzIxMjQwNDE5MDkwMzQ0WjBiMQswCQYD
	VQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5j
	aXNjbzESMBAGA1UECgwJU25vd2ZsYWtlMRIwEAYDVQQDDAlTbm93Zmxha2UwggEi
	MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCrlsZAAOrljWC1eeAZb9rSGmRi
	HEozww9sb1/d2aQhi1j+RV+e1tuSiZ1fMTmtE/r67R2ryx8cStiqM88SM/M0UtWf
	jPzQNnQ/zuOu1wvRcVAQmyIIaDQU1V+OVv5vz9G0MNdHUeerRfVuse0i1IlyDtX/
	sV9lcgU4fIsdwyg0+tyvG8QA8R8mCajy2UDcQS/qh0NB/WGa08tmbedMO5FQ7Obz
	cBnksmyuq+l4AdbC5nDfK7BSo6CVPQBYLrmsTPKhU+ET50X4IN+nd3NmGlQH8kXo
	OjU39Udf31fXBDuVC7dfL2uBHAkn9bUV5LwF2bKMeNMRQOrCydgy7jvsO+HrAgMB
	AAGjUzBRMB0GA1UdDgQWBBT9mt6mehFcEHTTEQcTru4ync3T6DAfBgNVHSMEGDAW
	gBT9mt6mehFcEHTTEQcTru4ync3T6DAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3
	DQEBCwUAA4IBAQB177MgJXJAHXbaJ0/KVhWnDDNuZYG+OwzrGaVXiOhXShfxzENc
	cqsQB4DR7GEIrEicL2xQ23Kg3j7zASmo7T56CZiJ97jIiHDNrhGoAaW+aMhbp6wx
	WYxLNx9pbaPIORAJ1KEC3hvE4strHJPlQddCYSsXDhIOUTUd71JvR26DHiYQ82TO
	3wpXHhYdWYZbMjrDDAz0PwdTXyFBuTZxdlTFTxX2lXAE33OsdAFt+oi7JTQh248k
	0+lmQdhQrSrzhM3WwwuYTEKQVoa2xvWajgqbo7iu2iadWkrxUx/5bjFc5kXej6j7
	PhfG6C4ddUpAISJhmEViuXq4nVxe0Vk3Efo2
	`

	createSAML2Integration := func(t *testing.T, siID sdk.AccountObjectIdentifier, with func(*sdk.CreateSAML2SecurityIntegrationRequest)) {
		t.Helper()
		_, err := client.ExecForTests(ctx, "ALTER ACCOUNT SET ENABLE_IDENTIFIER_FIRST_LOGIN = true")
		require.NoError(t, err)

		saml2Req := sdk.NewCreateSAML2SecurityIntegrationRequest(siID, false, "test", "https://example.com", "Custom", x509)
		if with != nil {
			with(saml2Req)
		}
		err = client.SecurityIntegrations.CreateSAML2(ctx, saml2Req)
		require.NoError(t, err)
		cleanupSecurityIntegration(t, siID)
	}

	createSCIMIntegration := func(t *testing.T, siID sdk.AccountObjectIdentifier, with func(*sdk.CreateSCIMSecurityIntegrationRequest)) {
		t.Helper()
		roleID := sdk.NewAccountObjectIdentifier("GENERIC_SCIM_PROVISIONER")
		err := client.Roles.Create(ctx, sdk.NewCreateRoleRequest(roleID).WithIfNotExists(true))
		require.NoError(t, err)
		t.Cleanup(func() {
			err = client.Roles.Drop(ctx, sdk.NewDropRoleRequest(roleID))
			assert.NoError(t, err)
		})
		currentRole := testClientHelper().Context.CurrentRole(t)
		err = client.Roles.Grant(ctx, sdk.NewGrantRoleRequest(roleID, sdk.GrantRole{Role: sdk.Pointer(sdk.NewAccountObjectIdentifier(currentRole))}))
		require.NoError(t, err)

		scimReq := sdk.NewCreateSCIMSecurityIntegrationRequest(siID, false, &sdk.SCIMSecurityIntegrationSCIMClientGeneric, &sdk.SCIMSecurityIntegrationRunAsRoleGenericScimProvisioner)
		if with != nil {
			with(scimReq)
		}
		err = client.SecurityIntegrations.CreateSCIM(ctx, scimReq)
		require.NoError(t, err)
		cleanupSecurityIntegration(t, siID)
	}

	assertSecurityIntegration := func(t *testing.T, si *sdk.SecurityIntegration, id sdk.AccountObjectIdentifier, siType string, enabled bool, comment string) {
		t.Helper()
		assert.Equal(t, id.Name(), si.Name)
		assert.Equal(t, siType, si.IntegrationType)
		assert.Equal(t, enabled, si.Enabled)
		assert.Equal(t, comment, si.Comment)
		assert.Equal(t, "SECURITY", si.Category)
	}

	assertSCIMDescribe := func(details []sdk.SecurityIntegrationProperty, enabled, networkPolicy, runAsRole, syncPassword, comment string) {
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "ENABLED", Type: "Boolean", Value: enabled, Default: "false"})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "NETWORK_POLICY", Type: "String", Value: networkPolicy, Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "RUN_AS_ROLE", Type: "String", Value: runAsRole, Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SYNC_PASSWORD", Type: "Boolean", Value: syncPassword, Default: "true"})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "COMMENT", Type: "String", Value: comment, Default: ""})
	}

	type saml2details struct {
		provider                  string
		enableSPInitiated         string
		spInitiatedLoginPageLabel string
		ssoURL                    string
		issuer                    string
		requestedNameIDFormat     string
		forceAuthn                string
		postLogoutRedirectUrl     string
		signrequest               string
		comment                   string
		snowflakeIssuerURL        string
		snowflakeAcsURL           string
		allowedUserDomains        string
		allowedEmailPatterns      string
	}

	assertSAML2Describe := func(details []sdk.SecurityIntegrationProperty, d saml2details) {
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_X509_CERT", Type: "String", Value: "MIIDpzCCAo+gAwIBAgIUfg15OPhCN6lOivWEUoprAY27/5EwDQYJKoZIhvcNAQEL\n\tBQAwYjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcM\n\tDVNhbiBGcmFuY2lzY28xEjAQBgNVBAoMCVNub3dmbGFrZTESMBAGA1UEAwwJU25v\n\td2ZsYWtlMCAXDTI0MDUxMzA5MDM0NFoYDzIxMjQwNDE5MDkwMzQ0WjBiMQswCQYD\n\tVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5j\n\taXNjbzESMBAGA1UECgwJU25vd2ZsYWtlMRIwEAYDVQQDDAlTbm93Zmxha2UwggEi\n\tMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCrlsZAAOrljWC1eeAZb9rSGmRi\n\tHEozww9sb1/d2aQhi1j+RV+e1tuSiZ1fMTmtE/r67R2ryx8cStiqM88SM/M0UtWf\n\tjPzQNnQ/zuOu1wvRcVAQmyIIaDQU1V+OVv5vz9G0MNdHUeerRfVuse0i1IlyDtX/\n\tsV9lcgU4fIsdwyg0+tyvG8QA8R8mCajy2UDcQS/qh0NB/WGa08tmbedMO5FQ7Obz\n\tcBnksmyuq+l4AdbC5nDfK7BSo6CVPQBYLrmsTPKhU+ET50X4IN+nd3NmGlQH8kXo\n\tOjU39Udf31fXBDuVC7dfL2uBHAkn9bUV5LwF2bKMeNMRQOrCydgy7jvsO+HrAgMB\n\tAAGjUzBRMB0GA1UdDgQWBBT9mt6mehFcEHTTEQcTru4ync3T6DAfBgNVHSMEGDAW\n\tgBT9mt" +
			"6mehFcEHTTEQcTru4ync3T6DAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3\n\tDQEBCwUAA4IBAQB177MgJXJAHXbaJ0/KVhWnDDNuZYG+OwzrGaVXiOhXShfxzENc\n\tcqsQB4DR7GEIrEicL2xQ23Kg3j7zASmo7T56CZiJ97jIiHDNrhGoAaW+aMhbp6wx\n\tWYxLNx9pbaPIORAJ1KEC3hvE4strHJPlQddCYSsXDhIOUTUd71JvR26DHiYQ82TO\n\t3wpXHhYdWYZbMjrDDAz0PwdTXyFBuTZxdlTFTxX2lXAE33OsdAFt+oi7JTQh248k\n\t0+lmQdhQrSrzhM3WwwuYTEKQVoa2xvWajgqbo7iu2iadWkrxUx/5bjFc5kXej6j7\n\tPhfG6C4ddUpAISJhmEViuXq4nVxe0Vk3Efo2\n\t", Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_PROVIDER", Type: "String", Value: d.provider, Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_ENABLE_SP_INITIATED", Type: "Boolean", Value: d.enableSPInitiated, Default: "false"})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_SP_INITIATED_LOGIN_PAGE_LABEL", Type: "String", Value: d.spInitiatedLoginPageLabel, Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_SSO_URL", Type: "String", Value: d.ssoURL, Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_ISSUER", Type: "String", Value: d.issuer, Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_REQUESTED_NAMEID_FORMAT", Type: "String", Value: d.requestedNameIDFormat, Default: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_FORCE_AUTHN", Type: "Boolean", Value: d.forceAuthn, Default: "false"})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_POST_LOGOUT_REDIRECT_URL", Type: "String", Value: d.postLogoutRedirectUrl, Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_SIGN_REQUEST", Type: "Boolean", Value: d.signrequest, Default: "false"})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_DIGEST_METHODS_USED", Type: "String", Value: "http://www.w3.org/2001/04/xmlenc#sha256", Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_SIGNATURE_METHODS_USED", Type: "String", Value: "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256", Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "COMMENT", Type: "String", Value: d.comment, Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_SNOWFLAKE_ISSUER_URL", Type: "String", Value: d.snowflakeIssuerURL, Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_SNOWFLAKE_ACS_URL", Type: "String", Value: d.snowflakeAcsURL, Default: ""})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "ALLOWED_USER_DOMAINS", Type: "List", Value: d.allowedUserDomains, Default: "[]"})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "ALLOWED_EMAIL_PATTERNS", Type: "List", Value: d.allowedEmailPatterns, Default: "[]"})
	}

	t.Run("CreateSAML2", func(t *testing.T) {
		id := testClientHelper().Ids.RandomAccountObjectIdentifier()
		createSAML2Integration(t, id, func(r *sdk.CreateSAML2SecurityIntegrationRequest) {
			r.WithAllowedEmailPatterns([]sdk.EmailPattern{{Pattern: "^(.+dev)@example.com$"}}).
				WithAllowedUserDomains([]sdk.UserDomain{{Domain: "example.com"}}).
				WithComment(sdk.Pointer("a")).
				WithSaml2EnableSpInitiated(sdk.Pointer(true)).
				WithSaml2ForceAuthn(sdk.Pointer(true)).
				WithSaml2PostLogoutRedirectUrl(sdk.Pointer("http://example.com/logout")).
				WithSaml2RequestedNameidFormat(sdk.Pointer("urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified")).
				WithSaml2SignRequest(sdk.Pointer(true)).
				WithSaml2SnowflakeAcsUrl(&acsURL).
				WithSaml2SnowflakeIssuerUrl(&issuerURL).
				WithSaml2SpInitiatedLoginPageLabel(sdk.Pointer("label"))
		})
		details, err := client.SecurityIntegrations.Describe(ctx, id)
		require.NoError(t, err)

		assertSAML2Describe(details, saml2details{
			provider:                  "Custom",
			enableSPInitiated:         "true",
			spInitiatedLoginPageLabel: "label",
			ssoURL:                    "https://example.com",
			issuer:                    "test",
			requestedNameIDFormat:     "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
			forceAuthn:                "true",
			postLogoutRedirectUrl:     "http://example.com/logout",
			signrequest:               "true",
			comment:                   "a",
			snowflakeIssuerURL:        issuerURL,
			snowflakeAcsURL:           acsURL,
			allowedUserDomains:        "[example.com]",
			allowedEmailPatterns:      "[^(.+dev)@example.com$]",
		})

		si, err := client.SecurityIntegrations.ShowByID(ctx, id)
		require.NoError(t, err)
		assertSecurityIntegration(t, si, id, "SAML2", false, "a")
	})

	t.Run("CreateSCIM", func(t *testing.T) {
		networkPolicy, networkPolicyCleanup := testClientHelper().NetworkPolicy.CreateNetworkPolicy(t)
		t.Cleanup(networkPolicyCleanup)

		id := testClientHelper().Ids.RandomAccountObjectIdentifier()
		createSCIMIntegration(t, id, func(r *sdk.CreateSCIMSecurityIntegrationRequest) {
			r.WithComment(sdk.Pointer("a")).
				WithNetworkPolicy(sdk.Pointer(sdk.NewAccountObjectIdentifier(networkPolicy.Name))).
				WithSyncPassword(sdk.Pointer(false))
		})
		details, err := client.SecurityIntegrations.Describe(ctx, id)
		require.NoError(t, err)

		assertSCIMDescribe(details, "false", networkPolicy.Name, "GENERIC_SCIM_PROVISIONER", "false", "a")

		si, err := client.SecurityIntegrations.ShowByID(ctx, id)
		require.NoError(t, err)
		assertSecurityIntegration(t, si, id, "SCIM - GENERIC", false, "a")
	})

	t.Run("AlterSAML2Integration", func(t *testing.T) {
		id := testClientHelper().Ids.RandomAccountObjectIdentifier()
		createSAML2Integration(t, id, nil)

		setRequest := sdk.NewAlterSAML2IntegrationSecurityIntegrationRequest(id).
			WithSet(
				sdk.NewSAML2IntegrationSetRequest().
					WithComment(sdk.Pointer("a")).
					WithSaml2EnableSpInitiated(sdk.Pointer(true)).
					WithSaml2ForceAuthn(sdk.Pointer(true)).
					WithSaml2PostLogoutRedirectUrl(sdk.Pointer("http://example.com/logout")).
					WithSaml2RequestedNameidFormat(sdk.Pointer("urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified")).
					WithSaml2SignRequest(sdk.Pointer(true)).
					WithSaml2SnowflakeAcsUrl(&acsURL).
					WithSaml2SnowflakeIssuerUrl(&issuerURL).
					WithSaml2SpInitiatedLoginPageLabel(sdk.Pointer("label")).
					WithAllowedEmailPatterns([]sdk.EmailPattern{{Pattern: "^(.+dev)@example.com$"}}).
					WithAllowedUserDomains([]sdk.UserDomain{{Domain: "example.com"}}),
			)
		err := client.SecurityIntegrations.AlterSAML2Integration(ctx, setRequest)
		require.NoError(t, err)

		details, err := client.SecurityIntegrations.Describe(ctx, id)
		require.NoError(t, err)

		assertSAML2Describe(details, saml2details{
			provider:                  "Custom",
			enableSPInitiated:         "true",
			spInitiatedLoginPageLabel: "label",
			ssoURL:                    "https://example.com",
			issuer:                    "test",
			requestedNameIDFormat:     "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
			forceAuthn:                "true",
			postLogoutRedirectUrl:     "http://example.com/logout",
			signrequest:               "true",
			comment:                   "a",
			snowflakeIssuerURL:        issuerURL,
			snowflakeAcsURL:           acsURL,
			allowedUserDomains:        "[example.com]",
			allowedEmailPatterns:      "[^(.+dev)@example.com$]",
		})

		unsetRequest := sdk.NewAlterSAML2IntegrationSecurityIntegrationRequest(id).
			WithUnset(
				sdk.NewSAML2IntegrationUnsetRequest().
					WithSaml2ForceAuthn(sdk.Pointer(true)).
					WithSaml2RequestedNameidFormat(sdk.Pointer(true)).
					WithSaml2PostLogoutRedirectUrl(sdk.Pointer(true)),
			)
		err = client.SecurityIntegrations.AlterSAML2Integration(ctx, unsetRequest)
		require.NoError(t, err)

		details, err = client.SecurityIntegrations.Describe(ctx, id)
		require.NoError(t, err)
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_FORCE_AUTHN", Type: "Boolean", Value: "false", Default: "false"})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_REQUESTED_NAMEID_FORMAT", Type: "String", Value: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress", Default: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"})
		assert.Contains(t, details, sdk.SecurityIntegrationProperty{Name: "SAML2_POST_LOGOUT_REDIRECT_URL", Type: "String", Value: "", Default: ""})
	})

	t.Run("AlterSAML2Integration - REFRESH SAML2_SNOWFLAKE_PRIVATE_KEY", func(t *testing.T) {
		id := testClientHelper().Ids.RandomAccountObjectIdentifier()
		createSAML2Integration(t, id, nil)

		setRequest := sdk.NewAlterSAML2IntegrationSecurityIntegrationRequest(id).WithRefreshSaml2SnowflakePrivateKey(sdk.Pointer(true))
		err := client.SecurityIntegrations.AlterSAML2Integration(ctx, setRequest)
		require.NoError(t, err)
	})

	t.Run("AlterSCIMIntegration", func(t *testing.T) {
		id := testClientHelper().Ids.RandomAccountObjectIdentifier()
		createSCIMIntegration(t, id, nil)

		setRequest := sdk.NewAlterSCIMIntegrationSecurityIntegrationRequest(id).
			WithSet(
				sdk.NewSCIMIntegrationSetRequest().
					WithEnabled(sdk.Bool(true)).
					WithSyncPassword(sdk.Bool(false)).
					WithComment(sdk.String("altered")),
			)
		err := client.SecurityIntegrations.AlterSCIMIntegration(ctx, setRequest)
		require.NoError(t, err)

		details, err := client.SecurityIntegrations.Describe(ctx, id)
		require.NoError(t, err)

		assertSCIMDescribe(details, "true", "", "GENERIC_SCIM_PROVISIONER", "false", "altered")

		unsetRequest := sdk.NewAlterSCIMIntegrationSecurityIntegrationRequest(id).
			WithUnset(
				sdk.NewSCIMIntegrationUnsetRequest().
					WithNetworkPolicy(sdk.Bool(true)).
					WithSyncPassword(sdk.Bool(true)),
			)
		err = client.SecurityIntegrations.AlterSCIMIntegration(ctx, unsetRequest)
		require.NoError(t, err)

		details, err = client.SecurityIntegrations.Describe(ctx, id)
		require.NoError(t, err)

		assertSCIMDescribe(details, "true", "", "GENERIC_SCIM_PROVISIONER", "true", "altered")
	})

	t.Run("Alter - set and unset tags", func(t *testing.T) {
		tag, tagCleanup := testClientHelper().Tag.CreateTag(t)
		t.Cleanup(tagCleanup)

		id := testClientHelper().Ids.RandomAccountObjectIdentifier()
		createSCIMIntegration(t, id, nil)

		tagValue := "abc"
		tags := []sdk.TagAssociation{
			{
				Name:  tag.ID(),
				Value: tagValue,
			},
		}
		alterRequestSetTags := sdk.NewAlterSCIMIntegrationSecurityIntegrationRequest(id).WithSetTags(tags)

		err := client.SecurityIntegrations.AlterSCIMIntegration(ctx, alterRequestSetTags)
		require.NoError(t, err)

		returnedTagValue, err := client.SystemFunctions.GetTag(ctx, tag.ID(), id, sdk.ObjectTypeIntegration)
		require.NoError(t, err)

		assert.Equal(t, tagValue, returnedTagValue)

		unsetTags := []sdk.ObjectIdentifier{
			tag.ID(),
		}
		alterRequestUnsetTags := sdk.NewAlterSCIMIntegrationSecurityIntegrationRequest(id).WithUnsetTags(unsetTags)

		err = client.SecurityIntegrations.AlterSCIMIntegration(ctx, alterRequestUnsetTags)
		require.NoError(t, err)

		_, err = client.SystemFunctions.GetTag(ctx, tag.ID(), id, sdk.ObjectTypeIntegration)
		require.Error(t, err)
	})

	t.Run("Drop", func(t *testing.T) {
		id := testClientHelper().Ids.RandomAccountObjectIdentifier()
		createSCIMIntegration(t, id, nil)

		si, err := client.SecurityIntegrations.ShowByID(ctx, id)
		require.NotNil(t, si)
		require.NoError(t, err)

		err = client.SecurityIntegrations.Drop(ctx, sdk.NewDropSecurityIntegrationRequest(id))
		require.NoError(t, err)

		si, err = client.SecurityIntegrations.ShowByID(ctx, id)
		require.Nil(t, si)
		require.Error(t, err)
	})

	t.Run("Drop non-existing", func(t *testing.T) {
		id := sdk.NewAccountObjectIdentifier("does_not_exist")

		err := client.SecurityIntegrations.Drop(ctx, sdk.NewDropSecurityIntegrationRequest(id))
		assert.ErrorIs(t, err, sdk.ErrObjectNotExistOrAuthorized)
	})

	t.Run("Describe", func(t *testing.T) {
		id := testClientHelper().Ids.RandomAccountObjectIdentifier()
		createSCIMIntegration(t, id, nil)

		details, err := client.SecurityIntegrations.Describe(ctx, id)
		require.NoError(t, err)

		assertSCIMDescribe(details, "false", "", "GENERIC_SCIM_PROVISIONER", "true", "")
	})

	t.Run("ShowByID", func(t *testing.T) {
		id := testClientHelper().Ids.RandomAccountObjectIdentifier()
		createSCIMIntegration(t, id, nil)

		si, err := client.SecurityIntegrations.ShowByID(ctx, id)
		require.NoError(t, err)
		assertSecurityIntegration(t, si, id, "SCIM - GENERIC", false, "")
	})
}
