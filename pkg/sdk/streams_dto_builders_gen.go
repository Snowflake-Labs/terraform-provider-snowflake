// Code generated by dto builder generator; DO NOT EDIT.

package sdk

func NewCreateStreamOnTableRequest(
	name SchemaObjectIdentifier,
	TableId SchemaObjectIdentifier,
) *CreateOnTableStreamRequest {
	s := CreateOnTableStreamRequest{}
	s.name = name
	s.TableId = TableId
	return &s
}

func (s *CreateOnTableStreamRequest) WithOrReplace(OrReplace *bool) *CreateOnTableStreamRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateOnTableStreamRequest) WithIfNotExists(IfNotExists *bool) *CreateOnTableStreamRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateOnTableStreamRequest) WithCopyGrants(CopyGrants *bool) *CreateOnTableStreamRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateOnTableStreamRequest) WithOn(On *OnStreamRequest) *CreateOnTableStreamRequest {
	s.On = On
	return s
}

func (s *CreateOnTableStreamRequest) WithAppendOnly(AppendOnly *bool) *CreateOnTableStreamRequest {
	s.AppendOnly = AppendOnly
	return s
}

func (s *CreateOnTableStreamRequest) WithShowInitialRows(ShowInitialRows *bool) *CreateOnTableStreamRequest {
	s.ShowInitialRows = ShowInitialRows
	return s
}

func (s *CreateOnTableStreamRequest) WithComment(Comment *string) *CreateOnTableStreamRequest {
	s.Comment = Comment
	return s
}

func NewOnStreamRequest() *OnStreamRequest {
	return &OnStreamRequest{}
}

func (s *OnStreamRequest) WithAt(At *bool) *OnStreamRequest {
	s.At = At
	return s
}

func (s *OnStreamRequest) WithBefore(Before *bool) *OnStreamRequest {
	s.Before = Before
	return s
}

func (s *OnStreamRequest) WithStatement(Statement OnStreamStatementRequest) *OnStreamRequest {
	s.Statement = Statement
	return s
}

func NewOnStreamStatementRequest() *OnStreamStatementRequest {
	return &OnStreamStatementRequest{}
}

func (s *OnStreamStatementRequest) WithTimestamp(Timestamp *string) *OnStreamStatementRequest {
	s.Timestamp = Timestamp
	return s
}

func (s *OnStreamStatementRequest) WithOffset(Offset *string) *OnStreamStatementRequest {
	s.Offset = Offset
	return s
}

func (s *OnStreamStatementRequest) WithStatement(Statement *string) *OnStreamStatementRequest {
	s.Statement = Statement
	return s
}

func (s *OnStreamStatementRequest) WithStream(Stream *string) *OnStreamStatementRequest {
	s.Stream = Stream
	return s
}

func NewCreateStreamOnExternalTableRequest(
	name SchemaObjectIdentifier,
	ExternalTableId SchemaObjectIdentifier,
) *CreateOnExternalTableStreamRequest {
	s := CreateOnExternalTableStreamRequest{}
	s.name = name
	s.ExternalTableId = ExternalTableId
	return &s
}

func (s *CreateOnExternalTableStreamRequest) WithOrReplace(OrReplace *bool) *CreateOnExternalTableStreamRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithIfNotExists(IfNotExists *bool) *CreateOnExternalTableStreamRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithCopyGrants(CopyGrants *bool) *CreateOnExternalTableStreamRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithOn(On *OnStreamRequest) *CreateOnExternalTableStreamRequest {
	s.On = On
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithInsertOnly(InsertOnly *bool) *CreateOnExternalTableStreamRequest {
	s.InsertOnly = InsertOnly
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithComment(Comment *string) *CreateOnExternalTableStreamRequest {
	s.Comment = Comment
	return s
}

func NewCreateStreamOnDirectoryTableRequest(
	name SchemaObjectIdentifier,
	StageId SchemaObjectIdentifier,
) *CreateOnDirectoryTableStreamRequest {
	s := CreateOnDirectoryTableStreamRequest{}
	s.name = name
	s.StageId = StageId
	return &s
}

func (s *CreateOnDirectoryTableStreamRequest) WithOrReplace(OrReplace *bool) *CreateOnDirectoryTableStreamRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateOnDirectoryTableStreamRequest) WithIfNotExists(IfNotExists *bool) *CreateOnDirectoryTableStreamRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateOnDirectoryTableStreamRequest) WithCopyGrants(CopyGrants *bool) *CreateOnDirectoryTableStreamRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateOnDirectoryTableStreamRequest) WithComment(Comment *string) *CreateOnDirectoryTableStreamRequest {
	s.Comment = Comment
	return s
}

func NewCreateStreamOnViewRequest(
	name SchemaObjectIdentifier,
	ViewId SchemaObjectIdentifier,
) *CreateOnViewStreamRequest {
	s := CreateOnViewStreamRequest{}
	s.name = name
	s.ViewId = ViewId
	return &s
}

func (s *CreateOnViewStreamRequest) WithOrReplace(OrReplace *bool) *CreateOnViewStreamRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateOnViewStreamRequest) WithIfNotExists(IfNotExists *bool) *CreateOnViewStreamRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateOnViewStreamRequest) WithCopyGrants(CopyGrants *bool) *CreateOnViewStreamRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateOnViewStreamRequest) WithOn(On *OnStreamRequest) *CreateOnViewStreamRequest {
	s.On = On
	return s
}

func (s *CreateOnViewStreamRequest) WithAppendOnly(AppendOnly *bool) *CreateOnViewStreamRequest {
	s.AppendOnly = AppendOnly
	return s
}

func (s *CreateOnViewStreamRequest) WithShowInitialRows(ShowInitialRows *bool) *CreateOnViewStreamRequest {
	s.ShowInitialRows = ShowInitialRows
	return s
}

func (s *CreateOnViewStreamRequest) WithComment(Comment *string) *CreateOnViewStreamRequest {
	s.Comment = Comment
	return s
}

func NewCloneStreamRequest(
	name SchemaObjectIdentifier,
	sourceStream SchemaObjectIdentifier,
) *CloneStreamRequest {
	s := CloneStreamRequest{}
	s.name = name
	s.sourceStream = sourceStream
	return &s
}

func (s *CloneStreamRequest) WithOrReplace(OrReplace *bool) *CloneStreamRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CloneStreamRequest) WithCopyGrants(CopyGrants *bool) *CloneStreamRequest {
	s.CopyGrants = CopyGrants
	return s
}

func NewAlterStreamRequest(
	name SchemaObjectIdentifier,
) *AlterStreamRequest {
	s := AlterStreamRequest{}
	s.name = name
	return &s
}

func (s *AlterStreamRequest) WithIfExists(IfExists *bool) *AlterStreamRequest {
	s.IfExists = IfExists
	return s
}

func (s *AlterStreamRequest) WithSetComment(SetComment *string) *AlterStreamRequest {
	s.SetComment = SetComment
	return s
}

func (s *AlterStreamRequest) WithUnsetComment(UnsetComment *bool) *AlterStreamRequest {
	s.UnsetComment = UnsetComment
	return s
}

func (s *AlterStreamRequest) WithSetTags(SetTags []TagAssociation) *AlterStreamRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterStreamRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterStreamRequest {
	s.UnsetTags = UnsetTags
	return s
}

func NewDropStreamRequest(
	name SchemaObjectIdentifier,
) *DropStreamRequest {
	s := DropStreamRequest{}
	s.name = name
	return &s
}

func (s *DropStreamRequest) WithIfExists(IfExists *bool) *DropStreamRequest {
	s.IfExists = IfExists
	return s
}

func NewShowStreamRequest() *ShowStreamRequest {
	return &ShowStreamRequest{}
}

func (s *ShowStreamRequest) WithTerse(Terse *bool) *ShowStreamRequest {
	s.Terse = Terse
	return s
}

func (s *ShowStreamRequest) WithLike(Like *Like) *ShowStreamRequest {
	s.Like = Like
	return s
}

func (s *ShowStreamRequest) WithIn(In *In) *ShowStreamRequest {
	s.In = In
	return s
}

func (s *ShowStreamRequest) WithStartsWith(StartsWith *string) *ShowStreamRequest {
	s.StartsWith = StartsWith
	return s
}

func (s *ShowStreamRequest) WithLimit(Limit *LimitFrom) *ShowStreamRequest {
	s.Limit = Limit
	return s
}

func NewDescribeStreamRequest(
	name SchemaObjectIdentifier,
) *DescribeStreamRequest {
	s := DescribeStreamRequest{}
	s.name = name
	return &s
}
