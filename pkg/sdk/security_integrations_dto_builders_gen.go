// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateSnowflakeOauthPartnerSecurityIntegrationRequest(
	name AccountObjectIdentifier,
	OauthClient OauthSecurityIntegrationClientOption,
) *CreateSnowflakeOauthPartnerSecurityIntegrationRequest {
	s := CreateSnowflakeOauthPartnerSecurityIntegrationRequest{}
	s.name = name
	s.OauthClient = OauthClient
	return &s
}

func (s *CreateSnowflakeOauthPartnerSecurityIntegrationRequest) WithOrReplace(OrReplace *bool) *CreateSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateSnowflakeOauthPartnerSecurityIntegrationRequest) WithIfNotExists(IfNotExists *bool) *CreateSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateSnowflakeOauthPartnerSecurityIntegrationRequest) WithOauthRedirectUri(OauthRedirectUri *string) *CreateSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.OauthRedirectUri = OauthRedirectUri
	return s
}

func (s *CreateSnowflakeOauthPartnerSecurityIntegrationRequest) WithEnabled(Enabled *bool) *CreateSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.Enabled = Enabled
	return s
}

func (s *CreateSnowflakeOauthPartnerSecurityIntegrationRequest) WithOauthIssueRefreshTokens(OauthIssueRefreshTokens *bool) *CreateSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.OauthIssueRefreshTokens = OauthIssueRefreshTokens
	return s
}

func (s *CreateSnowflakeOauthPartnerSecurityIntegrationRequest) WithOauthRefreshTokenValidity(OauthRefreshTokenValidity *int) *CreateSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.OauthRefreshTokenValidity = OauthRefreshTokenValidity
	return s
}

func (s *CreateSnowflakeOauthPartnerSecurityIntegrationRequest) WithOauthUseSecondaryRoles(OauthUseSecondaryRoles *OauthSecurityIntegrationUseSecondaryRolesOption) *CreateSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.OauthUseSecondaryRoles = OauthUseSecondaryRoles
	return s
}

func (s *CreateSnowflakeOauthPartnerSecurityIntegrationRequest) WithBlockedRolesList(BlockedRolesList *BlockedRolesListRequest) *CreateSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.BlockedRolesList = BlockedRolesList
	return s
}

func (s *CreateSnowflakeOauthPartnerSecurityIntegrationRequest) WithComment(Comment *string) *CreateSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.Comment = Comment
	return s
}

func NewBlockedRolesListRequest() *BlockedRolesListRequest {
	return &BlockedRolesListRequest{}
}

func (s *BlockedRolesListRequest) WithBlockedRolesList(BlockedRolesList []AccountObjectIdentifier) *BlockedRolesListRequest {
	s.BlockedRolesList = BlockedRolesList
	return s
}

func NewCreateSnowflakeOauthCustomSecurityIntegrationRequest(
	name AccountObjectIdentifier,
	OauthClientType OauthSecurityIntegrationClientTypeOption,
	OauthRedirectUri string,
) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s := CreateSnowflakeOauthCustomSecurityIntegrationRequest{}
	s.name = name
	s.OauthClientType = OauthClientType
	s.OauthRedirectUri = OauthRedirectUri
	return &s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithOrReplace(OrReplace *bool) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithIfNotExists(IfNotExists *bool) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithEnabled(Enabled *bool) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.Enabled = Enabled
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithOauthAllowNonTlsRedirectUri(OauthAllowNonTlsRedirectUri *bool) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.OauthAllowNonTlsRedirectUri = OauthAllowNonTlsRedirectUri
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithOauthEnforcePkce(OauthEnforcePkce *bool) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.OauthEnforcePkce = OauthEnforcePkce
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithOauthUseSecondaryRoles(OauthUseSecondaryRoles *OauthSecurityIntegrationUseSecondaryRolesOption) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.OauthUseSecondaryRoles = OauthUseSecondaryRoles
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithPreAuthorizedRolesList(PreAuthorizedRolesList *PreAuthorizedRolesListRequest) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.PreAuthorizedRolesList = PreAuthorizedRolesList
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithBlockedRolesList(BlockedRolesList *BlockedRolesListRequest) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.BlockedRolesList = BlockedRolesList
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithOauthIssueRefreshTokens(OauthIssueRefreshTokens *bool) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.OauthIssueRefreshTokens = OauthIssueRefreshTokens
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithOauthRefreshTokenValidity(OauthRefreshTokenValidity *int) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.OauthRefreshTokenValidity = OauthRefreshTokenValidity
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithNetworkPolicy(NetworkPolicy *AccountObjectIdentifier) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.NetworkPolicy = NetworkPolicy
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithOauthClientRsaPublicKey(OauthClientRsaPublicKey *string) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.OauthClientRsaPublicKey = OauthClientRsaPublicKey
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithOauthClientRsaPublicKey2(OauthClientRsaPublicKey2 *string) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.OauthClientRsaPublicKey2 = OauthClientRsaPublicKey2
	return s
}

func (s *CreateSnowflakeOauthCustomSecurityIntegrationRequest) WithComment(Comment *string) *CreateSnowflakeOauthCustomSecurityIntegrationRequest {
	s.Comment = Comment
	return s
}

func NewPreAuthorizedRolesListRequest() *PreAuthorizedRolesListRequest {
	return &PreAuthorizedRolesListRequest{}
}

func (s *PreAuthorizedRolesListRequest) WithPreAuthorizedRolesList(PreAuthorizedRolesList []AccountObjectIdentifier) *PreAuthorizedRolesListRequest {
	s.PreAuthorizedRolesList = PreAuthorizedRolesList
	return s
}

func NewCreateSaml2SecurityIntegrationRequest(
	name AccountObjectIdentifier,
	Enabled bool,
	Saml2Issuer string,
	Saml2SsoUrl string,
	Saml2Provider string,
	Saml2X509Cert string,
) *CreateSaml2SecurityIntegrationRequest {
	s := CreateSaml2SecurityIntegrationRequest{}
	s.name = name
	s.Enabled = Enabled
	s.Saml2Issuer = Saml2Issuer
	s.Saml2SsoUrl = Saml2SsoUrl
	s.Saml2Provider = Saml2Provider
	s.Saml2X509Cert = Saml2X509Cert
	return &s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithOrReplace(OrReplace *bool) *CreateSaml2SecurityIntegrationRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithIfNotExists(IfNotExists *bool) *CreateSaml2SecurityIntegrationRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithAllowedUserDomains(AllowedUserDomains []UserDomain) *CreateSaml2SecurityIntegrationRequest {
	s.AllowedUserDomains = AllowedUserDomains
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithAllowedEmailPatterns(AllowedEmailPatterns []EmailPattern) *CreateSaml2SecurityIntegrationRequest {
	s.AllowedEmailPatterns = AllowedEmailPatterns
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithSaml2SpInitiatedLoginPageLabel(Saml2SpInitiatedLoginPageLabel *string) *CreateSaml2SecurityIntegrationRequest {
	s.Saml2SpInitiatedLoginPageLabel = Saml2SpInitiatedLoginPageLabel
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithSaml2EnableSpInitiated(Saml2EnableSpInitiated *bool) *CreateSaml2SecurityIntegrationRequest {
	s.Saml2EnableSpInitiated = Saml2EnableSpInitiated
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithSaml2SnowflakeX509Cert(Saml2SnowflakeX509Cert *string) *CreateSaml2SecurityIntegrationRequest {
	s.Saml2SnowflakeX509Cert = Saml2SnowflakeX509Cert
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithSaml2SignRequest(Saml2SignRequest *bool) *CreateSaml2SecurityIntegrationRequest {
	s.Saml2SignRequest = Saml2SignRequest
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithSaml2RequestedNameidFormat(Saml2RequestedNameidFormat *string) *CreateSaml2SecurityIntegrationRequest {
	s.Saml2RequestedNameidFormat = Saml2RequestedNameidFormat
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithSaml2PostLogoutRedirectUrl(Saml2PostLogoutRedirectUrl *string) *CreateSaml2SecurityIntegrationRequest {
	s.Saml2PostLogoutRedirectUrl = Saml2PostLogoutRedirectUrl
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithSaml2ForceAuthn(Saml2ForceAuthn *bool) *CreateSaml2SecurityIntegrationRequest {
	s.Saml2ForceAuthn = Saml2ForceAuthn
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithSaml2SnowflakeIssuerUrl(Saml2SnowflakeIssuerUrl *string) *CreateSaml2SecurityIntegrationRequest {
	s.Saml2SnowflakeIssuerUrl = Saml2SnowflakeIssuerUrl
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithSaml2SnowflakeAcsUrl(Saml2SnowflakeAcsUrl *string) *CreateSaml2SecurityIntegrationRequest {
	s.Saml2SnowflakeAcsUrl = Saml2SnowflakeAcsUrl
	return s
}

func (s *CreateSaml2SecurityIntegrationRequest) WithComment(Comment *string) *CreateSaml2SecurityIntegrationRequest {
	s.Comment = Comment
	return s
}

func NewCreateScimSecurityIntegrationRequest(
	name AccountObjectIdentifier,
	Enabled bool,
	ScimClient ScimSecurityIntegrationScimClientOption,
	RunAsRole ScimSecurityIntegrationRunAsRoleOption,
) *CreateScimSecurityIntegrationRequest {
	s := CreateScimSecurityIntegrationRequest{}
	s.name = name
	s.Enabled = Enabled
	s.ScimClient = ScimClient
	s.RunAsRole = RunAsRole
	return &s
}

func (s *CreateScimSecurityIntegrationRequest) WithOrReplace(OrReplace *bool) *CreateScimSecurityIntegrationRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateScimSecurityIntegrationRequest) WithIfNotExists(IfNotExists *bool) *CreateScimSecurityIntegrationRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateScimSecurityIntegrationRequest) WithNetworkPolicy(NetworkPolicy *AccountObjectIdentifier) *CreateScimSecurityIntegrationRequest {
	s.NetworkPolicy = NetworkPolicy
	return s
}

func (s *CreateScimSecurityIntegrationRequest) WithSyncPassword(SyncPassword *bool) *CreateScimSecurityIntegrationRequest {
	s.SyncPassword = SyncPassword
	return s
}

func (s *CreateScimSecurityIntegrationRequest) WithComment(Comment *string) *CreateScimSecurityIntegrationRequest {
	s.Comment = Comment
	return s
}

func NewAlterSnowflakeOauthPartnerSecurityIntegrationRequest(
	name AccountObjectIdentifier,
) *AlterSnowflakeOauthPartnerSecurityIntegrationRequest {
	s := AlterSnowflakeOauthPartnerSecurityIntegrationRequest{}
	s.name = name
	return &s
}

func (s *AlterSnowflakeOauthPartnerSecurityIntegrationRequest) WithIfExists(IfExists *bool) *AlterSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.IfExists = IfExists
	return s
}

func (s *AlterSnowflakeOauthPartnerSecurityIntegrationRequest) WithSetTags(SetTags []TagAssociation) *AlterSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterSnowflakeOauthPartnerSecurityIntegrationRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.UnsetTags = UnsetTags
	return s
}

func (s *AlterSnowflakeOauthPartnerSecurityIntegrationRequest) WithSet(Set *SnowflakeOauthPartnerIntegrationSetRequest) *AlterSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.Set = Set
	return s
}

func (s *AlterSnowflakeOauthPartnerSecurityIntegrationRequest) WithUnset(Unset *SnowflakeOauthPartnerIntegrationUnsetRequest) *AlterSnowflakeOauthPartnerSecurityIntegrationRequest {
	s.Unset = Unset
	return s
}

func NewSnowflakeOauthPartnerIntegrationSetRequest() *SnowflakeOauthPartnerIntegrationSetRequest {
	return &SnowflakeOauthPartnerIntegrationSetRequest{}
}

func (s *SnowflakeOauthPartnerIntegrationSetRequest) WithEnabled(Enabled *bool) *SnowflakeOauthPartnerIntegrationSetRequest {
	s.Enabled = Enabled
	return s
}

func (s *SnowflakeOauthPartnerIntegrationSetRequest) WithOauthRedirectUri(OauthRedirectUri *string) *SnowflakeOauthPartnerIntegrationSetRequest {
	s.OauthRedirectUri = OauthRedirectUri
	return s
}

func (s *SnowflakeOauthPartnerIntegrationSetRequest) WithOauthIssueRefreshTokens(OauthIssueRefreshTokens *bool) *SnowflakeOauthPartnerIntegrationSetRequest {
	s.OauthIssueRefreshTokens = OauthIssueRefreshTokens
	return s
}

func (s *SnowflakeOauthPartnerIntegrationSetRequest) WithOauthRefreshTokenValidity(OauthRefreshTokenValidity *int) *SnowflakeOauthPartnerIntegrationSetRequest {
	s.OauthRefreshTokenValidity = OauthRefreshTokenValidity
	return s
}

func (s *SnowflakeOauthPartnerIntegrationSetRequest) WithOauthUseSecondaryRoles(OauthUseSecondaryRoles *OauthSecurityIntegrationUseSecondaryRolesOption) *SnowflakeOauthPartnerIntegrationSetRequest {
	s.OauthUseSecondaryRoles = OauthUseSecondaryRoles
	return s
}

func (s *SnowflakeOauthPartnerIntegrationSetRequest) WithBlockedRolesList(BlockedRolesList *BlockedRolesListRequest) *SnowflakeOauthPartnerIntegrationSetRequest {
	s.BlockedRolesList = BlockedRolesList
	return s
}

func (s *SnowflakeOauthPartnerIntegrationSetRequest) WithComment(Comment *string) *SnowflakeOauthPartnerIntegrationSetRequest {
	s.Comment = Comment
	return s
}

func NewSnowflakeOauthPartnerIntegrationUnsetRequest() *SnowflakeOauthPartnerIntegrationUnsetRequest {
	return &SnowflakeOauthPartnerIntegrationUnsetRequest{}
}

func (s *SnowflakeOauthPartnerIntegrationUnsetRequest) WithEnabled(Enabled *bool) *SnowflakeOauthPartnerIntegrationUnsetRequest {
	s.Enabled = Enabled
	return s
}

func (s *SnowflakeOauthPartnerIntegrationUnsetRequest) WithOauthUseSecondaryRoles(OauthUseSecondaryRoles *bool) *SnowflakeOauthPartnerIntegrationUnsetRequest {
	s.OauthUseSecondaryRoles = OauthUseSecondaryRoles
	return s
}

func NewAlterSnowflakeOauthCustomSecurityIntegrationRequest(
	name AccountObjectIdentifier,
) *AlterSnowflakeOauthCustomSecurityIntegrationRequest {
	s := AlterSnowflakeOauthCustomSecurityIntegrationRequest{}
	s.name = name
	return &s
}

func (s *AlterSnowflakeOauthCustomSecurityIntegrationRequest) WithIfExists(IfExists *bool) *AlterSnowflakeOauthCustomSecurityIntegrationRequest {
	s.IfExists = IfExists
	return s
}

func (s *AlterSnowflakeOauthCustomSecurityIntegrationRequest) WithSetTags(SetTags []TagAssociation) *AlterSnowflakeOauthCustomSecurityIntegrationRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterSnowflakeOauthCustomSecurityIntegrationRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterSnowflakeOauthCustomSecurityIntegrationRequest {
	s.UnsetTags = UnsetTags
	return s
}

func (s *AlterSnowflakeOauthCustomSecurityIntegrationRequest) WithSet(Set *SnowflakeOauthCustomIntegrationSetRequest) *AlterSnowflakeOauthCustomSecurityIntegrationRequest {
	s.Set = Set
	return s
}

func (s *AlterSnowflakeOauthCustomSecurityIntegrationRequest) WithUnset(Unset *SnowflakeOauthCustomIntegrationUnsetRequest) *AlterSnowflakeOauthCustomSecurityIntegrationRequest {
	s.Unset = Unset
	return s
}

func NewSnowflakeOauthCustomIntegrationSetRequest() *SnowflakeOauthCustomIntegrationSetRequest {
	return &SnowflakeOauthCustomIntegrationSetRequest{}
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithEnabled(Enabled *bool) *SnowflakeOauthCustomIntegrationSetRequest {
	s.Enabled = Enabled
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithOauthRedirectUri(OauthRedirectUri *string) *SnowflakeOauthCustomIntegrationSetRequest {
	s.OauthRedirectUri = OauthRedirectUri
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithOauthAllowNonTlsRedirectUri(OauthAllowNonTlsRedirectUri *bool) *SnowflakeOauthCustomIntegrationSetRequest {
	s.OauthAllowNonTlsRedirectUri = OauthAllowNonTlsRedirectUri
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithOauthEnforcePkce(OauthEnforcePkce *bool) *SnowflakeOauthCustomIntegrationSetRequest {
	s.OauthEnforcePkce = OauthEnforcePkce
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithOauthUseSecondaryRoles(OauthUseSecondaryRoles *OauthSecurityIntegrationUseSecondaryRolesOption) *SnowflakeOauthCustomIntegrationSetRequest {
	s.OauthUseSecondaryRoles = OauthUseSecondaryRoles
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithPreAuthorizedRolesList(PreAuthorizedRolesList *PreAuthorizedRolesListRequest) *SnowflakeOauthCustomIntegrationSetRequest {
	s.PreAuthorizedRolesList = PreAuthorizedRolesList
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithBlockedRolesList(BlockedRolesList *BlockedRolesListRequest) *SnowflakeOauthCustomIntegrationSetRequest {
	s.BlockedRolesList = BlockedRolesList
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithOauthIssueRefreshTokens(OauthIssueRefreshTokens *bool) *SnowflakeOauthCustomIntegrationSetRequest {
	s.OauthIssueRefreshTokens = OauthIssueRefreshTokens
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithOauthRefreshTokenValidity(OauthRefreshTokenValidity *int) *SnowflakeOauthCustomIntegrationSetRequest {
	s.OauthRefreshTokenValidity = OauthRefreshTokenValidity
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithNetworkPolicy(NetworkPolicy *AccountObjectIdentifier) *SnowflakeOauthCustomIntegrationSetRequest {
	s.NetworkPolicy = NetworkPolicy
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithOauthClientRsaPublicKey(OauthClientRsaPublicKey *string) *SnowflakeOauthCustomIntegrationSetRequest {
	s.OauthClientRsaPublicKey = OauthClientRsaPublicKey
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithOauthClientRsaPublicKey2(OauthClientRsaPublicKey2 *string) *SnowflakeOauthCustomIntegrationSetRequest {
	s.OauthClientRsaPublicKey2 = OauthClientRsaPublicKey2
	return s
}

func (s *SnowflakeOauthCustomIntegrationSetRequest) WithComment(Comment *string) *SnowflakeOauthCustomIntegrationSetRequest {
	s.Comment = Comment
	return s
}

func NewSnowflakeOauthCustomIntegrationUnsetRequest() *SnowflakeOauthCustomIntegrationUnsetRequest {
	return &SnowflakeOauthCustomIntegrationUnsetRequest{}
}

func (s *SnowflakeOauthCustomIntegrationUnsetRequest) WithEnabled(Enabled *bool) *SnowflakeOauthCustomIntegrationUnsetRequest {
	s.Enabled = Enabled
	return s
}

func (s *SnowflakeOauthCustomIntegrationUnsetRequest) WithOauthUseSecondaryRoles(OauthUseSecondaryRoles *bool) *SnowflakeOauthCustomIntegrationUnsetRequest {
	s.OauthUseSecondaryRoles = OauthUseSecondaryRoles
	return s
}

func (s *SnowflakeOauthCustomIntegrationUnsetRequest) WithNetworkPolicy(NetworkPolicy *bool) *SnowflakeOauthCustomIntegrationUnsetRequest {
	s.NetworkPolicy = NetworkPolicy
	return s
}

func (s *SnowflakeOauthCustomIntegrationUnsetRequest) WithOauthClientRsaPublicKey(OauthClientRsaPublicKey *bool) *SnowflakeOauthCustomIntegrationUnsetRequest {
	s.OauthClientRsaPublicKey = OauthClientRsaPublicKey
	return s
}

func (s *SnowflakeOauthCustomIntegrationUnsetRequest) WithOauthClientRsaPublicKey2(OauthClientRsaPublicKey2 *bool) *SnowflakeOauthCustomIntegrationUnsetRequest {
	s.OauthClientRsaPublicKey2 = OauthClientRsaPublicKey2
	return s
}

func NewAlterSaml2SecurityIntegrationRequest(
	name AccountObjectIdentifier,
) *AlterSaml2SecurityIntegrationRequest {
	s := AlterSaml2SecurityIntegrationRequest{}
	s.name = name
	return &s
}

func (s *AlterSaml2SecurityIntegrationRequest) WithIfExists(IfExists *bool) *AlterSaml2SecurityIntegrationRequest {
	s.IfExists = IfExists
	return s
}

func (s *AlterSaml2SecurityIntegrationRequest) WithSetTags(SetTags []TagAssociation) *AlterSaml2SecurityIntegrationRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterSaml2SecurityIntegrationRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterSaml2SecurityIntegrationRequest {
	s.UnsetTags = UnsetTags
	return s
}

func (s *AlterSaml2SecurityIntegrationRequest) WithSet(Set *Saml2IntegrationSetRequest) *AlterSaml2SecurityIntegrationRequest {
	s.Set = Set
	return s
}

func (s *AlterSaml2SecurityIntegrationRequest) WithUnset(Unset *Saml2IntegrationUnsetRequest) *AlterSaml2SecurityIntegrationRequest {
	s.Unset = Unset
	return s
}

func (s *AlterSaml2SecurityIntegrationRequest) WithRefreshSaml2SnowflakePrivateKey(RefreshSaml2SnowflakePrivateKey *bool) *AlterSaml2SecurityIntegrationRequest {
	s.RefreshSaml2SnowflakePrivateKey = RefreshSaml2SnowflakePrivateKey
	return s
}

func NewSaml2IntegrationSetRequest() *Saml2IntegrationSetRequest {
	return &Saml2IntegrationSetRequest{}
}

func (s *Saml2IntegrationSetRequest) WithEnabled(Enabled *bool) *Saml2IntegrationSetRequest {
	s.Enabled = Enabled
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2Issuer(Saml2Issuer *string) *Saml2IntegrationSetRequest {
	s.Saml2Issuer = Saml2Issuer
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2SsoUrl(Saml2SsoUrl *string) *Saml2IntegrationSetRequest {
	s.Saml2SsoUrl = Saml2SsoUrl
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2Provider(Saml2Provider *string) *Saml2IntegrationSetRequest {
	s.Saml2Provider = Saml2Provider
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2X509Cert(Saml2X509Cert *string) *Saml2IntegrationSetRequest {
	s.Saml2X509Cert = Saml2X509Cert
	return s
}

func (s *Saml2IntegrationSetRequest) WithAllowedUserDomains(AllowedUserDomains []UserDomain) *Saml2IntegrationSetRequest {
	s.AllowedUserDomains = AllowedUserDomains
	return s
}

func (s *Saml2IntegrationSetRequest) WithAllowedEmailPatterns(AllowedEmailPatterns []EmailPattern) *Saml2IntegrationSetRequest {
	s.AllowedEmailPatterns = AllowedEmailPatterns
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2SpInitiatedLoginPageLabel(Saml2SpInitiatedLoginPageLabel *string) *Saml2IntegrationSetRequest {
	s.Saml2SpInitiatedLoginPageLabel = Saml2SpInitiatedLoginPageLabel
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2EnableSpInitiated(Saml2EnableSpInitiated *bool) *Saml2IntegrationSetRequest {
	s.Saml2EnableSpInitiated = Saml2EnableSpInitiated
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2SnowflakeX509Cert(Saml2SnowflakeX509Cert *string) *Saml2IntegrationSetRequest {
	s.Saml2SnowflakeX509Cert = Saml2SnowflakeX509Cert
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2SignRequest(Saml2SignRequest *bool) *Saml2IntegrationSetRequest {
	s.Saml2SignRequest = Saml2SignRequest
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2RequestedNameidFormat(Saml2RequestedNameidFormat *string) *Saml2IntegrationSetRequest {
	s.Saml2RequestedNameidFormat = Saml2RequestedNameidFormat
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2PostLogoutRedirectUrl(Saml2PostLogoutRedirectUrl *string) *Saml2IntegrationSetRequest {
	s.Saml2PostLogoutRedirectUrl = Saml2PostLogoutRedirectUrl
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2ForceAuthn(Saml2ForceAuthn *bool) *Saml2IntegrationSetRequest {
	s.Saml2ForceAuthn = Saml2ForceAuthn
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2SnowflakeIssuerUrl(Saml2SnowflakeIssuerUrl *string) *Saml2IntegrationSetRequest {
	s.Saml2SnowflakeIssuerUrl = Saml2SnowflakeIssuerUrl
	return s
}

func (s *Saml2IntegrationSetRequest) WithSaml2SnowflakeAcsUrl(Saml2SnowflakeAcsUrl *string) *Saml2IntegrationSetRequest {
	s.Saml2SnowflakeAcsUrl = Saml2SnowflakeAcsUrl
	return s
}

func (s *Saml2IntegrationSetRequest) WithComment(Comment *string) *Saml2IntegrationSetRequest {
	s.Comment = Comment
	return s
}

func NewSaml2IntegrationUnsetRequest() *Saml2IntegrationUnsetRequest {
	return &Saml2IntegrationUnsetRequest{}
}

func (s *Saml2IntegrationUnsetRequest) WithSaml2ForceAuthn(Saml2ForceAuthn *bool) *Saml2IntegrationUnsetRequest {
	s.Saml2ForceAuthn = Saml2ForceAuthn
	return s
}

func (s *Saml2IntegrationUnsetRequest) WithSaml2RequestedNameidFormat(Saml2RequestedNameidFormat *bool) *Saml2IntegrationUnsetRequest {
	s.Saml2RequestedNameidFormat = Saml2RequestedNameidFormat
	return s
}

func (s *Saml2IntegrationUnsetRequest) WithSaml2PostLogoutRedirectUrl(Saml2PostLogoutRedirectUrl *bool) *Saml2IntegrationUnsetRequest {
	s.Saml2PostLogoutRedirectUrl = Saml2PostLogoutRedirectUrl
	return s
}

func (s *Saml2IntegrationUnsetRequest) WithComment(Comment *bool) *Saml2IntegrationUnsetRequest {
	s.Comment = Comment
	return s
}

func NewAlterScimSecurityIntegrationRequest(
	name AccountObjectIdentifier,
) *AlterScimSecurityIntegrationRequest {
	s := AlterScimSecurityIntegrationRequest{}
	s.name = name
	return &s
}

func (s *AlterScimSecurityIntegrationRequest) WithIfExists(IfExists *bool) *AlterScimSecurityIntegrationRequest {
	s.IfExists = IfExists
	return s
}

func (s *AlterScimSecurityIntegrationRequest) WithSetTags(SetTags []TagAssociation) *AlterScimSecurityIntegrationRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterScimSecurityIntegrationRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterScimSecurityIntegrationRequest {
	s.UnsetTags = UnsetTags
	return s
}

func (s *AlterScimSecurityIntegrationRequest) WithSet(Set *ScimIntegrationSetRequest) *AlterScimSecurityIntegrationRequest {
	s.Set = Set
	return s
}

func (s *AlterScimSecurityIntegrationRequest) WithUnset(Unset *ScimIntegrationUnsetRequest) *AlterScimSecurityIntegrationRequest {
	s.Unset = Unset
	return s
}

func NewScimIntegrationSetRequest() *ScimIntegrationSetRequest {
	return &ScimIntegrationSetRequest{}
}

func (s *ScimIntegrationSetRequest) WithEnabled(Enabled *bool) *ScimIntegrationSetRequest {
	s.Enabled = Enabled
	return s
}

func (s *ScimIntegrationSetRequest) WithNetworkPolicy(NetworkPolicy *AccountObjectIdentifier) *ScimIntegrationSetRequest {
	s.NetworkPolicy = NetworkPolicy
	return s
}

func (s *ScimIntegrationSetRequest) WithSyncPassword(SyncPassword *bool) *ScimIntegrationSetRequest {
	s.SyncPassword = SyncPassword
	return s
}

func (s *ScimIntegrationSetRequest) WithComment(Comment *string) *ScimIntegrationSetRequest {
	s.Comment = Comment
	return s
}

func NewScimIntegrationUnsetRequest() *ScimIntegrationUnsetRequest {
	return &ScimIntegrationUnsetRequest{}
}

func (s *ScimIntegrationUnsetRequest) WithEnabled(Enabled *bool) *ScimIntegrationUnsetRequest {
	s.Enabled = Enabled
	return s
}

func (s *ScimIntegrationUnsetRequest) WithNetworkPolicy(NetworkPolicy *bool) *ScimIntegrationUnsetRequest {
	s.NetworkPolicy = NetworkPolicy
	return s
}

func (s *ScimIntegrationUnsetRequest) WithSyncPassword(SyncPassword *bool) *ScimIntegrationUnsetRequest {
	s.SyncPassword = SyncPassword
	return s
}

func (s *ScimIntegrationUnsetRequest) WithComment(Comment *bool) *ScimIntegrationUnsetRequest {
	s.Comment = Comment
	return s
}

func NewDropSecurityIntegrationRequest(
	name AccountObjectIdentifier,
) *DropSecurityIntegrationRequest {
	s := DropSecurityIntegrationRequest{}
	s.name = name
	return &s
}

func (s *DropSecurityIntegrationRequest) WithIfExists(IfExists *bool) *DropSecurityIntegrationRequest {
	s.IfExists = IfExists
	return s
}

func NewDescribeSecurityIntegrationRequest(
	name AccountObjectIdentifier,
) *DescribeSecurityIntegrationRequest {
	s := DescribeSecurityIntegrationRequest{}
	s.name = name
	return &s
}

func NewShowSecurityIntegrationRequest() *ShowSecurityIntegrationRequest {
	return &ShowSecurityIntegrationRequest{}
}

func (s *ShowSecurityIntegrationRequest) WithLike(Like *Like) *ShowSecurityIntegrationRequest {
	s.Like = Like
	return s
}
