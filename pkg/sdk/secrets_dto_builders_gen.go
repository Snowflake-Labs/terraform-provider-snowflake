// Code generated by dto builder generator; DO NOT EDIT.

package sdk

func NewCreateWithOAuthClientCredentialsFlowSecretRequest(
	name SchemaObjectIdentifier,
	ApiIntegration AccountObjectIdentifier,
) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s := CreateWithOAuthClientCredentialsFlowSecretRequest{}
	s.name = name
	s.ApiIntegration = ApiIntegration
	return &s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithOrReplace(OrReplace bool) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithIfNotExists(IfNotExists bool) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithOauthScopes(OauthScopes OauthScopesListRequest) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.OauthScopes = &OauthScopes
	return s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithComment(Comment string) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.Comment = &Comment
	return s
}

func NewOauthScopesListRequest(
	OauthScopesList []ApiIntegrationScope,
) *OauthScopesListRequest {
	s := OauthScopesListRequest{}
	s.OauthScopesList = OauthScopesList
	return &s
}

func NewCreateWithOAuthAuthorizationCodeFlowSecretRequest(
	name SchemaObjectIdentifier,
	OauthRefreshToken string,
	OauthRefreshTokenExpiryTime string,
	ApiIntegration AccountObjectIdentifier,
) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s := CreateWithOAuthAuthorizationCodeFlowSecretRequest{}
	s.name = name
	s.OauthRefreshToken = OauthRefreshToken
	s.OauthRefreshTokenExpiryTime = OauthRefreshTokenExpiryTime
	s.ApiIntegration = ApiIntegration
	return &s
}

func (s *CreateWithOAuthAuthorizationCodeFlowSecretRequest) WithOrReplace(OrReplace bool) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateWithOAuthAuthorizationCodeFlowSecretRequest) WithIfNotExists(IfNotExists bool) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateWithOAuthAuthorizationCodeFlowSecretRequest) WithComment(Comment string) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s.Comment = &Comment
	return s
}

func NewCreateWithBasicAuthenticationSecretRequest(
	name SchemaObjectIdentifier,
	Username string,
	Password string,
) *CreateWithBasicAuthenticationSecretRequest {
	s := CreateWithBasicAuthenticationSecretRequest{}
	s.name = name
	s.Username = Username
	s.Password = Password
	return &s
}

func (s *CreateWithBasicAuthenticationSecretRequest) WithOrReplace(OrReplace bool) *CreateWithBasicAuthenticationSecretRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateWithBasicAuthenticationSecretRequest) WithIfNotExists(IfNotExists bool) *CreateWithBasicAuthenticationSecretRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateWithBasicAuthenticationSecretRequest) WithComment(Comment string) *CreateWithBasicAuthenticationSecretRequest {
	s.Comment = &Comment
	return s
}

func NewCreateWithGenericStringSecretRequest(
	name SchemaObjectIdentifier,
	SecretString string,
) *CreateWithGenericStringSecretRequest {
	s := CreateWithGenericStringSecretRequest{}
	s.name = name
	s.SecretString = SecretString
	return &s
}

func (s *CreateWithGenericStringSecretRequest) WithOrReplace(OrReplace bool) *CreateWithGenericStringSecretRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateWithGenericStringSecretRequest) WithIfNotExists(IfNotExists bool) *CreateWithGenericStringSecretRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateWithGenericStringSecretRequest) WithComment(Comment string) *CreateWithGenericStringSecretRequest {
	s.Comment = &Comment
	return s
}

func NewAlterSecretRequest(
	name SchemaObjectIdentifier,
) *AlterSecretRequest {
	s := AlterSecretRequest{}
	s.name = name
	return &s
}

func (s *AlterSecretRequest) WithIfExists(IfExists bool) *AlterSecretRequest {
	s.IfExists = &IfExists
	return s
}

func (s *AlterSecretRequest) WithSet(Set SecretSetRequest) *AlterSecretRequest {
	s.Set = &Set
	return s
}

func (s *AlterSecretRequest) WithUnset(Unset SecretUnsetRequest) *AlterSecretRequest {
	s.Unset = &Unset
	return s
}

func NewSecretSetRequest() *SecretSetRequest {
	return &SecretSetRequest{}
}

func (s *SecretSetRequest) WithComment(Comment string) *SecretSetRequest {
	s.Comment = &Comment
	return s
}

func (s *SecretSetRequest) WithSetForFlow(SetForFlow SetForFlowRequest) *SecretSetRequest {
	s.SetForFlow = &SetForFlow
	return s
}

func NewSetForFlowRequest() *SetForFlowRequest {
	return &SetForFlowRequest{}
}

func (s *SetForFlowRequest) WithSetForOAuthClientCredentials(SetForOAuthClientCredentials SetForOAuthClientCredentialsRequest) *SetForFlowRequest {
	s.SetForOAuthClientCredentials = &SetForOAuthClientCredentials
	return s
}

func (s *SetForFlowRequest) WithSetForOAuthAuthorization(SetForOAuthAuthorization SetForOAuthAuthorizationRequest) *SetForFlowRequest {
	s.SetForOAuthAuthorization = &SetForOAuthAuthorization
	return s
}

func (s *SetForFlowRequest) WithSetForBasicAuthentication(SetForBasicAuthentication SetForBasicAuthenticationRequest) *SetForFlowRequest {
	s.SetForBasicAuthentication = &SetForBasicAuthentication
	return s
}

func (s *SetForFlowRequest) WithSetForGenericString(SetForGenericString SetForGenericStringRequest) *SetForFlowRequest {
	s.SetForGenericString = &SetForGenericString
	return s
}

func NewSetForOAuthClientCredentialsRequest() *SetForOAuthClientCredentialsRequest {
	return &SetForOAuthClientCredentialsRequest{}
}

func (s *SetForOAuthClientCredentialsRequest) WithOauthScopes(OauthScopes OauthScopesListRequest) *SetForOAuthClientCredentialsRequest {
	s.OauthScopes = &OauthScopes
	return s
}

func NewSetForOAuthAuthorizationRequest() *SetForOAuthAuthorizationRequest {
	return &SetForOAuthAuthorizationRequest{}
}

func (s *SetForOAuthAuthorizationRequest) WithOauthRefreshToken(OauthRefreshToken string) *SetForOAuthAuthorizationRequest {
	s.OauthRefreshToken = &OauthRefreshToken
	return s
}

func (s *SetForOAuthAuthorizationRequest) WithOauthRefreshTokenExpiryTime(OauthRefreshTokenExpiryTime string) *SetForOAuthAuthorizationRequest {
	s.OauthRefreshTokenExpiryTime = &OauthRefreshTokenExpiryTime
	return s
}

func NewSetForBasicAuthenticationRequest() *SetForBasicAuthenticationRequest {
	return &SetForBasicAuthenticationRequest{}
}

func (s *SetForBasicAuthenticationRequest) WithUsername(Username string) *SetForBasicAuthenticationRequest {
	s.Username = &Username
	return s
}

func (s *SetForBasicAuthenticationRequest) WithPassword(Password string) *SetForBasicAuthenticationRequest {
	s.Password = &Password
	return s
}

func NewSetForGenericStringRequest() *SetForGenericStringRequest {
	return &SetForGenericStringRequest{}
}

func (s *SetForGenericStringRequest) WithSecretString(SecretString string) *SetForGenericStringRequest {
	s.SecretString = &SecretString
	return s
}

func NewSecretUnsetRequest() *SecretUnsetRequest {
	return &SecretUnsetRequest{}
}

func (s *SecretUnsetRequest) WithComment(Comment bool) *SecretUnsetRequest {
	s.Comment = &Comment
	return s
}

func NewDropSecretRequest(
	name SchemaObjectIdentifier,
) *DropSecretRequest {
	s := DropSecretRequest{}
	s.name = name
	return &s
}

func (s *DropSecretRequest) WithIfExists(IfExists bool) *DropSecretRequest {
	s.IfExists = &IfExists
	return s
}

func NewShowSecretRequest() *ShowSecretRequest {
	return &ShowSecretRequest{}
}

func (s *ShowSecretRequest) WithLike(Like Like) *ShowSecretRequest {
	s.Like = &Like
	return s
}

func (s *ShowSecretRequest) WithIn(In ExtendedIn) *ShowSecretRequest {
	s.In = &In
	return s
}

func NewDescribeSecretRequest(
	name SchemaObjectIdentifier,
) *DescribeSecretRequest {
	s := DescribeSecretRequest{}
	s.name = name
	return &s
}
