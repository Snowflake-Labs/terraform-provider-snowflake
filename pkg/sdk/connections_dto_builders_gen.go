// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateConnectionConnectionRequest(
	name AccountObjectIdentifier,
) *CreateConnectionConnectionRequest {
	s := CreateConnectionConnectionRequest{}
	s.name = name
	return &s
}

func (s *CreateConnectionConnectionRequest) WithIfNotExists(IfNotExists bool) *CreateConnectionConnectionRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateConnectionConnectionRequest) WithComment(Comment string) *CreateConnectionConnectionRequest {
	s.Comment = &Comment
	return s
}

func NewCreateReplicatedConnectionConnectionRequest(
	name AccountObjectIdentifier,
	ReplicaOf ExternalObjectIdentifier,
) *CreateReplicatedConnectionConnectionRequest {
	s := CreateReplicatedConnectionConnectionRequest{}
	s.name = name
	s.ReplicaOf = ReplicaOf
	return &s
}

func (s *CreateReplicatedConnectionConnectionRequest) WithIfNotExists(IfNotExists bool) *CreateReplicatedConnectionConnectionRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateReplicatedConnectionConnectionRequest) WithComment(Comment string) *CreateReplicatedConnectionConnectionRequest {
	s.Comment = &Comment
	return s
}

func NewAlterConnectionFailoverConnectionRequest(
	name AccountObjectIdentifier,
) *AlterConnectionFailoverConnectionRequest {
	s := AlterConnectionFailoverConnectionRequest{}
	s.name = name
	return &s
}

func (s *AlterConnectionFailoverConnectionRequest) WithEnableConnectionFailover(EnableConnectionFailover EnableConnectionFailoverRequest) *AlterConnectionFailoverConnectionRequest {
	s.EnableConnectionFailover = &EnableConnectionFailover
	return s
}

func (s *AlterConnectionFailoverConnectionRequest) WithDisableConnectionFailover(DisableConnectionFailover DisableConnectionFailoverRequest) *AlterConnectionFailoverConnectionRequest {
	s.DisableConnectionFailover = &DisableConnectionFailover
	return s
}

func (s *AlterConnectionFailoverConnectionRequest) WithPrimary(Primary PrimaryRequest) *AlterConnectionFailoverConnectionRequest {
	s.Primary = &Primary
	return s
}

func NewEnableConnectionFailoverRequest() *EnableConnectionFailoverRequest {
	return &EnableConnectionFailoverRequest{}
}

func (s *EnableConnectionFailoverRequest) WithAccounts(Accounts []ExternalObjectIdentifier) *EnableConnectionFailoverRequest {
	s.Accounts = Accounts
	return s
}

func (s *EnableConnectionFailoverRequest) WithIgnoreEditionCheck(IgnoreEditionCheck bool) *EnableConnectionFailoverRequest {
	s.IgnoreEditionCheck = &IgnoreEditionCheck
	return s
}

func NewDisableConnectionFailoverRequest() *DisableConnectionFailoverRequest {
	return &DisableConnectionFailoverRequest{}
}

func (s *DisableConnectionFailoverRequest) WithToAccounts(ToAccounts bool) *DisableConnectionFailoverRequest {
	s.ToAccounts = &ToAccounts
	return s
}

func (s *DisableConnectionFailoverRequest) WithAccounts(Accounts []ExternalObjectIdentifier) *DisableConnectionFailoverRequest {
	s.Accounts = Accounts
	return s
}

func NewPrimaryRequest() *PrimaryRequest {
	return &PrimaryRequest{}
}

func NewAlterConnectionConnectionRequest(
	name AccountObjectIdentifier,
) *AlterConnectionConnectionRequest {
	s := AlterConnectionConnectionRequest{}
	s.name = name
	return &s
}

func (s *AlterConnectionConnectionRequest) WithIfExists(IfExists bool) *AlterConnectionConnectionRequest {
	s.IfExists = &IfExists
	return s
}

func (s *AlterConnectionConnectionRequest) WithSet(Set SetRequest) *AlterConnectionConnectionRequest {
	s.Set = &Set
	return s
}

func (s *AlterConnectionConnectionRequest) WithUnset(Unset UnsetRequest) *AlterConnectionConnectionRequest {
	s.Unset = &Unset
	return s
}

func NewSetRequest() *SetRequest {
	return &SetRequest{}
}

func (s *SetRequest) WithComment(Comment string) *SetRequest {
	s.Comment = &Comment
	return s
}

func NewUnsetRequest() *UnsetRequest {
	return &UnsetRequest{}
}

func (s *UnsetRequest) WithComment(Comment bool) *UnsetRequest {
	s.Comment = &Comment
	return s
}
