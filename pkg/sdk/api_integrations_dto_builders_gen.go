// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateApiIntegrationRequest(
	name AccountObjectIdentifier,
	ApiAllowedPrefixes []ApiIntegrationEndpointPrefix,
	Enabled bool,
) *CreateApiIntegrationRequest {
	s := CreateApiIntegrationRequest{}
	s.name = name
	s.ApiAllowedPrefixes = ApiAllowedPrefixes
	s.Enabled = Enabled
	return &s
}

func (s *CreateApiIntegrationRequest) WithOrReplace(OrReplace *bool) *CreateApiIntegrationRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateApiIntegrationRequest) WithIfNotExists(IfNotExists *bool) *CreateApiIntegrationRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateApiIntegrationRequest) WithS3ApiProviderParams(S3ApiProviderParams *S3ApiParamsRequest) *CreateApiIntegrationRequest {
	s.S3ApiProviderParams = S3ApiProviderParams
	return s
}

func (s *CreateApiIntegrationRequest) WithAzureApiProviderParams(AzureApiProviderParams *AzureApiParamsRequest) *CreateApiIntegrationRequest {
	s.AzureApiProviderParams = AzureApiProviderParams
	return s
}

func (s *CreateApiIntegrationRequest) WithGCSApiProviderParams(GCSApiProviderParams *GCSApiParamsRequest) *CreateApiIntegrationRequest {
	s.GCSApiProviderParams = GCSApiProviderParams
	return s
}

func (s *CreateApiIntegrationRequest) WithApiBlockedPrefixes(ApiBlockedPrefixes []ApiIntegrationEndpointPrefix) *CreateApiIntegrationRequest {
	s.ApiBlockedPrefixes = ApiBlockedPrefixes
	return s
}

func (s *CreateApiIntegrationRequest) WithComment(Comment *string) *CreateApiIntegrationRequest {
	s.Comment = Comment
	return s
}

func NewS3ApiParamsRequest(
	ApiProvider ApiIntegrationAwsApiProviderType,
	ApiAwsRoleArn string,
) *S3ApiParamsRequest {
	s := S3ApiParamsRequest{}
	s.ApiProvider = ApiProvider
	s.ApiAwsRoleArn = ApiAwsRoleArn
	return &s
}

func (s *S3ApiParamsRequest) WithApiKey(ApiKey *string) *S3ApiParamsRequest {
	s.ApiKey = ApiKey
	return s
}

func NewAzureApiParamsRequest(
	AzureTenantId string,
	AzureAdApplicationId string,
) *AzureApiParamsRequest {
	s := AzureApiParamsRequest{}
	s.AzureTenantId = AzureTenantId
	s.AzureAdApplicationId = AzureAdApplicationId
	return &s
}

func (s *AzureApiParamsRequest) WithApiKey(ApiKey *string) *AzureApiParamsRequest {
	s.ApiKey = ApiKey
	return s
}

func NewGCSApiParamsRequest(
	GoogleAudience string,
) *GCSApiParamsRequest {
	s := GCSApiParamsRequest{}
	s.GoogleAudience = GoogleAudience
	return &s
}

func NewAlterApiIntegrationRequest(
	name AccountObjectIdentifier,
) *AlterApiIntegrationRequest {
	s := AlterApiIntegrationRequest{}
	s.name = name
	return &s
}

func (s *AlterApiIntegrationRequest) WithIfExists(IfExists *bool) *AlterApiIntegrationRequest {
	s.IfExists = IfExists
	return s
}

func (s *AlterApiIntegrationRequest) WithSet(Set *ApiIntegrationSetRequest) *AlterApiIntegrationRequest {
	s.Set = Set
	return s
}

func (s *AlterApiIntegrationRequest) WithUnset(Unset *ApiIntegrationUnsetRequest) *AlterApiIntegrationRequest {
	s.Unset = Unset
	return s
}

func (s *AlterApiIntegrationRequest) WithSetTags(SetTags []TagAssociation) *AlterApiIntegrationRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterApiIntegrationRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterApiIntegrationRequest {
	s.UnsetTags = UnsetTags
	return s
}

func NewApiIntegrationSetRequest() *ApiIntegrationSetRequest {
	return &ApiIntegrationSetRequest{}
}

func (s *ApiIntegrationSetRequest) WithS3Params(S3Params *SetS3ApiParamsRequest) *ApiIntegrationSetRequest {
	s.S3Params = S3Params
	return s
}

func (s *ApiIntegrationSetRequest) WithAzureParams(AzureParams *SetAzureApiParamsRequest) *ApiIntegrationSetRequest {
	s.AzureParams = AzureParams
	return s
}

func (s *ApiIntegrationSetRequest) WithEnabled(Enabled *bool) *ApiIntegrationSetRequest {
	s.Enabled = Enabled
	return s
}

func (s *ApiIntegrationSetRequest) WithApiAllowedPrefixes(ApiAllowedPrefixes []ApiIntegrationEndpointPrefix) *ApiIntegrationSetRequest {
	s.ApiAllowedPrefixes = ApiAllowedPrefixes
	return s
}

func (s *ApiIntegrationSetRequest) WithApiBlockedPrefixes(ApiBlockedPrefixes []ApiIntegrationEndpointPrefix) *ApiIntegrationSetRequest {
	s.ApiBlockedPrefixes = ApiBlockedPrefixes
	return s
}

func (s *ApiIntegrationSetRequest) WithComment(Comment *string) *ApiIntegrationSetRequest {
	s.Comment = Comment
	return s
}

func NewSetS3ApiParamsRequest() *SetS3ApiParamsRequest {
	return &SetS3ApiParamsRequest{}
}

func (s *SetS3ApiParamsRequest) WithApiAwsRoleArn(ApiAwsRoleArn *string) *SetS3ApiParamsRequest {
	s.ApiAwsRoleArn = ApiAwsRoleArn
	return s
}

func (s *SetS3ApiParamsRequest) WithApiKey(ApiKey *string) *SetS3ApiParamsRequest {
	s.ApiKey = ApiKey
	return s
}

func NewSetAzureApiParamsRequest(
	AzureAdApplicationId string,
) *SetAzureApiParamsRequest {
	s := SetAzureApiParamsRequest{}
	s.AzureAdApplicationId = AzureAdApplicationId
	return &s
}

func (s *SetAzureApiParamsRequest) WithApiKey(ApiKey *string) *SetAzureApiParamsRequest {
	s.ApiKey = ApiKey
	return s
}

func NewApiIntegrationUnsetRequest() *ApiIntegrationUnsetRequest {
	return &ApiIntegrationUnsetRequest{}
}

func (s *ApiIntegrationUnsetRequest) WithApiKey(ApiKey *bool) *ApiIntegrationUnsetRequest {
	s.ApiKey = ApiKey
	return s
}

func (s *ApiIntegrationUnsetRequest) WithEnabled(Enabled *bool) *ApiIntegrationUnsetRequest {
	s.Enabled = Enabled
	return s
}

func (s *ApiIntegrationUnsetRequest) WithApiBlockedPrefixes(ApiBlockedPrefixes *bool) *ApiIntegrationUnsetRequest {
	s.ApiBlockedPrefixes = ApiBlockedPrefixes
	return s
}

func (s *ApiIntegrationUnsetRequest) WithComment(Comment *bool) *ApiIntegrationUnsetRequest {
	s.Comment = Comment
	return s
}

func NewDropApiIntegrationRequest(
	name AccountObjectIdentifier,
) *DropApiIntegrationRequest {
	s := DropApiIntegrationRequest{}
	s.name = name
	return &s
}

func (s *DropApiIntegrationRequest) WithIfExists(IfExists *bool) *DropApiIntegrationRequest {
	s.IfExists = IfExists
	return s
}

func NewShowApiIntegrationRequest() *ShowApiIntegrationRequest {
	return &ShowApiIntegrationRequest{}
}

func (s *ShowApiIntegrationRequest) WithLike(Like *Like) *ShowApiIntegrationRequest {
	s.Like = Like
	return s
}

func NewDescribeApiIntegrationRequest(
	name AccountObjectIdentifier,
) *DescribeApiIntegrationRequest {
	s := DescribeApiIntegrationRequest{}
	s.name = name
	return &s
}
