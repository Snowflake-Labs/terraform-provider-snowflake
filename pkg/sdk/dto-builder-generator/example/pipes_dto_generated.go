// Code generated by dto builder generator; DO NOT EDIT.

package example

import (
	"bytes"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

func NewCreatePipeRequest(
	name sdk.SchemaObjectIdentifier,
	copyStatement string,
) *CreatePipeRequest {
	s := CreatePipeRequest{}
	s.name = name
	s.copyStatement = copyStatement
	return &s
}

func (s *CreatePipeRequest) WithOrReplace(orReplace bool) *CreatePipeRequest {
	s.orReplace = orReplace
	return s
}

func (s *CreatePipeRequest) WithIfNotExists(ifNotExists bool) *CreatePipeRequest {
	s.ifNotExists = ifNotExists
	return s
}

func (s *CreatePipeRequest) WithAutoIngest(autoIngest bool) *CreatePipeRequest {
	s.autoIngest = autoIngest
	return s
}

func (s *CreatePipeRequest) WithErrorIntegration(errorIntegration string) *CreatePipeRequest {
	s.errorIntegration = errorIntegration
	return s
}

func (s *CreatePipeRequest) WithAwsSnsTopic(awsSnsTopic string) *CreatePipeRequest {
	s.awsSnsTopic = awsSnsTopic
	return s
}

func (s *CreatePipeRequest) WithIntegration(integration string) *CreatePipeRequest {
	s.integration = integration
	return s
}

func (s *CreatePipeRequest) WithComment(comment string) *CreatePipeRequest {
	s.comment = comment
	return s
}

func (s *CreatePipeRequest) WithExampleOfImport(exampleOfImport bytes.Buffer) *CreatePipeRequest {
	s.exampleOfImport = exampleOfImport
	return s
}

func NewAlterPipeRequest(
	name sdk.SchemaObjectIdentifier,
) *AlterPipeRequest {
	s := AlterPipeRequest{}
	s.name = name
	return &s
}

func (s *AlterPipeRequest) WithIfExists(ifExists bool) *AlterPipeRequest {
	s.ifExists = ifExists
	return s
}

func (s *AlterPipeRequest) WithSet(set PipeSetRequest) *AlterPipeRequest {
	s.set = set
	return s
}

func (s *AlterPipeRequest) WithUnset(unset PipeUnsetRequest) *AlterPipeRequest {
	s.unset = unset
	return s
}

func (s *AlterPipeRequest) WithSetTags(setTags PipeSetTagsRequest) *AlterPipeRequest {
	s.setTags = setTags
	return s
}

func (s *AlterPipeRequest) WithUnsetTags(unsetTags PipeUnsetTagsRequest) *AlterPipeRequest {
	s.unsetTags = unsetTags
	return s
}

func (s *AlterPipeRequest) WithRefresh(refresh PipeRefreshRequest) *AlterPipeRequest {
	s.refresh = refresh
	return s
}

func NewPipeSetRequest() *PipeSetRequest {
	return &PipeSetRequest{}
}

func (s *PipeSetRequest) WithErrorIntegration(errorIntegration string) *PipeSetRequest {
	s.errorIntegration = errorIntegration
	return s
}

func (s *PipeSetRequest) WithPipeExecutionPaused(pipeExecutionPaused bool) *PipeSetRequest {
	s.pipeExecutionPaused = pipeExecutionPaused
	return s
}

func (s *PipeSetRequest) WithComment(comment string) *PipeSetRequest {
	s.comment = comment
	return s
}

func NewPipeUnsetRequest() *PipeUnsetRequest {
	return &PipeUnsetRequest{}
}

func (s *PipeUnsetRequest) WithPipeExecutionPaused(pipeExecutionPaused bool) *PipeUnsetRequest {
	s.pipeExecutionPaused = pipeExecutionPaused
	return s
}

func (s *PipeUnsetRequest) WithComment(comment bool) *PipeUnsetRequest {
	s.comment = comment
	return s
}

func NewPipeSetTagsRequest(
	tag []sdk.TagAssociation,
) *PipeSetTagsRequest {
	s := PipeSetTagsRequest{}
	s.tag = tag
	return &s
}

func NewPipeUnsetTagsRequest(
	tag []sdk.ObjectIdentifier,
) *PipeUnsetTagsRequest {
	s := PipeUnsetTagsRequest{}
	s.tag = tag
	return &s
}

func NewPipeRefreshRequest() *PipeRefreshRequest {
	return &PipeRefreshRequest{}
}

func (s *PipeRefreshRequest) WithPrefix(prefix string) *PipeRefreshRequest {
	s.prefix = prefix
	return s
}

func (s *PipeRefreshRequest) WithModifiedAfter(modifiedAfter string) *PipeRefreshRequest {
	s.modifiedAfter = modifiedAfter
	return s
}
