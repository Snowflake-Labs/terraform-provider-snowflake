// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateExternalTableRequest(
	name AccountObjectIdentifier,
	location string,
	fileFormat ExternalTableFileFormat,
) *CreateExternalTableRequest {
	s := CreateExternalTableRequest{}
	s.name = name
	s.location = location
	s.fileFormat = fileFormat
	return &s
}

func (s *CreateExternalTableRequest) WithOrReplace(orReplace *bool) *CreateExternalTableRequest {
	s.orReplace = orReplace
	return s
}

func (s *CreateExternalTableRequest) WithIfNotExists(ifNotExists *bool) *CreateExternalTableRequest {
	s.ifNotExists = ifNotExists
	return s
}

func (s *CreateExternalTableRequest) WithColumns(columns []ExternalTableColumn) *CreateExternalTableRequest {
	s.columns = columns
	return s
}

func (s *CreateExternalTableRequest) WithCloudProviderParams(cloudProviderParams *CloudProviderParams) *CreateExternalTableRequest {
	s.cloudProviderParams = cloudProviderParams
	return s
}

func (s *CreateExternalTableRequest) WithPartitionBy(partitionBy []string) *CreateExternalTableRequest {
	s.partitionBy = partitionBy
	return s
}

func (s *CreateExternalTableRequest) WithRefreshOnCreate(refreshOnCreate *bool) *CreateExternalTableRequest {
	s.refreshOnCreate = refreshOnCreate
	return s
}

func (s *CreateExternalTableRequest) WithAutoRefresh(autoRefresh *bool) *CreateExternalTableRequest {
	s.autoRefresh = autoRefresh
	return s
}

func (s *CreateExternalTableRequest) WithPattern(pattern *string) *CreateExternalTableRequest {
	s.pattern = pattern
	return s
}

func (s *CreateExternalTableRequest) WithAwsSnsTopic(awsSnsTopic *string) *CreateExternalTableRequest {
	s.awsSnsTopic = awsSnsTopic
	return s
}

func (s *CreateExternalTableRequest) WithCopyGrants(copyGrants *bool) *CreateExternalTableRequest {
	s.copyGrants = copyGrants
	return s
}

func (s *CreateExternalTableRequest) WithComment(comment *string) *CreateExternalTableRequest {
	s.comment = comment
	return s
}

func (s *CreateExternalTableRequest) WithRowAccessPolicy(rowAccessPolicy *RowAccessPolicy) *CreateExternalTableRequest {
	s.rowAccessPolicy = rowAccessPolicy
	return s
}

func (s *CreateExternalTableRequest) WithTag(tag []TagAssociation) *CreateExternalTableRequest {
	s.tag = tag
	return s
}

func NewCreateWithManualPartitioningExternalTableRequest(
	name AccountObjectIdentifier,
	location string,
	fileFormat ExternalTableFileFormat,
) *CreateWithManualPartitioningExternalTableRequest {
	s := CreateWithManualPartitioningExternalTableRequest{}
	s.name = name
	s.location = location
	s.fileFormat = fileFormat
	return &s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithOrReplace(orReplace *bool) *CreateWithManualPartitioningExternalTableRequest {
	s.orReplace = orReplace
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithIfNotExists(ifNotExists *bool) *CreateWithManualPartitioningExternalTableRequest {
	s.ifNotExists = ifNotExists
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithColumns(columns []ExternalTableColumn) *CreateWithManualPartitioningExternalTableRequest {
	s.columns = columns
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithCloudProviderParams(cloudProviderParams *CloudProviderParams) *CreateWithManualPartitioningExternalTableRequest {
	s.cloudProviderParams = cloudProviderParams
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithPartitionBy(partitionBy []string) *CreateWithManualPartitioningExternalTableRequest {
	s.partitionBy = partitionBy
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithCopyGrants(copyGrants *bool) *CreateWithManualPartitioningExternalTableRequest {
	s.copyGrants = copyGrants
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithComment(comment *string) *CreateWithManualPartitioningExternalTableRequest {
	s.comment = comment
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithRowAccessPolicy(rowAccessPolicy *RowAccessPolicy) *CreateWithManualPartitioningExternalTableRequest {
	s.rowAccessPolicy = rowAccessPolicy
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithTag(tag []TagAssociation) *CreateWithManualPartitioningExternalTableRequest {
	s.tag = tag
	return s
}

func NewCreateDeltaLakeExternalTableRequest(
	name AccountObjectIdentifier,
	location string,
	fileFormat ExternalTableFileFormat,
) *CreateDeltaLakeExternalTableRequest {
	s := CreateDeltaLakeExternalTableRequest{}
	s.name = name
	s.location = location
	s.fileFormat = fileFormat
	return &s
}

func (s *CreateDeltaLakeExternalTableRequest) WithOrReplace(orReplace *bool) *CreateDeltaLakeExternalTableRequest {
	s.orReplace = orReplace
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithIfNotExists(ifNotExists *bool) *CreateDeltaLakeExternalTableRequest {
	s.ifNotExists = ifNotExists
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithColumns(columns []ExternalTableColumn) *CreateDeltaLakeExternalTableRequest {
	s.columns = columns
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithCloudProviderParams(cloudProviderParams *CloudProviderParams) *CreateDeltaLakeExternalTableRequest {
	s.cloudProviderParams = cloudProviderParams
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithPartitionBy(partitionBy []string) *CreateDeltaLakeExternalTableRequest {
	s.partitionBy = partitionBy
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithDeltaTableFormat(deltaTableFormat *bool) *CreateDeltaLakeExternalTableRequest {
	s.deltaTableFormat = deltaTableFormat
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithCopyGrants(copyGrants *bool) *CreateDeltaLakeExternalTableRequest {
	s.copyGrants = copyGrants
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithComment(comment *string) *CreateDeltaLakeExternalTableRequest {
	s.comment = comment
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithRowAccessPolicy(rowAccessPolicy *RowAccessPolicy) *CreateDeltaLakeExternalTableRequest {
	s.rowAccessPolicy = rowAccessPolicy
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithTag(tag []TagAssociation) *CreateDeltaLakeExternalTableRequest {
	s.tag = tag
	return s
}

func NewCreateExternalTableUsingTemplateRequest(
	name AccountObjectIdentifier,
	location string,
	fileFormat ExternalTableFileFormat,
) *CreateExternalTableUsingTemplateRequest {
	s := CreateExternalTableUsingTemplateRequest{}
	s.name = name
	s.location = location
	s.fileFormat = fileFormat
	return &s
}

func (s *CreateExternalTableUsingTemplateRequest) WithOrReplace(orReplace *bool) *CreateExternalTableUsingTemplateRequest {
	s.orReplace = orReplace
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithCopyGrants(copyGrants *bool) *CreateExternalTableUsingTemplateRequest {
	s.copyGrants = copyGrants
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithQuery(query string) *CreateExternalTableUsingTemplateRequest {
	s.query = query
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithCloudProviderParams(cloudProviderParams *CloudProviderParams) *CreateExternalTableUsingTemplateRequest {
	s.cloudProviderParams = cloudProviderParams
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithPartitionBy(partitionBy []string) *CreateExternalTableUsingTemplateRequest {
	s.partitionBy = partitionBy
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithRefreshOnCreate(refreshOnCreate *bool) *CreateExternalTableUsingTemplateRequest {
	s.refreshOnCreate = refreshOnCreate
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithAutoRefresh(autoRefresh *bool) *CreateExternalTableUsingTemplateRequest {
	s.autoRefresh = autoRefresh
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithPattern(pattern *string) *CreateExternalTableUsingTemplateRequest {
	s.pattern = pattern
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithAwsSnsTopic(awsSnsTopic *string) *CreateExternalTableUsingTemplateRequest {
	s.awsSnsTopic = awsSnsTopic
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithComment(comment *string) *CreateExternalTableUsingTemplateRequest {
	s.comment = comment
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithRowAccessPolicy(rowAccessPolicy *RowAccessPolicy) *CreateExternalTableUsingTemplateRequest {
	s.rowAccessPolicy = rowAccessPolicy
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithTag(tag []TagAssociation) *CreateExternalTableUsingTemplateRequest {
	s.tag = tag
	return s
}

func NewAlterExternalTableRequest(
	name AccountObjectIdentifier,
) *AlterExternalTableRequest {
	s := AlterExternalTableRequest{}
	s.name = name
	return &s
}

func (s *AlterExternalTableRequest) WithIfExists(ifExists *bool) *AlterExternalTableRequest {
	s.ifExists = ifExists
	return s
}

func (s *AlterExternalTableRequest) WithRefresh(refresh *RefreshExternalTable) *AlterExternalTableRequest {
	s.refresh = refresh
	return s
}

func (s *AlterExternalTableRequest) WithAddFiles(addFiles []ExternalTableFile) *AlterExternalTableRequest {
	s.addFiles = addFiles
	return s
}

func (s *AlterExternalTableRequest) WithRemoveFiles(removeFiles []ExternalTableFile) *AlterExternalTableRequest {
	s.removeFiles = removeFiles
	return s
}

func (s *AlterExternalTableRequest) WithAutoRefresh(autoRefresh *bool) *AlterExternalTableRequest {
	s.autoRefresh = autoRefresh
	return s
}

func (s *AlterExternalTableRequest) WithSetTag(setTag []TagAssociation) *AlterExternalTableRequest {
	s.setTag = setTag
	return s
}

func (s *AlterExternalTableRequest) WithUnsetTag(unsetTag []ObjectIdentifier) *AlterExternalTableRequest {
	s.unsetTag = unsetTag
	return s
}

func NewAlterExternalTablePartitionRequest(
	name AccountObjectIdentifier,
) *AlterExternalTablePartitionRequest {
	s := AlterExternalTablePartitionRequest{}
	s.name = name
	return &s
}

func (s *AlterExternalTablePartitionRequest) WithIfExists(ifExists *bool) *AlterExternalTablePartitionRequest {
	s.ifExists = ifExists
	return s
}

func (s *AlterExternalTablePartitionRequest) WithAddPartitions(addPartitions []Partition) *AlterExternalTablePartitionRequest {
	s.addPartitions = addPartitions
	return s
}

func (s *AlterExternalTablePartitionRequest) WithDropPartition(dropPartition *bool) *AlterExternalTablePartitionRequest {
	s.dropPartition = dropPartition
	return s
}

func (s *AlterExternalTablePartitionRequest) WithLocation(location string) *AlterExternalTablePartitionRequest {
	s.location = location
	return s
}

func NewDropExternalTableRequest(
	name AccountObjectIdentifier,
) *DropExternalTableRequest {
	s := DropExternalTableRequest{}
	s.name = name
	return &s
}

func (s *DropExternalTableRequest) WithIfExists(ifExists *bool) *DropExternalTableRequest {
	s.ifExists = ifExists
	return s
}

func (s *DropExternalTableRequest) WithDropOption(dropOption *ExternalTableDropOption) *DropExternalTableRequest {
	s.dropOption = dropOption
	return s
}

func NewShowExternalTableRequest() *ShowExternalTableRequest {
	return &ShowExternalTableRequest{}
}

func (s *ShowExternalTableRequest) WithTerse(terse *bool) *ShowExternalTableRequest {
	s.terse = terse
	return s
}

func (s *ShowExternalTableRequest) WithLike(like *Like) *ShowExternalTableRequest {
	s.like = like
	return s
}

func (s *ShowExternalTableRequest) WithIn(in *In) *ShowExternalTableRequest {
	s.in = in
	return s
}

func (s *ShowExternalTableRequest) WithStartsWith(startsWith *string) *ShowExternalTableRequest {
	s.startsWith = startsWith
	return s
}

func (s *ShowExternalTableRequest) WithLimitFrom(limitFrom *LimitFrom) *ShowExternalTableRequest {
	s.limitFrom = limitFrom
	return s
}

func NewShowExternalTableByIDRequest(
	id AccountObjectIdentifier,
) *ShowExternalTableByIDRequest {
	s := ShowExternalTableByIDRequest{}
	s.id = id
	return &s
}

func NewDescribeExternalTableColumnsRequest(
	id AccountObjectIdentifier,
) *DescribeExternalTableColumnsRequest {
	s := DescribeExternalTableColumnsRequest{}
	s.id = id
	return &s
}

func NewDescribeExternalTableStageRequest(
	id AccountObjectIdentifier,
) *DescribeExternalTableStageRequest {
	s := DescribeExternalTableStageRequest{}
	s.id = id
	return &s
}
