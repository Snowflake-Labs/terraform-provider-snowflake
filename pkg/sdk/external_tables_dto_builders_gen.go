// Code generated by dto builder generator; DO NOT EDIT.

package sdk

func NewCreateExternalTableRequest(
	name SchemaObjectIdentifier,
	location string,
) *CreateExternalTableRequest {
	s := CreateExternalTableRequest{}
	s.name = name
	s.location = location
	return &s
}

func (s *CreateExternalTableRequest) WithOrReplace(orReplace *bool) *CreateExternalTableRequest {
	s.orReplace = orReplace
	return s
}

func (s *CreateExternalTableRequest) WithIfNotExists(ifNotExists *bool) *CreateExternalTableRequest {
	s.ifNotExists = ifNotExists
	return s
}

func (s *CreateExternalTableRequest) WithColumns(columns []*ExternalTableColumnRequest) *CreateExternalTableRequest {
	s.columns = columns
	return s
}

func (s *CreateExternalTableRequest) WithCloudProviderParams(cloudProviderParams *CloudProviderParamsRequest) *CreateExternalTableRequest {
	s.cloudProviderParams = cloudProviderParams
	return s
}

func (s *CreateExternalTableRequest) WithPartitionBy(partitionBy []string) *CreateExternalTableRequest {
	s.partitionBy = partitionBy
	return s
}

func (s *CreateExternalTableRequest) WithRefreshOnCreate(refreshOnCreate *bool) *CreateExternalTableRequest {
	s.refreshOnCreate = refreshOnCreate
	return s
}

func (s *CreateExternalTableRequest) WithAutoRefresh(autoRefresh *bool) *CreateExternalTableRequest {
	s.autoRefresh = autoRefresh
	return s
}

func (s *CreateExternalTableRequest) WithPattern(pattern *string) *CreateExternalTableRequest {
	s.pattern = pattern
	return s
}

func (s *CreateExternalTableRequest) WithRawFileFormat(rawFileFormat *string) *CreateExternalTableRequest {
	s.rawFileFormat = rawFileFormat
	return s
}

func (s *CreateExternalTableRequest) WithFileFormat(fileFormat *ExternalTableFileFormatRequest) *CreateExternalTableRequest {
	s.fileFormat = fileFormat
	return s
}

func (s *CreateExternalTableRequest) WithAwsSnsTopic(awsSnsTopic *string) *CreateExternalTableRequest {
	s.awsSnsTopic = awsSnsTopic
	return s
}

func (s *CreateExternalTableRequest) WithCopyGrants(copyGrants *bool) *CreateExternalTableRequest {
	s.copyGrants = copyGrants
	return s
}

func (s *CreateExternalTableRequest) WithComment(comment *string) *CreateExternalTableRequest {
	s.comment = comment
	return s
}

func (s *CreateExternalTableRequest) WithRowAccessPolicy(rowAccessPolicy *RowAccessPolicyRequest) *CreateExternalTableRequest {
	s.rowAccessPolicy = rowAccessPolicy
	return s
}

func (s *CreateExternalTableRequest) WithTag(tag []*TagAssociationRequest) *CreateExternalTableRequest {
	s.tag = tag
	return s
}

func NewExternalTableColumnRequest(
	name string,
	dataType DataType,
	asExpression string,
) *ExternalTableColumnRequest {
	s := ExternalTableColumnRequest{}
	s.name = name
	s.dataType = dataType
	s.asExpression = asExpression
	return &s
}

func (s *ExternalTableColumnRequest) WithNotNull() *ExternalTableColumnRequest {
	s.notNull = Bool(true)
	return s
}

func (s *ExternalTableColumnRequest) WithInlineConstraint(inlineConstraint *ColumnInlineConstraintRequest) *ExternalTableColumnRequest {
	s.inlineConstraint = inlineConstraint
	return s
}

func NewCloudProviderParamsRequest() *CloudProviderParamsRequest {
	return &CloudProviderParamsRequest{}
}

func (s *CloudProviderParamsRequest) WithGoogleCloudStorageIntegration(googleCloudStorageIntegration *string) *CloudProviderParamsRequest {
	s.googleCloudStorageIntegration = googleCloudStorageIntegration
	return s
}

func (s *CloudProviderParamsRequest) WithMicrosoftAzureIntegration(microsoftAzureIntegration *string) *CloudProviderParamsRequest {
	s.microsoftAzureIntegration = microsoftAzureIntegration
	return s
}

func NewExternalTableFileFormatRequest() *ExternalTableFileFormatRequest {
	return &ExternalTableFileFormatRequest{}
}

func (s *ExternalTableFileFormatRequest) WithName(name *string) *ExternalTableFileFormatRequest {
	s.name = name
	return s
}

func (s *ExternalTableFileFormatRequest) WithFileFormatType(fileFormatType *ExternalTableFileFormatType) *ExternalTableFileFormatRequest {
	s.fileFormatType = fileFormatType
	return s
}

func (s *ExternalTableFileFormatRequest) WithOptions(options *ExternalTableFileFormatTypeOptionsRequest) *ExternalTableFileFormatRequest {
	s.options = options
	return s
}

func NewExternalTableFileFormatTypeOptionsRequest() *ExternalTableFileFormatTypeOptionsRequest {
	return &ExternalTableFileFormatTypeOptionsRequest{}
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvCompression(csvCompression *ExternalTableCsvCompression) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvCompression = csvCompression
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvRecordDelimiter(csvRecordDelimiter *string) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvRecordDelimiter = csvRecordDelimiter
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvFieldDelimiter(csvFieldDelimiter *string) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvFieldDelimiter = csvFieldDelimiter
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvSkipHeader(csvSkipHeader *int) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvSkipHeader = csvSkipHeader
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvSkipBlankLines(csvSkipBlankLines *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvSkipBlankLines = csvSkipBlankLines
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvEscapeUnenclosedField(csvEscapeUnenclosedField *string) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvEscapeUnenclosedField = csvEscapeUnenclosedField
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvTrimSpace(csvTrimSpace *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvTrimSpace = csvTrimSpace
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvFieldOptionallyEnclosedBy(csvFieldOptionallyEnclosedBy *string) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvFieldOptionallyEnclosedBy = csvFieldOptionallyEnclosedBy
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvNullIf(csvNullIf *[]NullStringRequest) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvNullIf = csvNullIf
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvEmptyFieldAsNull(csvEmptyFieldAsNull *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvEmptyFieldAsNull = csvEmptyFieldAsNull
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithCsvEncoding(csvEncoding *CSVEncoding) *ExternalTableFileFormatTypeOptionsRequest {
	s.csvEncoding = csvEncoding
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithJsonCompression(jsonCompression *ExternalTableJsonCompression) *ExternalTableFileFormatTypeOptionsRequest {
	s.jsonCompression = jsonCompression
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithJsonAllowDuplicate(jsonAllowDuplicate *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.jsonAllowDuplicate = jsonAllowDuplicate
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithJsonStripOuterArray(jsonStripOuterArray *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.jsonStripOuterArray = jsonStripOuterArray
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithJsonStripNullValues(jsonStripNullValues *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.jsonStripNullValues = jsonStripNullValues
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithJsonReplaceInvalidCharacters(jsonReplaceInvalidCharacters *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.jsonReplaceInvalidCharacters = jsonReplaceInvalidCharacters
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithAvroCompression(avroCompression *ExternalTableAvroCompression) *ExternalTableFileFormatTypeOptionsRequest {
	s.avroCompression = avroCompression
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithAvroReplaceInvalidCharacters(avroReplaceInvalidCharacters *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.avroReplaceInvalidCharacters = avroReplaceInvalidCharacters
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithOrcTrimSpace(orcTrimSpace *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.orcTrimSpace = orcTrimSpace
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithOrcReplaceInvalidCharacters(orcReplaceInvalidCharacters *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.orcReplaceInvalidCharacters = orcReplaceInvalidCharacters
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithOrcNullIf(orcNullIf *[]NullStringRequest) *ExternalTableFileFormatTypeOptionsRequest {
	s.orcNullIf = orcNullIf
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithParquetCompression(parquetCompression *ExternalTableParquetCompression) *ExternalTableFileFormatTypeOptionsRequest {
	s.parquetCompression = parquetCompression
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithParquetBinaryAsText(parquetBinaryAsText *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.parquetBinaryAsText = parquetBinaryAsText
	return s
}

func (s *ExternalTableFileFormatTypeOptionsRequest) WithParquetReplaceInvalidCharacters(parquetReplaceInvalidCharacters *bool) *ExternalTableFileFormatTypeOptionsRequest {
	s.parquetReplaceInvalidCharacters = parquetReplaceInvalidCharacters
	return s
}

func NewNullStringRequest() *NullStringRequest {
	return &NullStringRequest{}
}

func (s *NullStringRequest) WithStr(str string) *NullStringRequest {
	s.str = str
	return s
}

func NewRowAccessPolicyRequest(
	name SchemaObjectIdentifier,
	on []string,
) *RowAccessPolicyRequest {
	s := RowAccessPolicyRequest{}
	s.Name = name
	s.On = on
	return &s
}

func NewCreateWithManualPartitioningExternalTableRequest(
	name SchemaObjectIdentifier,
	location string,
) *CreateWithManualPartitioningExternalTableRequest {
	s := CreateWithManualPartitioningExternalTableRequest{}
	s.name = name
	s.location = location
	return &s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithOrReplace(orReplace *bool) *CreateWithManualPartitioningExternalTableRequest {
	s.orReplace = orReplace
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithIfNotExists(ifNotExists *bool) *CreateWithManualPartitioningExternalTableRequest {
	s.ifNotExists = ifNotExists
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithColumns(columns []*ExternalTableColumnRequest) *CreateWithManualPartitioningExternalTableRequest {
	s.columns = columns
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithCloudProviderParams(cloudProviderParams *CloudProviderParamsRequest) *CreateWithManualPartitioningExternalTableRequest {
	s.cloudProviderParams = cloudProviderParams
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithPartitionBy(partitionBy []string) *CreateWithManualPartitioningExternalTableRequest {
	s.partitionBy = partitionBy
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithUserSpecifiedPartitionType(userSpecifiedPartitionType *bool) *CreateWithManualPartitioningExternalTableRequest {
	s.userSpecifiedPartitionType = userSpecifiedPartitionType
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithRawFileFormat(rawFileFormat *string) *CreateWithManualPartitioningExternalTableRequest {
	s.rawFileFormat = rawFileFormat
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithFileFormat(fileFormat *ExternalTableFileFormatRequest) *CreateWithManualPartitioningExternalTableRequest {
	s.fileFormat = fileFormat
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithCopyGrants(copyGrants *bool) *CreateWithManualPartitioningExternalTableRequest {
	s.copyGrants = copyGrants
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithComment(comment *string) *CreateWithManualPartitioningExternalTableRequest {
	s.comment = comment
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithRowAccessPolicy(rowAccessPolicy *RowAccessPolicyRequest) *CreateWithManualPartitioningExternalTableRequest {
	s.rowAccessPolicy = rowAccessPolicy
	return s
}

func (s *CreateWithManualPartitioningExternalTableRequest) WithTag(tag []*TagAssociationRequest) *CreateWithManualPartitioningExternalTableRequest {
	s.tag = tag
	return s
}

func NewCreateDeltaLakeExternalTableRequest(
	name SchemaObjectIdentifier,
	location string,
) *CreateDeltaLakeExternalTableRequest {
	s := CreateDeltaLakeExternalTableRequest{}
	s.name = name
	s.location = location
	return &s
}

func (s *CreateDeltaLakeExternalTableRequest) WithOrReplace(orReplace *bool) *CreateDeltaLakeExternalTableRequest {
	s.orReplace = orReplace
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithIfNotExists(ifNotExists *bool) *CreateDeltaLakeExternalTableRequest {
	s.ifNotExists = ifNotExists
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithColumns(columns []*ExternalTableColumnRequest) *CreateDeltaLakeExternalTableRequest {
	s.columns = columns
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithCloudProviderParams(cloudProviderParams *CloudProviderParamsRequest) *CreateDeltaLakeExternalTableRequest {
	s.cloudProviderParams = cloudProviderParams
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithPartitionBy(partitionBy []string) *CreateDeltaLakeExternalTableRequest {
	s.partitionBy = partitionBy
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithUserSpecifiedPartitionType(userSpecifiedPartitionType *bool) *CreateDeltaLakeExternalTableRequest {
	s.userSpecifiedPartitionType = userSpecifiedPartitionType
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithRefreshOnCreate(refreshOnCreate *bool) *CreateDeltaLakeExternalTableRequest {
	s.refreshOnCreate = refreshOnCreate
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithAutoRefresh(autoRefresh *bool) *CreateDeltaLakeExternalTableRequest {
	s.autoRefresh = autoRefresh
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithRawFileFormat(rawFileFormat *string) *CreateDeltaLakeExternalTableRequest {
	s.rawFileFormat = rawFileFormat
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithFileFormat(fileFormat *ExternalTableFileFormatRequest) *CreateDeltaLakeExternalTableRequest {
	s.fileFormat = fileFormat
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithDeltaTableFormat(deltaTableFormat *bool) *CreateDeltaLakeExternalTableRequest {
	s.deltaTableFormat = deltaTableFormat
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithCopyGrants(copyGrants *bool) *CreateDeltaLakeExternalTableRequest {
	s.copyGrants = copyGrants
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithComment(comment *string) *CreateDeltaLakeExternalTableRequest {
	s.comment = comment
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithRowAccessPolicy(rowAccessPolicy *RowAccessPolicyRequest) *CreateDeltaLakeExternalTableRequest {
	s.rowAccessPolicy = rowAccessPolicy
	return s
}

func (s *CreateDeltaLakeExternalTableRequest) WithTag(tag []*TagAssociationRequest) *CreateDeltaLakeExternalTableRequest {
	s.tag = tag
	return s
}

func NewCreateExternalTableUsingTemplateRequest(
	name SchemaObjectIdentifier,
	location string,
) *CreateExternalTableUsingTemplateRequest {
	s := CreateExternalTableUsingTemplateRequest{}
	s.name = name
	s.location = location
	return &s
}

func (s *CreateExternalTableUsingTemplateRequest) WithOrReplace(orReplace *bool) *CreateExternalTableUsingTemplateRequest {
	s.orReplace = orReplace
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithCopyGrants(copyGrants *bool) *CreateExternalTableUsingTemplateRequest {
	s.copyGrants = copyGrants
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithQuery(query string) *CreateExternalTableUsingTemplateRequest {
	s.query = query
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithCloudProviderParams(cloudProviderParams *CloudProviderParamsRequest) *CreateExternalTableUsingTemplateRequest {
	s.cloudProviderParams = cloudProviderParams
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithPartitionBy(partitionBy []string) *CreateExternalTableUsingTemplateRequest {
	s.partitionBy = partitionBy
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithRefreshOnCreate(refreshOnCreate *bool) *CreateExternalTableUsingTemplateRequest {
	s.refreshOnCreate = refreshOnCreate
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithAutoRefresh(autoRefresh *bool) *CreateExternalTableUsingTemplateRequest {
	s.autoRefresh = autoRefresh
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithPattern(pattern *string) *CreateExternalTableUsingTemplateRequest {
	s.pattern = pattern
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithRawFileFormat(rawFileFormat *string) *CreateExternalTableUsingTemplateRequest {
	s.rawFileFormat = rawFileFormat
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithFileFormat(fileFormat *ExternalTableFileFormatRequest) *CreateExternalTableUsingTemplateRequest {
	s.fileFormat = fileFormat
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithAwsSnsTopic(awsSnsTopic *string) *CreateExternalTableUsingTemplateRequest {
	s.awsSnsTopic = awsSnsTopic
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithComment(comment *string) *CreateExternalTableUsingTemplateRequest {
	s.comment = comment
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithRowAccessPolicy(rowAccessPolicy *RowAccessPolicyRequest) *CreateExternalTableUsingTemplateRequest {
	s.rowAccessPolicy = rowAccessPolicy
	return s
}

func (s *CreateExternalTableUsingTemplateRequest) WithTag(tag []*TagAssociationRequest) *CreateExternalTableUsingTemplateRequest {
	s.tag = tag
	return s
}

func NewAlterExternalTableRequest(
	name SchemaObjectIdentifier,
) *AlterExternalTableRequest {
	s := AlterExternalTableRequest{}
	s.name = name
	return &s
}

func (s *AlterExternalTableRequest) WithIfExists(ifExists *bool) *AlterExternalTableRequest {
	s.ifExists = ifExists
	return s
}

func (s *AlterExternalTableRequest) WithRefresh(refresh *RefreshExternalTableRequest) *AlterExternalTableRequest {
	s.refresh = refresh
	return s
}

func (s *AlterExternalTableRequest) WithAddFiles(addFiles []*ExternalTableFileRequest) *AlterExternalTableRequest {
	s.addFiles = addFiles
	return s
}

func (s *AlterExternalTableRequest) WithRemoveFiles(removeFiles []*ExternalTableFileRequest) *AlterExternalTableRequest {
	s.removeFiles = removeFiles
	return s
}

func (s *AlterExternalTableRequest) WithAutoRefresh(autoRefresh *bool) *AlterExternalTableRequest {
	s.autoRefresh = autoRefresh
	return s
}

func (s *AlterExternalTableRequest) WithSetTag(setTag []*TagAssociationRequest) *AlterExternalTableRequest {
	s.setTag = setTag
	return s
}

func (s *AlterExternalTableRequest) WithUnsetTag(unsetTag []ObjectIdentifier) *AlterExternalTableRequest {
	s.unsetTag = unsetTag
	return s
}

func NewRefreshExternalTableRequest(
	path string,
) *RefreshExternalTableRequest {
	s := RefreshExternalTableRequest{}
	s.path = path
	return &s
}

func NewExternalTableFileRequest(
	name string,
) *ExternalTableFileRequest {
	s := ExternalTableFileRequest{}
	s.name = name
	return &s
}

func NewAlterExternalTablePartitionRequest(
	name SchemaObjectIdentifier,
) *AlterExternalTablePartitionRequest {
	s := AlterExternalTablePartitionRequest{}
	s.name = name
	return &s
}

func (s *AlterExternalTablePartitionRequest) WithIfExists(ifExists *bool) *AlterExternalTablePartitionRequest {
	s.ifExists = ifExists
	return s
}

func (s *AlterExternalTablePartitionRequest) WithAddPartitions(addPartitions []*PartitionRequest) *AlterExternalTablePartitionRequest {
	s.addPartitions = addPartitions
	return s
}

func (s *AlterExternalTablePartitionRequest) WithDropPartition(dropPartition *bool) *AlterExternalTablePartitionRequest {
	s.dropPartition = dropPartition
	return s
}

func (s *AlterExternalTablePartitionRequest) WithLocation(location string) *AlterExternalTablePartitionRequest {
	s.location = location
	return s
}

func NewPartitionRequest(
	columnName string,
	value string,
) *PartitionRequest {
	s := PartitionRequest{}
	s.columnName = columnName
	s.value = value
	return &s
}

func NewDropExternalTableRequest(
	name SchemaObjectIdentifier,
) *DropExternalTableRequest {
	s := DropExternalTableRequest{}
	s.name = name
	return &s
}

func (s *DropExternalTableRequest) WithIfExists(ifExists *bool) *DropExternalTableRequest {
	s.ifExists = ifExists
	return s
}

func (s *DropExternalTableRequest) WithDropOption(dropOption *ExternalTableDropOptionRequest) *DropExternalTableRequest {
	s.dropOption = dropOption
	return s
}

func NewExternalTableDropOptionRequest() *ExternalTableDropOptionRequest {
	return &ExternalTableDropOptionRequest{}
}

func (s *ExternalTableDropOptionRequest) WithRestrict(restrict *bool) *ExternalTableDropOptionRequest {
	s.restrict = restrict
	return s
}

func (s *ExternalTableDropOptionRequest) WithCascade(cascade *bool) *ExternalTableDropOptionRequest {
	s.cascade = cascade
	return s
}

func NewShowExternalTableRequest() *ShowExternalTableRequest {
	return &ShowExternalTableRequest{}
}

func (s *ShowExternalTableRequest) WithTerse(terse *bool) *ShowExternalTableRequest {
	s.terse = terse
	return s
}

func (s *ShowExternalTableRequest) WithLike(like *string) *ShowExternalTableRequest {
	s.like = like
	return s
}

func (s *ShowExternalTableRequest) WithIn(in *ShowExternalTableInRequest) *ShowExternalTableRequest {
	s.in = in
	return s
}

func (s *ShowExternalTableRequest) WithStartsWith(startsWith *string) *ShowExternalTableRequest {
	s.startsWith = startsWith
	return s
}

func (s *ShowExternalTableRequest) WithLimitFrom(limitFrom *LimitFromRequest) *ShowExternalTableRequest {
	s.limitFrom = limitFrom
	return s
}

func NewShowExternalTableInRequest() *ShowExternalTableInRequest {
	return &ShowExternalTableInRequest{}
}

func (s *ShowExternalTableInRequest) WithAccount(account *bool) *ShowExternalTableInRequest {
	s.account = account
	return s
}

func (s *ShowExternalTableInRequest) WithDatabase(database AccountObjectIdentifier) *ShowExternalTableInRequest {
	s.database = database
	return s
}

func (s *ShowExternalTableInRequest) WithSchema(schema DatabaseObjectIdentifier) *ShowExternalTableInRequest {
	s.schema = schema
	return s
}

func NewShowExternalTableByIDRequest(
	id SchemaObjectIdentifier,
) *ShowExternalTableByIDRequest {
	s := ShowExternalTableByIDRequest{}
	s.id = id
	return &s
}

func NewDescribeExternalTableColumnsRequest(
	id SchemaObjectIdentifier,
) *DescribeExternalTableColumnsRequest {
	s := DescribeExternalTableColumnsRequest{}
	s.id = id
	return &s
}

func NewDescribeExternalTableStageRequest(
	id SchemaObjectIdentifier,
) *DescribeExternalTableStageRequest {
	s := DescribeExternalTableStageRequest{}
	s.id = id
	return &s
}
