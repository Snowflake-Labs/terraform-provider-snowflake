// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateExternalVolumeRequest(
	name AccountObjectIdentifier,
	StorageLocations []ExternalVolumeStorageLocation,
) *CreateExternalVolumeRequest {
	s := CreateExternalVolumeRequest{}
	s.name = name
	s.StorageLocations = StorageLocations
	return &s
}

func (s *CreateExternalVolumeRequest) WithOrReplace(OrReplace bool) *CreateExternalVolumeRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateExternalVolumeRequest) WithIfNotExists(IfNotExists bool) *CreateExternalVolumeRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateExternalVolumeRequest) WithAllowWrites(AllowWrites bool) *CreateExternalVolumeRequest {
	s.AllowWrites = &AllowWrites
	return s
}

func (s *CreateExternalVolumeRequest) WithComment(Comment string) *CreateExternalVolumeRequest {
	s.Comment = &Comment
	return s
}

func NewAlterExternalVolumeRequest(
	name AccountObjectIdentifier,
) *AlterExternalVolumeRequest {
	s := AlterExternalVolumeRequest{}
	s.name = name
	return &s
}

func (s *AlterExternalVolumeRequest) WithIfExists(IfExists bool) *AlterExternalVolumeRequest {
	s.IfExists = &IfExists
	return s
}

func (s *AlterExternalVolumeRequest) WithRemoveStorageLocation(RemoveStorageLocation string) *AlterExternalVolumeRequest {
	s.RemoveStorageLocation = &RemoveStorageLocation
	return s
}

func (s *AlterExternalVolumeRequest) WithSet(Set AlterExternalVolumeSetRequest) *AlterExternalVolumeRequest {
	s.Set = &Set
	return s
}

func (s *AlterExternalVolumeRequest) WithAddStorageLocation(AddStorageLocation ExternalVolumeStorageLocationRequest) *AlterExternalVolumeRequest {
	s.AddStorageLocation = &AddStorageLocation
	return s
}

func NewAlterExternalVolumeSetRequest() *AlterExternalVolumeSetRequest {
	return &AlterExternalVolumeSetRequest{}
}

func (s *AlterExternalVolumeSetRequest) WithAllowWrites(AllowWrites bool) *AlterExternalVolumeSetRequest {
	s.AllowWrites = &AllowWrites
	return s
}

func (s *AlterExternalVolumeSetRequest) WithComment(Comment string) *AlterExternalVolumeSetRequest {
	s.Comment = &Comment
	return s
}

func NewExternalVolumeStorageLocationRequest() *ExternalVolumeStorageLocationRequest {
	return &ExternalVolumeStorageLocationRequest{}
}

func (s *ExternalVolumeStorageLocationRequest) WithS3StorageLocationParams(S3StorageLocationParams S3StorageLocationParamsRequest) *ExternalVolumeStorageLocationRequest {
	s.S3StorageLocationParams = &S3StorageLocationParams
	return s
}

func (s *ExternalVolumeStorageLocationRequest) WithGCSStorageLocationParams(GCSStorageLocationParams GCSStorageLocationParamsRequest) *ExternalVolumeStorageLocationRequest {
	s.GCSStorageLocationParams = &GCSStorageLocationParams
	return s
}

func (s *ExternalVolumeStorageLocationRequest) WithAzureStorageLocationParams(AzureStorageLocationParams AzureStorageLocationParamsRequest) *ExternalVolumeStorageLocationRequest {
	s.AzureStorageLocationParams = &AzureStorageLocationParams
	return s
}

func NewS3StorageLocationParamsRequest(
	Name string,
	StorageProvider S3StorageProvider,
	StorageAwsRoleArn string,
	StorageBaseUrl string,
) *S3StorageLocationParamsRequest {
	s := S3StorageLocationParamsRequest{}
	s.Name = Name
	s.StorageProvider = StorageProvider
	s.StorageAwsRoleArn = StorageAwsRoleArn
	s.StorageBaseUrl = StorageBaseUrl
	return &s
}

func (s *S3StorageLocationParamsRequest) WithStorageAwsExternalId(StorageAwsExternalId string) *S3StorageLocationParamsRequest {
	s.StorageAwsExternalId = &StorageAwsExternalId
	return s
}

func (s *S3StorageLocationParamsRequest) WithEncryption(Encryption ExternalVolumeS3EncryptionRequest) *S3StorageLocationParamsRequest {
	s.Encryption = &Encryption
	return s
}

func NewExternalVolumeS3EncryptionRequest(
	Type S3EncryptionType,
) *ExternalVolumeS3EncryptionRequest {
	s := ExternalVolumeS3EncryptionRequest{}
	s.Type = Type
	return &s
}

func (s *ExternalVolumeS3EncryptionRequest) WithKmsKeyId(KmsKeyId string) *ExternalVolumeS3EncryptionRequest {
	s.KmsKeyId = &KmsKeyId
	return s
}

func NewGCSStorageLocationParamsRequest(
	Name string,
	StorageBaseUrl string,
) *GCSStorageLocationParamsRequest {
	s := GCSStorageLocationParamsRequest{}
	s.Name = Name
	s.StorageBaseUrl = StorageBaseUrl
	return &s
}

func (s *GCSStorageLocationParamsRequest) WithEncryption(Encryption ExternalVolumeGCSEncryptionRequest) *GCSStorageLocationParamsRequest {
	s.Encryption = &Encryption
	return s
}

func NewExternalVolumeGCSEncryptionRequest(
	Type GCSEncryptionType,
) *ExternalVolumeGCSEncryptionRequest {
	s := ExternalVolumeGCSEncryptionRequest{}
	s.Type = Type
	return &s
}

func (s *ExternalVolumeGCSEncryptionRequest) WithKmsKeyId(KmsKeyId string) *ExternalVolumeGCSEncryptionRequest {
	s.KmsKeyId = &KmsKeyId
	return s
}

func NewAzureStorageLocationParamsRequest(
	Name string,
	AzureTenantId string,
	StorageBaseUrl string,
) *AzureStorageLocationParamsRequest {
	s := AzureStorageLocationParamsRequest{}
	s.Name = Name
	s.AzureTenantId = AzureTenantId
	s.StorageBaseUrl = StorageBaseUrl
	return &s
}

func NewDropExternalVolumeRequest(
	name AccountObjectIdentifier,
) *DropExternalVolumeRequest {
	s := DropExternalVolumeRequest{}
	s.name = name
	return &s
}

func (s *DropExternalVolumeRequest) WithIfExists(IfExists bool) *DropExternalVolumeRequest {
	s.IfExists = &IfExists
	return s
}

func NewDescribeExternalVolumeRequest(
	name AccountObjectIdentifier,
) *DescribeExternalVolumeRequest {
	s := DescribeExternalVolumeRequest{}
	s.name = name
	return &s
}

func NewShowExternalVolumeRequest() *ShowExternalVolumeRequest {
	return &ShowExternalVolumeRequest{}
}

func (s *ShowExternalVolumeRequest) WithLike(Like Like) *ShowExternalVolumeRequest {
	s.Like = &Like
	return s
}
