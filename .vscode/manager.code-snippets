{
	// Place your terraform-provider-snowflake workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New manager": {
		"scope": "go",
		"prefix": "manager",
		"body": [
			"type ${1:ObjectName} struct {",
			"\tSchemaObjectIdentifier",
			"",
			"\t$0",
			"}",
			"",
			"type $1Manager struct {",
			"\tBaseManager",
			"}",
			"",
			"func New$1Manager() (*$1Manager, error) {",
			"\tsqlBuilder, err := newSQLBuilder(",
			"\t\t\"$2\",",
			"\t\t\"$3\",",
			"\t\treflect.TypeOf($1CreateInput{}),",
			"\t\treflect.TypeOf($1UpdateInput{}),",
			"\t\treflect.TypeOf($1UpdateInput{}),",
			"\t\treflect.TypeOf($1DeleteInput{}),",
			"\t\treflect.TypeOf($1ReadOutput{}),",
			"\t)",
			"\tif err != nil {",
			"\t\treturn nil, err",
			"\t}",
			"",
			"\treturn &$1Manager{",
			"\t\tBaseManager: BaseManager{",
			"\t\t\tsqlBuilder: *sqlBuilder,",
			"\t\t},",
			"\t}, nil",
			"}",
			"",
			"type $1CreateInput struct {",
			"\t$1",
			"}",
			"",
			"func (m *$1Manager) Create(x *$1CreateInput) (string, error) {",
			"\treturn m.sqlBuilder.Create(x)",
			"}",
			"",
			"type (",
			"\t$1ReadInput  = SchemaObjectIdentifier",
			"\t$1ReadOutput = $1",
			")",
			"",
			"func (m *$1Manager) Read(x *$1ReadInput) (string, error) {",
			"\treturn m.sqlBuilder.Describe(x)",
			"}",
			"",
			"func (m *$1Manager) Parse(rows *sql.Rows) (*$1ReadOutput, error) {",
			"\toutput := &$1ReadOutput{}",
			"\terr := m.sqlBuilder.ParseDescribe(rows, output)",
			"\tif err != nil {",
			"\t\treturn nil, err",
			"\t}",
			"\treturn output, nil",
			"}",
			"",
			"type $1UpdateInput struct {",
			"\t$1",
			"}",
			"",
			"func (m *$1Manager) Update(x *$1UpdateInput) (string, error) {",
			"\treturn m.sqlBuilder.Alter(x)",
			"}",
			"",
			"func (m *$1Manager) Unset(x *$1UpdateInput) (string, error) {",
			"\treturn m.sqlBuilder.Unset(x)",
			"}",
			"",
			"type $1DeleteInput struct {",
			"\tSchemaObjectIdentifier",
			"}",
			"",
			"func (m *$1Manager) Delete(x *$1DeleteInput) (string, error) {",
			"\treturn m.sqlBuilder.Drop(x)",
			"}",
		],
		"description": "Bootstrap a new object manager"
	}
}
