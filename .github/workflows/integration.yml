# Run secret-dependent integration tests only after /ok-to-test approval
on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]

name: Integration tests

jobs:
  # Branch-based pull request
  integration-trusted:
    runs-on: ubuntu-latest
    # Runs tests when a PR is opened from the original repo (not a forked repo), which protects the secrets and builds for trusted contributors
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      matrix:
        target:
          - test-acceptance
          - lint-ci
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.15.5'
      - name: Install dependencies
        run: make setup

      - name: make ${{ matrix.target }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.REVIEWDOG_GITHUB_API_TOKEN }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        run: make ${{ matrix.target }}

  # Repo owner has commented /ok-to-test on a (fork-based) pull request
  integration-fork:
    runs-on: ubuntu-latest
    if:
    # Strict rule to check the latest commit sha with the one provided in the ok-to-test command
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha == github.event.client_payload.pull_request.head.sha
    # Integration tests needing secrets
    strategy:
      matrix:
        target:
          - test-acceptance
          - lint-ci
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'
      - uses: actions/setup-go@v2
        with:
          go-version: '1.15.5'
      - name: Install dependencies
        run: make setup

      - name: make ${{ matrix.target }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.REVIEWDOG_GITHUB_API_TOKEN }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        run: make ${{ matrix.target }}
      - uses: actions/github-script@v1
        id: update-check-run
        if: ${{ always() }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;

            const { data: checks } = await github.checks.listForRef({
              ...context.repo,
              ref
            });

            const check = checks.check_runs.filter(c => c.name === process.env.job);

            const { data: result } = await github.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });

            return result;
