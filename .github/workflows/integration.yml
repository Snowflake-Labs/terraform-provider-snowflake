# Run secret-dependent integration tests only after /ok-to-test approval
on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]

name: Integration tests

jobs:
  integration-trusted:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - test-acceptance
          - lint-ci
    steps:
      - id: sha-input
        run: |
          id=$(echo ${{github.event.client_payload.slash_command.args.named.sha}} | cut -d- -f2)
          echo "::set-output name=id::$id"

      - id: sha-head
        run: |
          id=$(echo ${{github.event.client_payload.pull_request.head.sha}} | cut -d- -f2)
          echo "::set-output name=id::$id"

      - uses: actions/checkout@v2
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository

      - uses: actions/setup-go@v2
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        with:
          go-version: '1.15.5'

      - name: Install dependencies
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        run: make setup

      - name: make ${{ matrix.target }} integration trusted
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.REVIEWDOG_GITHUB_API_TOKEN }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        run: make ${{ matrix.target }}

      - uses: actions/checkout@v2
        if: github.event_name == 'repository_dispatch' && steps.sha-input.outputs.id == steps.sha-head.outputs.id
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

      - uses: actions/setup-go@v2
        if: github.event_name == 'repository_dispatch' && steps.sha-input.outputs.id == steps.sha-head.outputs.id
        with:
          go-version: '1.15.5'

      - name: Install dependencies
        if: github.event_name == 'repository_dispatch' && steps.sha-input.outputs.id == steps.sha-head.outputs.id
        run: make setup

      - name: make ${{ matrix.target }} integration fork
        if: github.event_name == 'repository_dispatch' && steps.sha-input.outputs.id == steps.sha-head.outputs.id
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.REVIEWDOG_GITHUB_API_TOKEN }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        run: make ${{ matrix.target }}

      - uses: actions/github-script@v1
        if: github.event_name == 'repository_dispatch' && steps.sha-input.outputs.id == steps.sha-head.outputs.id && ${{ always() }}
        id: update-check-run
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;

            const { data: checks } = await github.checks.listForRef({
              ...context.repo,
              ref
            });

            const check = checks.check_runs.filter(c => c.name === process.env.job);

            const { data: result } = await github.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });

            return result;
