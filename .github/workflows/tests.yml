# Run secret-dependent integration tests only after /ok-to-test approval
name: Tests

# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/control-the-concurrency-of-workflows-and-jobs#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  repository_dispatch:
    types: [ ok-to-test-command ]
  pull_request:

jobs:
  all-tests:
    environment: test
    env:
      TEST_SF_TF_TEST_OBJECT_SUFFIX: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.pull_request.head.sha) || (github.event_name == 'pull_request' && github.event.pull_request.head.sha) }}
    name: Run All
    runs-on: ubuntu-latest
    if: (github.event_name == 'repository_dispatch') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    steps:
      - name: Filter changed files
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            run_tests:
              - '.github/**'
              - 'pkg/**'
              - 'framework/**'
              - 'tools/**'
              - 'Makefile'
              - 'CHANGELOG.md'
              - 'main.go'
              - 'go.mod'

      - id: verify_sha_input
        if: github.event_name == 'repository_dispatch'
        run: |
          echo \"${{ github.event.client_payload.pull_request.head.sha }}\"
          echo \"${{ github.event.client_payload.slash_command.args.named.sha }}\"
          echo \"${{ github.event.client_payload.pull_request.head.repo.full_name }}\"
          echo \"${{ github.event.client_payload.pull_request.head.ref }}\"
          SHAINPUT=$(echo ${{ github.event.client_payload.slash_command.args.named.sha }} | cut -c1-7)
          if [ ${#SHAINPUT} -le 6 ]; then echo "error::input sha not at least 7 characters long" ; exit 1
          else echo "done"
          fi
          SHAHEAD=$(echo ${{ github.event.client_payload.pull_request.head.sha }} | cut -c1-7)
          echo ${#SHAINPUT}
          echo ${#SHAHEAD}
          if [ "${SHAHEAD}" != "${SHAINPUT}" ]; then echo "sha input from slash command does not equal the head sha" ; exit 1
          else echo "shas are equal"
          fi

      - name: Checkout Code (Repository Dispatch Event)
        id: checkout_dispatch
        if: (github.event_name == 'repository_dispatch')
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.pull_request.head.ref }}
          persist-credentials: false

      - name: Checkout Code (Pull Request Event)
        id: checkout_pr
        if: ${{ !cancelled() && (steps.changes.outputs.run_tests == 'true') && (github.event_name == 'pull_request') }}
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/setup-go@v4
        id: setup_go
        if: ${{ !cancelled() && (steps.checkout_pr.conclusion == 'success' || steps.checkout_dispatch.conclusion == 'success') }}
        with:
          go-version-file: ./go.mod
          cache: false

      - name: Apply masking
        if: ${{ !cancelled() && steps.setup_go.conclusion == 'success' }}
        run: |
          while IFS= read -r line || [[ -n $line ]]; do
            echo "::add-mask::$line"
          done < <(printf '%s' "$SF_TF_GH_MASKING")
        env:
          SF_TF_GH_MASKING: ${{ secrets.SF_TF_GH_MASKING }}

      - name: Generate random secret
        if: ${{ !cancelled() && steps.setup_go.conclusion == 'success' }}
        run: |
          random=$(openssl rand -hex 20)
          final_random="${TEST_SF_TF_RANDOM}${random}"
          echo "::add-mask::${final_random}"
          echo "TEST_SF_TF_GENERATED_RANDOM_VALUE=${final_random}" >> $GITHUB_ENV
        env:
          TEST_SF_TF_RANDOM: ${{ secrets.TEST_SF_TF_RANDOM }}

      - name: Install dependencies
        if: ${{ !cancelled() && steps.setup_go.conclusion == 'success' }}
        run: make dev-setup

      - name: Create and populate .snowflake/config file
        if: ${{ !cancelled() && steps.setup_go.conclusion == 'success' }}
        id: create_config
        run: mkdir -p $HOME/.snowflake && echo "${{ secrets.SNOWFLAKE_CONFIG_FILE }}" > $HOME/.snowflake/config && chmod 0600 $HOME/.snowflake/config

      - name: Create and populate .snowflake/config_v097_compatible file
        if: ${{ !cancelled() && steps.setup_go.conclusion == 'success' }}
        id: create_config_v097_compatible
        run: mkdir -p $HOME/.snowflake && echo "${{ secrets.SNOWFLAKE_CONFIG_FILE_V097_COMPATIBLE }}" > $HOME/.snowflake/config_v097_compatible && chmod 0600 $HOME/.snowflake/config_v097_compatible

      - name: Run unit and integration tests
        run: make test
        if: ${{ !cancelled() && steps.create_config.conclusion == 'success' }}
        env:
          SNOWFLAKE_BUSINESS_CRITICAL_ACCOUNT: ${{ secrets.SNOWFLAKE_BUSINESS_CRITICAL_ACCOUNT }}
          TEST_SF_TF_AWS_EXTERNAL_BUCKET_URL: ${{ secrets.TEST_SF_TF_AWS_EXTERNAL_BUCKET_URL }}
          TEST_SF_TF_AWS_EXTERNAL_KEY_ID: ${{ secrets.TEST_SF_TF_AWS_EXTERNAL_KEY_ID }}
          TEST_SF_TF_AWS_EXTERNAL_ROLE_ARN: ${{ secrets.TEST_SF_TF_AWS_EXTERNAL_ROLE_ARN }}
          TEST_SF_TF_AWS_EXTERNAL_SECRET_KEY: ${{ secrets.TEST_SF_TF_AWS_EXTERNAL_SECRET_KEY }}
          TEST_SF_TF_AZURE_EXTERNAL_BUCKET_URL: ${{ secrets.TEST_SF_TF_AZURE_EXTERNAL_BUCKET_URL }}
          TEST_SF_TF_AZURE_EXTERNAL_SAS_TOKEN: ${{ secrets.TEST_SF_TF_AZURE_EXTERNAL_SAS_TOKEN }}
          TEST_SF_TF_AZURE_EXTERNAL_TENANT_ID: ${{ secrets.TEST_SF_TF_AZURE_EXTERNAL_TENANT_ID }}
          TEST_SF_TF_GCS_EXTERNAL_BUCKET_URL: ${{ secrets.TEST_SF_TF_GCS_EXTERNAL_BUCKET_URL }}

      - name: Setup Terraform
        if: ${{ !cancelled() && steps.create_config.conclusion == 'success' }}
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        id: setup_terraform
        with:
          terraform_version: 1.7.4
          terraform_wrapper: false

      - name: Run acceptance tests
        run: make test-acceptance
        if: ${{ !cancelled() && steps.setup_terraform.conclusion == 'success' }}
        env:
          SNOWFLAKE_BUSINESS_CRITICAL_ACCOUNT: ${{ secrets.SNOWFLAKE_BUSINESS_CRITICAL_ACCOUNT }}
          TEST_SF_TF_AWS_EXTERNAL_BUCKET_URL: ${{ secrets.TEST_SF_TF_AWS_EXTERNAL_BUCKET_URL }}
          TEST_SF_TF_AWS_EXTERNAL_KEY_ID: ${{ secrets.TEST_SF_TF_AWS_EXTERNAL_KEY_ID }}
          TEST_SF_TF_AWS_EXTERNAL_ROLE_ARN: ${{ secrets.TEST_SF_TF_AWS_EXTERNAL_ROLE_ARN }}
          TEST_SF_TF_AWS_EXTERNAL_SECRET_KEY: ${{ secrets.TEST_SF_TF_AWS_EXTERNAL_SECRET_KEY }}
          TEST_SF_TF_AZURE_EXTERNAL_BUCKET_URL: ${{ secrets.TEST_SF_TF_AZURE_EXTERNAL_BUCKET_URL }}
          TEST_SF_TF_AZURE_EXTERNAL_SAS_TOKEN: ${{ secrets.TEST_SF_TF_AZURE_EXTERNAL_SAS_TOKEN }}
          TEST_SF_TF_AZURE_EXTERNAL_TENANT_ID: ${{ secrets.TEST_SF_TF_AZURE_EXTERNAL_TENANT_ID }}
          TEST_SF_TF_GCS_EXTERNAL_BUCKET_URL: ${{ secrets.TEST_SF_TF_GCS_EXTERNAL_BUCKET_URL }}

      - name: Sweepers cleanup
        if: ${{ always() && steps.setup_go.conclusion == 'success' }}
        run: echo y | make sweep

      - name: Find comment
        if: ${{ always() }}
        uses: peter-evans/find-comment@034abe94d3191f9c89d870519735beae326f2bdb # v2.3.0
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number || github.event.client_payload.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Integration tests ran for

      - name: Create or update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          issue-number: ${{ github.event.pull_request.number || github.event.client_payload.pull_request.number }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            Integration tests ${{ job.status }} for [${{ github.event.client_payload.slash_command.args.named.sha || github.event.pull_request.head.sha }}](https://github.com/snowflakedb/terraform-provider-snowflake/actions/runs/${{ github.run_id }})

      - name: Set fork job status
        uses: actions/github-script@v6
        if: ${{ always() }}
        id: update_check_run
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }}
          sha: ${{ github.event.client_payload.slash_command.args.named.sha }}
          event_name: ${{ github.event_name }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (process.env.event_name !== 'repository_dispatch') {
              console.log("Not repository_dispatch... nothing to do!");
              return process.env.event_name;
            }
            const ref = process.env.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            console.log(check);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
